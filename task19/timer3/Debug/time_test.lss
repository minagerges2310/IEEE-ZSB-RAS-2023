
time_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  000049ec  00004a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000d6  008000d6  00004af6  2**0
                  ALLOC
  3 .stab         00004194  00000000  00000000  00004af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f0  00000000  00000000  00008c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a16b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e234  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e676  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ef04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_1>
       8:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__vector_2>
       c:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__vector_10>
      2c:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3e       	cpi	r26, 0xE7	; 231
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <main>
      8a:	0c 94 f4 24 	jmp	0x49e8	; 0x49e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 eb       	ldi	r26, 0xB6	; 182
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 eb       	ldi	r24, 0xB6	; 182
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 eb       	ldi	r22, 0xB6	; 182
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
/*ADC busy flag*/
static u8 ADC_u8BusyFlag = 0;


void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
      2- right adjust
      3- disable autotrigger
      4- select CLk/64
      5- enable ADc
    */
   CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
   SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24

   CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

   CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

   SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
   SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
   CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24

   SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	29 97       	sbiw	r28, 0x09	; 9
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue !=NULL))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     d48:	56 c0       	rjmp	.+172    	; 0xdf6 <ADC_u8GetDigitalValueSynchNonBlocking+0xda>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     d52:	51 c0       	rjmp	.+162    	; 0xdf6 <ADC_u8GetDigitalValueSynchNonBlocking+0xda>
    {
        /*clear mux4..0*/
        ADC_u8_ADMUX_REG &= 0b11100000;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 7e       	andi	r24, 0xE0	; 224
     d60:	8c 93       	st	X, r24
        /*selct channel*/
        ADC_u8_ADMUX_REG != Copy_u8ChannelNb;
     d62:	e7 e2       	ldi	r30, 0x27	; 39
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	20 81       	ld	r18, Z
        /*start conversion*/
        SET_BIT(ADC_u8_ADCSRA_REG,6);
     d68:	a6 e2       	ldi	r26, 0x26	; 38
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e6 e2       	ldi	r30, 0x26	; 38
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	8c 93       	st	X, r24
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <ADC_u8GetDigitalValueSynchNonBlocking+0x72>
        /*wait flag=1*/
        while ((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE ))
        {
            Local_u32TimeOutCounter++;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	ab 81       	ldd	r26, Y+3	; 0x03
     d7e:	bc 81       	ldd	r27, Y+4	; 0x04
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	a1 1d       	adc	r26, r1
     d84:	b1 1d       	adc	r27, r1
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	ab 83       	std	Y+3, r26	; 0x03
     d8c:	bc 83       	std	Y+4, r27	; 0x04
        /*selct channel*/
        ADC_u8_ADMUX_REG != Copy_u8ChannelNb;
        /*start conversion*/
        SET_BIT(ADC_u8_ADCSRA_REG,6);
        /*wait flag=1*/
        while ((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE ))
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 95       	swap	r24
     d96:	8f 70       	andi	r24, 0x0F	; 15
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	61 f4       	brne	.+24     	; 0xdbc <ADC_u8GetDigitalValueSynchNonBlocking+0xa0>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	ab 81       	ldd	r26, Y+3	; 0x03
     daa:	bc 81       	ldd	r27, Y+4	; 0x04
     dac:	80 35       	cpi	r24, 0x50	; 80
     dae:	23 ec       	ldi	r18, 0xC3	; 195
     db0:	92 07       	cpc	r25, r18
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	a2 07       	cpc	r26, r18
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	b2 07       	cpc	r27, r18
     dba:	f0 f2       	brcs	.-68     	; 0xd78 <ADC_u8GetDigitalValueSynchNonBlocking+0x5c>
        {
            Local_u32TimeOutCounter++;
        }
        if(GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE )
     dbc:	e6 e2       	ldi	r30, 0x26	; 38
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	82 95       	swap	r24
     dc4:	8f 70       	andi	r24, 0x0F	; 15
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	81 f4       	brne	.+32     	; 0xdf2 <ADC_u8GetDigitalValueSynchNonBlocking+0xd6>
        {/*clear flag*/
        SET_BIT(ADC_u8_ADCSRA_REG,4);
     dd2:	a6 e2       	ldi	r26, 0x26	; 38
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 61       	ori	r24, 0x10	; 16
     dde:	8c 93       	st	X, r24
        /*reaad the digital value*/
        *Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     de0:	e4 e2       	ldi	r30, 0x24	; 36
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	ef 81       	ldd	r30, Y+7	; 0x07
     dea:	f8 85       	ldd	r31, Y+8	; 0x08
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <ADC_u8GetDigitalValueSynchNonBlocking+0xdc>
        }
        else{
            Local_u8ErrorState = STD_TYPES_NOK;
     df2:	1d 82       	std	Y+5, r1	; 0x05
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <ADC_u8GetDigitalValueSynchNonBlocking+0xdc>
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
     df6:	1d 82       	std	Y+5, r1	; 0x05
    }



    return Local_u8ErrorState;
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dfa:	29 96       	adiw	r28, 0x09	; 9
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <ADC_u8GetDigitalValueAsynch>:

u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <ADC_u8GetDigitalValueAsynch+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <ADC_u8GetDigitalValueAsynch+0x8>
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	7c 83       	std	Y+4, r23	; 0x04
     e1e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag ==0))
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	80 32       	cpi	r24, 0x20	; 32
     e28:	50 f5       	brcc	.+84     	; 0xe7e <ADC_u8GetDigitalValueAsynch+0x72>
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	31 f1       	breq	.+76     	; 0xe7e <ADC_u8GetDigitalValueAsynch+0x72>
     e32:	80 91 d8 00 	lds	r24, 0x00D8
     e36:	88 23       	and	r24, r24
     e38:	11 f5       	brne	.+68     	; 0xe7e <ADC_u8GetDigitalValueAsynch+0x72>
    {
        /*set flag to make ADC is busy*/
        ADC_u8BusyFlag = 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 d8 00 	sts	0x00D8, r24
        /*update global pointer to a function*/
        ADC_pfNotification = Copy_pfNotification;
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	90 93 d7 00 	sts	0x00D7, r25
     e48:	80 93 d6 00 	sts	0x00D6, r24
        /*enable ADC interrupt*/
        SET_BIT(ADC_u8_ADCSRA_REG,3);
     e4c:	a6 e2       	ldi	r26, 0x26	; 38
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e6 e2       	ldi	r30, 0x26	; 38
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	8c 93       	st	X, r24
        /*clear mux4..0*/
        ADC_u8_ADMUX_REG &= 0b11100000;
     e5a:	a7 e2       	ldi	r26, 0x27	; 39
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e7 e2       	ldi	r30, 0x27	; 39
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 7e       	andi	r24, 0xE0	; 224
     e66:	8c 93       	st	X, r24
        /*selct channel*/
        ADC_u8_ADMUX_REG != Copy_u8ChannelNb;
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
        /*start conversion*/
        SET_BIT(ADC_u8_ADCSRA_REG,6);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 64       	ori	r24, 0x40	; 64
     e7a:	8c 93       	st	X, r24
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <ADC_u8GetDigitalValueAsynch+0x74>


    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
     e7e:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <ADC_u8GetADCRegvalue>:

u8 ADC_u8GetADCRegvalue(u16 * Copy_pu16ADCValue)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <ADC_u8GetADCRegvalue+0x6>
     e98:	0f 92       	push	r0
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9b 83       	std	Y+3, r25	; 0x03
     ea0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_ErrorState = STD_TYPES_OK;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu16ADCValue !=NULL)
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	49 f0       	breq	.+18     	; 0xec0 <ADC_u8GetADCRegvalue+0x2e>
    {
        /*read ADC register*/
        *Copy_pu16ADCValue = ADC_u16_ADC_REG;
     eae:	e4 e2       	ldi	r30, 0x24	; 36
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	ea 81       	ldd	r30, Y+2	; 0x02
     eb8:	fb 81       	ldd	r31, Y+3	; 0x03
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	80 83       	st	Z, r24
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <ADC_u8GetADCRegvalue+0x30>

    }
    else
    {
        Local_ErrorState = STD_TYPES_NOK;
     ec0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_ErrorState;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <__vector_16>:

/*prototype for ADC ISR*/
void __vector_16(void)         __attribute__((signal));
void __vector_16(void)
{
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	4f 93       	push	r20
     ee0:	5f 93       	push	r21
     ee2:	6f 93       	push	r22
     ee4:	7f 93       	push	r23
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	af 93       	push	r26
     eec:	bf 93       	push	r27
     eee:	ef 93       	push	r30
     ef0:	ff 93       	push	r31
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pfNotification != NULL)
     efa:	80 91 d6 00 	lds	r24, 0x00D6
     efe:	90 91 d7 00 	lds	r25, 0x00D7
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	99 f0       	breq	.+38     	; 0xf2c <__vector_16+0x5c>
    {
        /*clear flag*/
        ADC_u8BusyFlag = 0;
     f06:	10 92 d8 00 	sts	0x00D8, r1
        /*clear PIE for ADC*/
        CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f0a:	a6 e2       	ldi	r26, 0x26	; 38
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e6 e2       	ldi	r30, 0x26	; 38
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	87 7f       	andi	r24, 0xF7	; 247
     f16:	8c 93       	st	X, r24
        /*calling notifiction function*/
        ADC_pfNotification(ADC_u16_ADC_REG);
     f18:	20 91 d6 00 	lds	r18, 0x00D6
     f1c:	30 91 d7 00 	lds	r19, 0x00D7
     f20:	e4 e2       	ldi	r30, 0x24	; 36
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	f9 01       	movw	r30, r18
     f2a:	09 95       	icall
    }

     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <DC_Motor_Init>:
#include "DC_interface.h"
#include "DC_Private.h"
#include "DC_Config.h"

void DC_Motor_Init()
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor initially
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	62 e0       	ldi	r22, 0x02	; 2
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <DC_Motor_Rotate_Clockwise>:

// Function to rotate the DC motor clockwise
void DC_Motor_Rotate_Clockwise()
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_DIR1, DIO_u8_HIGH); // Set direction pin 1 high
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_LOW);  // Set direction pin 2 low
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	62 e0       	ldi	r22, 0x02	; 2
     f8a:	41 e0       	ldi	r20, 0x01	; 1
     f8c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <DC_Motor_Rotate_CounterClockwise>:

// Function to rotate the DC motor counter-clockwise
void DC_Motor_Rotate_CounterClockwise()
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);  // Set direction pin 1 low
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_HIGH); // Set direction pin 2 high
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	62 e0       	ldi	r22, 0x02	; 2
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <DC_Motor_Stop>:

// Function to stop the DC motor
void DC_Motor_Stop()
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	62 e0       	ldi	r22, 0x02	; 2
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_privret.h"

void DIO_voidInit(void)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
    DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,
     fe2:	ea e3       	ldi	r30, 0x3A	; 58
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8f e0       	ldi	r24, 0x0F	; 15
     fe8:	80 83       	st	Z, r24
                            DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
                            DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,
                            DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,
     fea:	e7 e3       	ldi	r30, 0x37	; 55
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	80 83       	st	Z, r24
                            DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
                            DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,
                            DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

      DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,
     ff2:	e4 e3       	ldi	r30, 0x34	; 52
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8f e7       	ldi	r24, 0x7F	; 127
     ff8:	80 83       	st	Z, r24
                            DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
                            DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,
                            DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION );

      DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	80 83       	st	Z, r24
    DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION
     ,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION );

     DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	80 83       	st	Z, r24
    DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE
     ,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE );

      DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	10 82       	st	Z, r1
    DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE
     ,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE );

      DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	10 82       	st	Z, r1
    DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE
     ,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE );

      DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	10 82       	st	Z, r1
    DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE
     ,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE );


   
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinID, u8 Copy_u8PinDirection )
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	2e 97       	sbiw	r28, 0x0e	; 14
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	6b 83       	std	Y+3, r22	; 0x03
    103a:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState = STD_TYPES_OK;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8PortId <= DIO_u8_PORTD ) &&  (Copy_u8PortId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	08 f0       	brcs	.+2      	; 0x1048 <DIO_voidSetPinDirection+0x26>
    1046:	0c c1       	rjmp	.+536    	; 0x1260 <DIO_voidSetPinDirection+0x23e>
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	08 f0       	brcs	.+2      	; 0x1050 <DIO_voidSetPinDirection+0x2e>
    104e:	08 c1       	rjmp	.+528    	; 0x1260 <DIO_voidSetPinDirection+0x23e>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	21 f0       	breq	.+8      	; 0x105e <DIO_voidSetPinDirection+0x3c>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	88 23       	and	r24, r24
    105a:	09 f0       	breq	.+2      	; 0x105e <DIO_voidSetPinDirection+0x3c>
    105c:	01 c1       	rjmp	.+514    	; 0x1260 <DIO_voidSetPinDirection+0x23e>
{
   switch (Copy_u8PortId)
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3e 87       	std	Y+14, r19	; 0x0e
    1066:	2d 87       	std	Y+13, r18	; 0x0d
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	9e 85       	ldd	r25, Y+14	; 0x0e
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <DIO_voidSetPinDirection+0x52>
    1072:	4f c0       	rjmp	.+158    	; 0x1112 <DIO_voidSetPinDirection+0xf0>
    1074:	2d 85       	ldd	r18, Y+13	; 0x0d
    1076:	3e 85       	ldd	r19, Y+14	; 0x0e
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <DIO_voidSetPinDirection+0x66>
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	9e 85       	ldd	r25, Y+14	; 0x0e
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	71 f0       	breq	.+28     	; 0x10a2 <DIO_voidSetPinDirection+0x80>
    1086:	ed c0       	rjmp	.+474    	; 0x1262 <DIO_voidSetPinDirection+0x240>
    1088:	2d 85       	ldd	r18, Y+13	; 0x0d
    108a:	3e 85       	ldd	r19, Y+14	; 0x0e
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <DIO_voidSetPinDirection+0x72>
    1092:	77 c0       	rjmp	.+238    	; 0x1182 <DIO_voidSetPinDirection+0x160>
    1094:	8d 85       	ldd	r24, Y+13	; 0x0d
    1096:	9e 85       	ldd	r25, Y+14	; 0x0e
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <DIO_voidSetPinDirection+0x7e>
    109e:	a9 c0       	rjmp	.+338    	; 0x11f2 <DIO_voidSetPinDirection+0x1d0>
    10a0:	e0 c0       	rjmp	.+448    	; 0x1262 <DIO_voidSetPinDirection+0x240>
   {
     case DIO_u8_PORTA:
        switch (Copy_u8PinDirection)
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3c 87       	std	Y+12, r19	; 0x0c
    10aa:	2b 87       	std	Y+11, r18	; 0x0b
    10ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	d1 f0       	breq	.+52     	; 0x10e8 <DIO_voidSetPinDirection+0xc6>
    10b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    10b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    10b8:	21 30       	cpi	r18, 0x01	; 1
    10ba:	31 05       	cpc	r19, r1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <DIO_voidSetPinDirection+0x9e>
    10be:	d1 c0       	rjmp	.+418    	; 0x1262 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
    10c0:	aa e3       	ldi	r26, 0x3A	; 58
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ea e3       	ldi	r30, 0x3A	; 58
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_voidSetPinDirection+0xbc>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_voidSetPinDirection+0xb8>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	bd c0       	rjmp	.+378    	; 0x1262 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
    10e8:	aa e3       	ldi	r26, 0x3A	; 58
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ea e3       	ldi	r30, 0x3A	; 58
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_voidSetPinDirection+0xe4>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_voidSetPinDirection+0xe0>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	a8 c0       	rjmp	.+336    	; 0x1262 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinDirection)
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3a 87       	std	Y+10, r19	; 0x0a
    111a:	29 87       	std	Y+9, r18	; 0x09
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	d1 f0       	breq	.+52     	; 0x1158 <DIO_voidSetPinDirection+0x136>
    1124:	29 85       	ldd	r18, Y+9	; 0x09
    1126:	3a 85       	ldd	r19, Y+10	; 0x0a
    1128:	21 30       	cpi	r18, 0x01	; 1
    112a:	31 05       	cpc	r19, r1
    112c:	09 f0       	breq	.+2      	; 0x1130 <DIO_voidSetPinDirection+0x10e>
    112e:	99 c0       	rjmp	.+306    	; 0x1262 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
    1130:	a7 e3       	ldi	r26, 0x37	; 55
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e7 e3       	ldi	r30, 0x37	; 55
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_voidSetPinDirection+0x12c>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_voidSetPinDirection+0x128>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	85 c0       	rjmp	.+266    	; 0x1262 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
    1158:	a7 e3       	ldi	r26, 0x37	; 55
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_voidSetPinDirection+0x154>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_voidSetPinDirection+0x150>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	70 c0       	rjmp	.+224    	; 0x1262 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTC:
        switch (Copy_u8PinDirection)
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	38 87       	std	Y+8, r19	; 0x08
    118a:	2f 83       	std	Y+7, r18	; 0x07
    118c:	8f 81       	ldd	r24, Y+7	; 0x07
    118e:	98 85       	ldd	r25, Y+8	; 0x08
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	d1 f0       	breq	.+52     	; 0x11c8 <DIO_voidSetPinDirection+0x1a6>
    1194:	2f 81       	ldd	r18, Y+7	; 0x07
    1196:	38 85       	ldd	r19, Y+8	; 0x08
    1198:	21 30       	cpi	r18, 0x01	; 1
    119a:	31 05       	cpc	r19, r1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <DIO_voidSetPinDirection+0x17e>
    119e:	61 c0       	rjmp	.+194    	; 0x1262 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
    11a0:	a4 e3       	ldi	r26, 0x34	; 52
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e4 e3       	ldi	r30, 0x34	; 52
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_voidSetPinDirection+0x19c>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_voidSetPinDirection+0x198>
    11c2:	84 2b       	or	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	4d c0       	rjmp	.+154    	; 0x1262 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
    11c8:	a4 e3       	ldi	r26, 0x34	; 52
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e4 e3       	ldi	r30, 0x34	; 52
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_voidSetPinDirection+0x1c4>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_voidSetPinDirection+0x1c0>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	38 c0       	rjmp	.+112    	; 0x1262 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTD:
        switch (Copy_u8PinDirection)
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3e 83       	std	Y+6, r19	; 0x06
    11fa:	2d 83       	std	Y+5, r18	; 0x05
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	c9 f0       	breq	.+50     	; 0x1236 <DIO_voidSetPinDirection+0x214>
    1204:	2d 81       	ldd	r18, Y+5	; 0x05
    1206:	3e 81       	ldd	r19, Y+6	; 0x06
    1208:	21 30       	cpi	r18, 0x01	; 1
    120a:	31 05       	cpc	r19, r1
    120c:	51 f5       	brne	.+84     	; 0x1262 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
    120e:	a1 e3       	ldi	r26, 0x31	; 49
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e1 e3       	ldi	r30, 0x31	; 49
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_voidSetPinDirection+0x20a>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_voidSetPinDirection+0x206>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
    1236:	a1 e3       	ldi	r26, 0x31	; 49
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e1 e3       	ldi	r30, 0x31	; 49
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_voidSetPinDirection+0x232>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_voidSetPinDirection+0x22e>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <DIO_voidSetPinDirection+0x240>

   }
}
else
{
    Local_u8ErrorState = STD_TYPES_NOK;
    1260:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8ErrorState;
    1262:	89 81       	ldd	r24, Y+1	; 0x01

}
    1264:	2e 96       	adiw	r28, 0x0e	; 14
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue     (u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	2e 97       	sbiw	r28, 0x0e	; 14
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	6b 83       	std	Y+3, r22	; 0x03
    128e:	4c 83       	std	Y+4, r20	; 0x04
    u8 local_u8ErrorState = STD_TYPES_OK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_PinID <= DIO_u8_PIN7)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	08 f0       	brcs	.+2      	; 0x129c <DIO_voidSetPinValue+0x26>
    129a:	08 c1       	rjmp	.+528    	; 0x14ac <DIO_voidSetPinValue+0x236>
    {
        
    switch (Copy_u8PortId)
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3e 87       	std	Y+14, r19	; 0x0e
    12a4:	2d 87       	std	Y+13, r18	; 0x0d
    12a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <DIO_voidSetPinValue+0x3c>
    12b0:	50 c0       	rjmp	.+160    	; 0x1352 <DIO_voidSetPinValue+0xdc>
    12b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    12b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <DIO_voidSetPinValue+0x50>
    12bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12be:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <DIO_voidSetPinValue+0x6a>
    12c4:	f1 c0       	rjmp	.+482    	; 0x14a8 <DIO_voidSetPinValue+0x232>
    12c6:	2d 85       	ldd	r18, Y+13	; 0x0d
    12c8:	3e 85       	ldd	r19, Y+14	; 0x0e
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <DIO_voidSetPinValue+0x5c>
    12d0:	79 c0       	rjmp	.+242    	; 0x13c4 <DIO_voidSetPinValue+0x14e>
    12d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <DIO_voidSetPinValue+0x68>
    12dc:	ac c0       	rjmp	.+344    	; 0x1436 <DIO_voidSetPinValue+0x1c0>
    12de:	e4 c0       	rjmp	.+456    	; 0x14a8 <DIO_voidSetPinValue+0x232>
    {
    case DIO_u8_PORTA:
        switch (Copy_u8PinValue)
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	3c 87       	std	Y+12, r19	; 0x0c
    12e8:	2b 87       	std	Y+11, r18	; 0x0b
    12ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	c9 f0       	breq	.+50     	; 0x1324 <DIO_voidSetPinValue+0xae>
    12f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    12f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    12f6:	21 30       	cpi	r18, 0x01	; 1
    12f8:	31 05       	cpc	r19, r1
    12fa:	49 f5       	brne	.+82     	; 0x134e <DIO_voidSetPinValue+0xd8>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    12fc:	ab e3       	ldi	r26, 0x3B	; 59
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	eb e3       	ldi	r30, 0x3B	; 59
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_voidSetPinValue+0xa4>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_voidSetPinValue+0xa0>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	c5 c0       	rjmp	.+394    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    1324:	ab e3       	ldi	r26, 0x3B	; 59
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_voidSetPinValue+0xcc>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_voidSetPinValue+0xc8>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	b0 c0       	rjmp	.+352    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	ae c0       	rjmp	.+348    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinValue)
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3a 87       	std	Y+10, r19	; 0x0a
    135a:	29 87       	std	Y+9, r18	; 0x09
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	c9 f0       	breq	.+50     	; 0x1396 <DIO_voidSetPinValue+0x120>
    1364:	29 85       	ldd	r18, Y+9	; 0x09
    1366:	3a 85       	ldd	r19, Y+10	; 0x0a
    1368:	21 30       	cpi	r18, 0x01	; 1
    136a:	31 05       	cpc	r19, r1
    136c:	49 f5       	brne	.+82     	; 0x13c0 <DIO_voidSetPinValue+0x14a>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    136e:	a8 e3       	ldi	r26, 0x38	; 56
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e8 e3       	ldi	r30, 0x38	; 56
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_voidSetPinValue+0x116>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_voidSetPinValue+0x112>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	8c c0       	rjmp	.+280    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    1396:	a8 e3       	ldi	r26, 0x38	; 56
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_voidSetPinValue+0x13e>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_voidSetPinValue+0x13a>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	77 c0       	rjmp	.+238    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    13c0:	19 82       	std	Y+1, r1	; 0x01
    13c2:	75 c0       	rjmp	.+234    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTC:
         switch (Copy_u8PinValue)
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	38 87       	std	Y+8, r19	; 0x08
    13cc:	2f 83       	std	Y+7, r18	; 0x07
    13ce:	8f 81       	ldd	r24, Y+7	; 0x07
    13d0:	98 85       	ldd	r25, Y+8	; 0x08
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	c9 f0       	breq	.+50     	; 0x1408 <DIO_voidSetPinValue+0x192>
    13d6:	2f 81       	ldd	r18, Y+7	; 0x07
    13d8:	38 85       	ldd	r19, Y+8	; 0x08
    13da:	21 30       	cpi	r18, 0x01	; 1
    13dc:	31 05       	cpc	r19, r1
    13de:	49 f5       	brne	.+82     	; 0x1432 <DIO_voidSetPinValue+0x1bc>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    13e0:	a5 e3       	ldi	r26, 0x35	; 53
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e3       	ldi	r30, 0x35	; 53
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_voidSetPinValue+0x188>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_voidSetPinValue+0x184>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	53 c0       	rjmp	.+166    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    1408:	a5 e3       	ldi	r26, 0x35	; 53
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e3       	ldi	r30, 0x35	; 53
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_voidSetPinValue+0x1b0>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_voidSetPinValue+0x1ac>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	3e c0       	rjmp	.+124    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	3c c0       	rjmp	.+120    	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTD:
         switch (Copy_u8PinValue)
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3e 83       	std	Y+6, r19	; 0x06
    143e:	2d 83       	std	Y+5, r18	; 0x05
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	c9 f0       	breq	.+50     	; 0x147a <DIO_voidSetPinValue+0x204>
    1448:	2d 81       	ldd	r18, Y+5	; 0x05
    144a:	3e 81       	ldd	r19, Y+6	; 0x06
    144c:	21 30       	cpi	r18, 0x01	; 1
    144e:	31 05       	cpc	r19, r1
    1450:	49 f5       	brne	.+82     	; 0x14a4 <DIO_voidSetPinValue+0x22e>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    1452:	a2 e3       	ldi	r26, 0x32	; 50
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e2 e3       	ldi	r30, 0x32	; 50
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_voidSetPinValue+0x1fa>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_voidSetPinValue+0x1f6>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	1a c0       	rjmp	.+52     	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    147a:	a2 e3       	ldi	r26, 0x32	; 50
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e2 e3       	ldi	r30, 0x32	; 50
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_voidSetPinValue+0x222>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_voidSetPinValue+0x21e>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    default: local_u8ErrorState = STD_TYPES_NOK;
    14a8:	19 82       	std	Y+1, r1	; 0x01
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <DIO_voidSetPinValue+0x238>
        
    }
    }
    else{
        local_u8ErrorState = STD_TYPES_NOK;
    14ac:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	2e 96       	adiw	r28, 0x0e	; 14
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_PinID, u8  *Copy_pu8PinValue)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	28 97       	sbiw	r28, 0x08	; 8
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	6c 83       	std	Y+4, r22	; 0x04
    14da:	5e 83       	std	Y+6, r21	; 0x06
    14dc:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ErrorState = STD_TYPES_OK;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue;
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL))
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <DIO_u8GetPinValue+0x28>
    14e8:	9f c0       	rjmp	.+318    	; 0x1628 <DIO_u8GetPinValue+0x166>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <DIO_u8GetPinValue+0x30>
    14f0:	9b c0       	rjmp	.+310    	; 0x1628 <DIO_u8GetPinValue+0x166>
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	09 f4       	brne	.+2      	; 0x14fc <DIO_u8GetPinValue+0x3a>
    14fa:	96 c0       	rjmp	.+300    	; 0x1628 <DIO_u8GetPinValue+0x166>
    {
       switch (Copy_u8PortId)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	38 87       	std	Y+8, r19	; 0x08
    1504:	2f 83       	std	Y+7, r18	; 0x07
    1506:	4f 81       	ldd	r20, Y+7	; 0x07
    1508:	58 85       	ldd	r21, Y+8	; 0x08
    150a:	41 30       	cpi	r20, 0x01	; 1
    150c:	51 05       	cpc	r21, r1
    150e:	a9 f1       	breq	.+106    	; 0x157a <DIO_u8GetPinValue+0xb8>
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	91 05       	cpc	r25, r1
    1518:	34 f4       	brge	.+12     	; 0x1526 <DIO_u8GetPinValue+0x64>
    151a:	2f 81       	ldd	r18, Y+7	; 0x07
    151c:	38 85       	ldd	r19, Y+8	; 0x08
    151e:	21 15       	cp	r18, r1
    1520:	31 05       	cpc	r19, r1
    1522:	71 f0       	breq	.+28     	; 0x1540 <DIO_u8GetPinValue+0x7e>
    1524:	82 c0       	rjmp	.+260    	; 0x162a <DIO_u8GetPinValue+0x168>
    1526:	4f 81       	ldd	r20, Y+7	; 0x07
    1528:	58 85       	ldd	r21, Y+8	; 0x08
    152a:	42 30       	cpi	r20, 0x02	; 2
    152c:	51 05       	cpc	r21, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_u8GetPinValue+0x70>
    1530:	41 c0       	rjmp	.+130    	; 0x15b4 <DIO_u8GetPinValue+0xf2>
    1532:	8f 81       	ldd	r24, Y+7	; 0x07
    1534:	98 85       	ldd	r25, Y+8	; 0x08
    1536:	83 30       	cpi	r24, 0x03	; 3
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <DIO_u8GetPinValue+0x7c>
    153c:	58 c0       	rjmp	.+176    	; 0x15ee <DIO_u8GetPinValue+0x12c>
    153e:	75 c0       	rjmp	.+234    	; 0x162a <DIO_u8GetPinValue+0x168>
       {
       case DIO_u8_PORTA:
        Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_PinID);
    1540:	e9 e3       	ldi	r30, 0x39	; 57
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_u8GetPinValue+0x96>
    1554:	55 95       	asr	r21
    1556:	47 95       	ror	r20
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_u8GetPinValue+0x92>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	88 23       	and	r24, r24
    1566:	21 f4       	brne	.+8      	; 0x1570 <DIO_u8GetPinValue+0xae>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    1568:	ed 81       	ldd	r30, Y+5	; 0x05
    156a:	fe 81       	ldd	r31, Y+6	; 0x06
    156c:	10 82       	st	Z, r1
    156e:	5d c0       	rjmp	.+186    	; 0x162a <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    1570:	ed 81       	ldd	r30, Y+5	; 0x05
    1572:	fe 81       	ldd	r31, Y+6	; 0x06
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 83       	st	Z, r24
    1578:	58 c0       	rjmp	.+176    	; 0x162a <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTB:
        Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_PinID);
    157a:	e6 e3       	ldi	r30, 0x36	; 54
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a9 01       	movw	r20, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <DIO_u8GetPinValue+0xd0>
    158e:	55 95       	asr	r21
    1590:	47 95       	ror	r20
    1592:	8a 95       	dec	r24
    1594:	e2 f7       	brpl	.-8      	; 0x158e <DIO_u8GetPinValue+0xcc>
    1596:	ca 01       	movw	r24, r20
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	88 23       	and	r24, r24
    15a0:	21 f4       	brne	.+8      	; 0x15aa <DIO_u8GetPinValue+0xe8>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    15a2:	ed 81       	ldd	r30, Y+5	; 0x05
    15a4:	fe 81       	ldd	r31, Y+6	; 0x06
    15a6:	10 82       	st	Z, r1
    15a8:	40 c0       	rjmp	.+128    	; 0x162a <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    15aa:	ed 81       	ldd	r30, Y+5	; 0x05
    15ac:	fe 81       	ldd	r31, Y+6	; 0x06
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	80 83       	st	Z, r24
    15b2:	3b c0       	rjmp	.+118    	; 0x162a <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTC:
        Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_PinID);
    15b4:	e3 e3       	ldi	r30, 0x33	; 51
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_u8GetPinValue+0x10a>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_u8GetPinValue+0x106>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	88 23       	and	r24, r24
    15da:	21 f4       	brne	.+8      	; 0x15e4 <DIO_u8GetPinValue+0x122>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    15dc:	ed 81       	ldd	r30, Y+5	; 0x05
    15de:	fe 81       	ldd	r31, Y+6	; 0x06
    15e0:	10 82       	st	Z, r1
    15e2:	23 c0       	rjmp	.+70     	; 0x162a <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    15e4:	ed 81       	ldd	r30, Y+5	; 0x05
    15e6:	fe 81       	ldd	r31, Y+6	; 0x06
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	80 83       	st	Z, r24
    15ec:	1e c0       	rjmp	.+60     	; 0x162a <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTD:
        Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_PinID);
    15ee:	e0 e3       	ldi	r30, 0x30	; 48
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_u8GetPinValue+0x144>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_u8GetPinValue+0x140>
    160a:	ca 01       	movw	r24, r20
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	88 23       	and	r24, r24
    1614:	21 f4       	brne	.+8      	; 0x161e <DIO_u8GetPinValue+0x15c>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    1616:	ed 81       	ldd	r30, Y+5	; 0x05
    1618:	fe 81       	ldd	r31, Y+6	; 0x06
    161a:	10 82       	st	Z, r1
    161c:	06 c0       	rjmp	.+12     	; 0x162a <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    161e:	ed 81       	ldd	r30, Y+5	; 0x05
    1620:	fe 81       	ldd	r31, Y+6	; 0x06
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 83       	st	Z, r24
    1626:	01 c0       	rjmp	.+2      	; 0x162a <DIO_u8GetPinValue+0x168>
       
       }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1628:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ErrorState;
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
} 
    162c:	28 96       	adiw	r28, 0x08	; 8
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortID, u8 Copy_u8PortDirection)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	2d 97       	sbiw	r28, 0x0d	; 13
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	21 f0       	breq	.+8      	; 0x1668 <DIO_u8SetPortDirection+0x2a>
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	88 23       	and	r24, r24
    1664:	09 f0       	breq	.+2      	; 0x1668 <DIO_u8SetPortDirection+0x2a>
    1666:	7f c0       	rjmp	.+254    	; 0x1766 <DIO_u8SetPortDirection+0x128>
    {
        switch (Copy_u8PortID)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 87       	std	Y+13, r19	; 0x0d
    1670:	2c 87       	std	Y+12, r18	; 0x0c
    1672:	8c 85       	ldd	r24, Y+12	; 0x0c
    1674:	9d 85       	ldd	r25, Y+13	; 0x0d
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	71 f1       	breq	.+92     	; 0x16d8 <DIO_u8SetPortDirection+0x9a>
    167c:	2c 85       	ldd	r18, Y+12	; 0x0c
    167e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <DIO_u8SetPortDirection+0x52>
    1686:	8c 85       	ldd	r24, Y+12	; 0x0c
    1688:	9d 85       	ldd	r25, Y+13	; 0x0d
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	69 f0       	breq	.+26     	; 0x16a8 <DIO_u8SetPortDirection+0x6a>
    168e:	69 c0       	rjmp	.+210    	; 0x1762 <DIO_u8SetPortDirection+0x124>
    1690:	2c 85       	ldd	r18, Y+12	; 0x0c
    1692:	3d 85       	ldd	r19, Y+13	; 0x0d
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	b1 f1       	breq	.+108    	; 0x1706 <DIO_u8SetPortDirection+0xc8>
    169a:	8c 85       	ldd	r24, Y+12	; 0x0c
    169c:	9d 85       	ldd	r25, Y+13	; 0x0d
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <DIO_u8SetPortDirection+0x68>
    16a4:	47 c0       	rjmp	.+142    	; 0x1734 <DIO_u8SetPortDirection+0xf6>
    16a6:	5d c0       	rjmp	.+186    	; 0x1762 <DIO_u8SetPortDirection+0x124>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PortDirection)
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3b 87       	std	Y+11, r19	; 0x0b
    16b0:	2a 87       	std	Y+10, r18	; 0x0a
    16b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	59 f0       	breq	.+22     	; 0x16d0 <DIO_u8SetPortDirection+0x92>
    16ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    16bc:	3b 85       	ldd	r19, Y+11	; 0x0b
    16be:	21 30       	cpi	r18, 0x01	; 1
    16c0:	31 05       	cpc	r19, r1
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <DIO_u8SetPortDirection+0x88>
    16c4:	51 c0       	rjmp	.+162    	; 0x1768 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRA_REG = 0xff;
    16c6:	ea e3       	ldi	r30, 0x3A	; 58
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	80 83       	st	Z, r24
    16ce:	4c c0       	rjmp	.+152    	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRA_REG = 0x00;
    16d0:	ea e3       	ldi	r30, 0x3A	; 58
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	10 82       	st	Z, r1
    16d6:	48 c0       	rjmp	.+144    	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTB:
            switch (Copy_u8PortDirection)
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	39 87       	std	Y+9, r19	; 0x09
    16e0:	28 87       	std	Y+8, r18	; 0x08
    16e2:	88 85       	ldd	r24, Y+8	; 0x08
    16e4:	99 85       	ldd	r25, Y+9	; 0x09
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	51 f0       	breq	.+20     	; 0x16fe <DIO_u8SetPortDirection+0xc0>
    16ea:	28 85       	ldd	r18, Y+8	; 0x08
    16ec:	39 85       	ldd	r19, Y+9	; 0x09
    16ee:	21 30       	cpi	r18, 0x01	; 1
    16f0:	31 05       	cpc	r19, r1
    16f2:	d1 f5       	brne	.+116    	; 0x1768 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRB_REG = 0xff;
    16f4:	e7 e3       	ldi	r30, 0x37	; 55
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	80 83       	st	Z, r24
    16fc:	35 c0       	rjmp	.+106    	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRB_REG = 0x00;
    16fe:	e7 e3       	ldi	r30, 0x37	; 55
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	10 82       	st	Z, r1
    1704:	31 c0       	rjmp	.+98     	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTC:
            switch (Copy_u8PortDirection)
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3f 83       	std	Y+7, r19	; 0x07
    170e:	2e 83       	std	Y+6, r18	; 0x06
    1710:	8e 81       	ldd	r24, Y+6	; 0x06
    1712:	9f 81       	ldd	r25, Y+7	; 0x07
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	51 f0       	breq	.+20     	; 0x172c <DIO_u8SetPortDirection+0xee>
    1718:	2e 81       	ldd	r18, Y+6	; 0x06
    171a:	3f 81       	ldd	r19, Y+7	; 0x07
    171c:	21 30       	cpi	r18, 0x01	; 1
    171e:	31 05       	cpc	r19, r1
    1720:	19 f5       	brne	.+70     	; 0x1768 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRC_REG = 0xff;
    1722:	e4 e3       	ldi	r30, 0x34	; 52
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	80 83       	st	Z, r24
    172a:	1e c0       	rjmp	.+60     	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRC_REG = 0x00;
    172c:	e4 e3       	ldi	r30, 0x34	; 52
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	10 82       	st	Z, r1
    1732:	1a c0       	rjmp	.+52     	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTD:
            switch (Copy_u8PortDirection)
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3d 83       	std	Y+5, r19	; 0x05
    173c:	2c 83       	std	Y+4, r18	; 0x04
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	51 f0       	breq	.+20     	; 0x175a <DIO_u8SetPortDirection+0x11c>
    1746:	2c 81       	ldd	r18, Y+4	; 0x04
    1748:	3d 81       	ldd	r19, Y+5	; 0x05
    174a:	21 30       	cpi	r18, 0x01	; 1
    174c:	31 05       	cpc	r19, r1
    174e:	61 f4       	brne	.+24     	; 0x1768 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRD_REG = 0xff;
    1750:	e1 e3       	ldi	r30, 0x31	; 49
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8f ef       	ldi	r24, 0xFF	; 255
    1756:	80 83       	st	Z, r24
    1758:	07 c0       	rjmp	.+14     	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRD_REG = 0x00;
    175a:	e1 e3       	ldi	r30, 0x31	; 49
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	10 82       	st	Z, r1
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
            default: Local_u8ErrorState =STD_TYPES_NOK;
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <DIO_u8SetPortDirection+0x12a>
      
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1766:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	2d 96       	adiw	r28, 0x0d	; 13
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue      (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_u8SetPortValue+0x6>
    1782:	00 d0       	rcall	.+0      	; 0x1784 <DIO_u8SetPortValue+0x8>
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortID)
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3d 83       	std	Y+5, r19	; 0x05
    179a:	2c 83       	std	Y+4, r18	; 0x04
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 05       	cpc	r25, r1
    17a4:	d1 f0       	breq	.+52     	; 0x17da <DIO_u8SetPortValue+0x5e>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	2c f4       	brge	.+10     	; 0x17ba <DIO_u8SetPortValue+0x3e>
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	61 f0       	breq	.+24     	; 0x17d0 <DIO_u8SetPortValue+0x54>
    17b8:	1f c0       	rjmp	.+62     	; 0x17f8 <DIO_u8SetPortValue+0x7c>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	81 f0       	breq	.+32     	; 0x17e4 <DIO_u8SetPortValue+0x68>
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	91 05       	cpc	r25, r1
    17cc:	81 f0       	breq	.+32     	; 0x17ee <DIO_u8SetPortValue+0x72>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <DIO_u8SetPortValue+0x7c>
    {
    case DIO_u8_PORTA:
        DIO_u8_PORTA_REG =Copy_u8PortValue;
    17d0:	eb e3       	ldi	r30, 0x3B	; 59
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	80 83       	st	Z, r24
    17d8:	10 c0       	rjmp	.+32     	; 0x17fa <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTB:
        DIO_u8_PORTB_REG =Copy_u8PortValue;
    17da:	e8 e3       	ldi	r30, 0x38	; 56
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	80 83       	st	Z, r24
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTC:
        DIO_u8_PORTC_REG =Copy_u8PortValue;
    17e4:	e5 e3       	ldi	r30, 0x35	; 53
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	80 83       	st	Z, r24
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTD:
        DIO_u8_PORTD_REG =Copy_u8PortValue;
    17ee:	e2 e3       	ldi	r30, 0x32	; 50
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	80 83       	st	Z, r24
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <DIO_u8SetPortValue+0x7e>
        break;
    
    default: Local_u8ErrorState =STD_TYPES_NOK;
    17f8:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8ErrorState;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue      (u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <DIO_u8GetPortValue+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <DIO_u8GetPortValue+0x8>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DIO_u8GetPortValue+0xa>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	8a 83       	std	Y+2, r24	; 0x02
    181c:	7c 83       	std	Y+4, r23	; 0x04
    181e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8ReturnedPortValue != NULL)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	e9 f1       	breq	.+122    	; 0x18a6 <DIO_u8GetPortValue+0x9a>
    {
        switch (Copy_u8PortId)
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3e 83       	std	Y+6, r19	; 0x06
    1834:	2d 83       	std	Y+5, r18	; 0x05
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	e1 f0       	breq	.+56     	; 0x1878 <DIO_u8GetPortValue+0x6c>
    1840:	2d 81       	ldd	r18, Y+5	; 0x05
    1842:	3e 81       	ldd	r19, Y+6	; 0x06
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <DIO_u8GetPortValue+0x48>
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	61 f0       	breq	.+24     	; 0x186a <DIO_u8GetPortValue+0x5e>
    1852:	27 c0       	rjmp	.+78     	; 0x18a2 <DIO_u8GetPortValue+0x96>
    1854:	2d 81       	ldd	r18, Y+5	; 0x05
    1856:	3e 81       	ldd	r19, Y+6	; 0x06
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	a1 f0       	breq	.+40     	; 0x1886 <DIO_u8GetPortValue+0x7a>
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	b1 f0       	breq	.+44     	; 0x1894 <DIO_u8GetPortValue+0x88>
    1868:	1c c0       	rjmp	.+56     	; 0x18a2 <DIO_u8GetPortValue+0x96>
        {
        case DIO_u8_PORTA:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINA_REG;
    186a:	e9 e3       	ldi	r30, 0x39	; 57
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	eb 81       	ldd	r30, Y+3	; 0x03
    1872:	fc 81       	ldd	r31, Y+4	; 0x04
    1874:	80 83       	st	Z, r24
    1876:	18 c0       	rjmp	.+48     	; 0x18a8 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTB:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINB_REG;
    1878:	e6 e3       	ldi	r30, 0x36	; 54
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	eb 81       	ldd	r30, Y+3	; 0x03
    1880:	fc 81       	ldd	r31, Y+4	; 0x04
    1882:	80 83       	st	Z, r24
    1884:	11 c0       	rjmp	.+34     	; 0x18a8 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTC:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINC_REG;
    1886:	e3 e3       	ldi	r30, 0x33	; 51
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	eb 81       	ldd	r30, Y+3	; 0x03
    188e:	fc 81       	ldd	r31, Y+4	; 0x04
    1890:	80 83       	st	Z, r24
    1892:	0a c0       	rjmp	.+20     	; 0x18a8 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTD:
           *Copy_pu8ReturnedPortValue =DIO_u8_PIND_REG;
    1894:	e0 e3       	ldi	r30, 0x30	; 48
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	eb 81       	ldd	r30, Y+3	; 0x03
    189c:	fc 81       	ldd	r31, Y+4	; 0x04
    189e:	80 83       	st	Z, r24
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <DIO_u8GetPortValue+0x9c>
            break;
        
        default: Local_u8ErrorState =STD_TYPES_NOK;
    18a2:	19 82       	std	Y+1, r1	; 0x01
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <DIO_u8GetPortValue+0x9c>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    18a6:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18aa:	26 96       	adiw	r28, 0x06	; 6
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <EXTI_EXTIEnable>:

/* global pointer to a  function */
static void (*EXTI_ApfExti[3]) (void) = {NULL,NULL,NULL};

u8 EXTI_EXTIEnable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	2b 97       	sbiw	r28, 0x0b	; 11
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3b 87       	std	Y+11, r19	; 0x0b
    18e0:	2a 87       	std	Y+10, r18	; 0x0a
    18e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <EXTI_EXTIEnable+0x32>
    18ec:	85 c0       	rjmp	.+266    	; 0x19f8 <EXTI_EXTIEnable+0x13c>
    18ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    18f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	31 05       	cpc	r19, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <EXTI_EXTIEnable+0x3e>
    18f8:	f9 c0       	rjmp	.+498    	; 0x1aec <EXTI_EXTIEnable+0x230>
    18fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    18fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	09 f0       	breq	.+2      	; 0x1904 <EXTI_EXTIEnable+0x48>
    1902:	23 c1       	rjmp	.+582    	; 0x1b4a <EXTI_EXTIEnable+0x28e>
    {
    case EXTI_u8_INT0:
       switch (Copy_u8EdgeIndex)
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	39 87       	std	Y+9, r19	; 0x09
    190c:	28 87       	std	Y+8, r18	; 0x08
    190e:	88 85       	ldd	r24, Y+8	; 0x08
    1910:	99 85       	ldd	r25, Y+9	; 0x09
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	91 05       	cpc	r25, r1
    1916:	61 f1       	breq	.+88     	; 0x1970 <EXTI_EXTIEnable+0xb4>
    1918:	28 85       	ldd	r18, Y+8	; 0x08
    191a:	39 85       	ldd	r19, Y+9	; 0x09
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	2c f4       	brge	.+10     	; 0x192c <EXTI_EXTIEnable+0x70>
    1922:	88 85       	ldd	r24, Y+8	; 0x08
    1924:	99 85       	ldd	r25, Y+9	; 0x09
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f0       	breq	.+26     	; 0x1944 <EXTI_EXTIEnable+0x88>
    192a:	64 c0       	rjmp	.+200    	; 0x19f4 <EXTI_EXTIEnable+0x138>
    192c:	28 85       	ldd	r18, Y+8	; 0x08
    192e:	39 85       	ldd	r19, Y+9	; 0x09
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	99 f1       	breq	.+102    	; 0x199c <EXTI_EXTIEnable+0xe0>
    1936:	88 85       	ldd	r24, Y+8	; 0x08
    1938:	99 85       	ldd	r25, Y+9	; 0x09
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	91 05       	cpc	r25, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <EXTI_EXTIEnable+0x86>
    1940:	43 c0       	rjmp	.+134    	; 0x19c8 <EXTI_EXTIEnable+0x10c>
    1942:	58 c0       	rjmp	.+176    	; 0x19f4 <EXTI_EXTIEnable+0x138>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,1);
    1944:	a5 e5       	ldi	r26, 0x55	; 85
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e5       	ldi	r30, 0x55	; 85
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	82 60       	ori	r24, 0x02	; 2
    1950:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,0);
    1952:	a5 e5       	ldi	r26, 0x55	; 85
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e5 e5       	ldi	r30, 0x55	; 85
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	81 60       	ori	r24, 0x01	; 1
    195e:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    1960:	ab e5       	ldi	r26, 0x5B	; 91
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	eb e5       	ldi	r30, 0x5B	; 91
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 64       	ori	r24, 0x40	; 64
    196c:	8c 93       	st	X, r24
    196e:	ee c0       	rjmp	.+476    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,1);
    1970:	a5 e5       	ldi	r26, 0x55	; 85
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e5 e5       	ldi	r30, 0x55	; 85
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	82 60       	ori	r24, 0x02	; 2
    197c:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,0);
    197e:	a5 e5       	ldi	r26, 0x55	; 85
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e5 e5       	ldi	r30, 0x55	; 85
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8e 7f       	andi	r24, 0xFE	; 254
    198a:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    198c:	ab e5       	ldi	r26, 0x5B	; 91
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	eb e5       	ldi	r30, 0x5B	; 91
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	80 64       	ori	r24, 0x40	; 64
    1998:	8c 93       	st	X, r24
    199a:	d8 c0       	rjmp	.+432    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_ANY_LOGICAL_CHANGE:
        CLR_BIT(EXTI_U8_MCUCR,1);
    199c:	a5 e5       	ldi	r26, 0x55	; 85
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e5 e5       	ldi	r30, 0x55	; 85
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8d 7f       	andi	r24, 0xFD	; 253
    19a8:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,0);
    19aa:	a5 e5       	ldi	r26, 0x55	; 85
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e5 e5       	ldi	r30, 0x55	; 85
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	81 60       	ori	r24, 0x01	; 1
    19b6:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    19b8:	ab e5       	ldi	r26, 0x5B	; 91
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	eb e5       	ldi	r30, 0x5B	; 91
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	80 64       	ori	r24, 0x40	; 64
    19c4:	8c 93       	st	X, r24
    19c6:	c2 c0       	rjmp	.+388    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_LOW_LEVEL:
        CLR_BIT(EXTI_U8_MCUCR,1);
    19c8:	a5 e5       	ldi	r26, 0x55	; 85
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e5       	ldi	r30, 0x55	; 85
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8d 7f       	andi	r24, 0xFD	; 253
    19d4:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,0);
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8e 7f       	andi	r24, 0xFE	; 254
    19e2:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    19e4:	ab e5       	ldi	r26, 0x5B	; 91
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	eb e5       	ldi	r30, 0x5B	; 91
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 64       	ori	r24, 0x40	; 64
    19f0:	8c 93       	st	X, r24
    19f2:	ac c0       	rjmp	.+344    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    19f4:	19 82       	std	Y+1, r1	; 0x01
    19f6:	aa c0       	rjmp	.+340    	; 0x1b4c <EXTI_EXTIEnable+0x290>
       }
        break;

        case EXTI_u8_INT1:
       switch (Copy_u8EdgeIndex)
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3f 83       	std	Y+7, r19	; 0x07
    1a00:	2e 83       	std	Y+6, r18	; 0x06
    1a02:	8e 81       	ldd	r24, Y+6	; 0x06
    1a04:	9f 81       	ldd	r25, Y+7	; 0x07
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	61 f1       	breq	.+88     	; 0x1a64 <EXTI_EXTIEnable+0x1a8>
    1a0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <EXTI_EXTIEnable+0x164>
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f0       	breq	.+26     	; 0x1a38 <EXTI_EXTIEnable+0x17c>
    1a1e:	64 c0       	rjmp	.+200    	; 0x1ae8 <EXTI_EXTIEnable+0x22c>
    1a20:	2e 81       	ldd	r18, Y+6	; 0x06
    1a22:	3f 81       	ldd	r19, Y+7	; 0x07
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	99 f1       	breq	.+102    	; 0x1a90 <EXTI_EXTIEnable+0x1d4>
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	91 05       	cpc	r25, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <EXTI_EXTIEnable+0x17a>
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <EXTI_EXTIEnable+0x200>
    1a36:	58 c0       	rjmp	.+176    	; 0x1ae8 <EXTI_EXTIEnable+0x22c>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,3);
    1a38:	a5 e5       	ldi	r26, 0x55	; 85
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e5 e5       	ldi	r30, 0x55	; 85
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	88 60       	ori	r24, 0x08	; 8
    1a44:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,2);
    1a46:	a5 e5       	ldi	r26, 0x55	; 85
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e5 e5       	ldi	r30, 0x55	; 85
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	84 60       	ori	r24, 0x04	; 4
    1a52:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1a54:	ab e5       	ldi	r26, 0x5B	; 91
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	eb e5       	ldi	r30, 0x5B	; 91
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	80 68       	ori	r24, 0x80	; 128
    1a60:	8c 93       	st	X, r24
    1a62:	74 c0       	rjmp	.+232    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,3);
    1a64:	a5 e5       	ldi	r26, 0x55	; 85
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e5 e5       	ldi	r30, 0x55	; 85
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 60       	ori	r24, 0x08	; 8
    1a70:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,2);
    1a72:	a5 e5       	ldi	r26, 0x55	; 85
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e5       	ldi	r30, 0x55	; 85
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8b 7f       	andi	r24, 0xFB	; 251
    1a7e:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1a80:	ab e5       	ldi	r26, 0x5B	; 91
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	eb e5       	ldi	r30, 0x5B	; 91
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 68       	ori	r24, 0x80	; 128
    1a8c:	8c 93       	st	X, r24
    1a8e:	5e c0       	rjmp	.+188    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_ANY_LOGICAL_CHANGE:
        CLR_BIT(EXTI_U8_MCUCR,3);
    1a90:	a5 e5       	ldi	r26, 0x55	; 85
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e5 e5       	ldi	r30, 0x55	; 85
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	87 7f       	andi	r24, 0xF7	; 247
    1a9c:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,2);
    1a9e:	a5 e5       	ldi	r26, 0x55	; 85
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e5 e5       	ldi	r30, 0x55	; 85
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	84 60       	ori	r24, 0x04	; 4
    1aaa:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1aac:	ab e5       	ldi	r26, 0x5B	; 91
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	eb e5       	ldi	r30, 0x5B	; 91
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 68       	ori	r24, 0x80	; 128
    1ab8:	8c 93       	st	X, r24
    1aba:	48 c0       	rjmp	.+144    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_LOW_LEVEL:
        CLR_BIT(EXTI_U8_MCUCR,3);
    1abc:	a5 e5       	ldi	r26, 0x55	; 85
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e5 e5       	ldi	r30, 0x55	; 85
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	87 7f       	andi	r24, 0xF7	; 247
    1ac8:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,2);
    1aca:	a5 e5       	ldi	r26, 0x55	; 85
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e5       	ldi	r30, 0x55	; 85
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8b 7f       	andi	r24, 0xFB	; 251
    1ad6:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1ad8:	ab e5       	ldi	r26, 0x5B	; 91
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	eb e5       	ldi	r30, 0x5B	; 91
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 68       	ori	r24, 0x80	; 128
    1ae4:	8c 93       	st	X, r24
    1ae6:	32 c0       	rjmp	.+100    	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
    1aea:	30 c0       	rjmp	.+96     	; 0x1b4c <EXTI_EXTIEnable+0x290>
       }
        break;

        case EXTI_u8_INT2:
       switch (Copy_u8EdgeIndex)
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	3d 83       	std	Y+5, r19	; 0x05
    1af4:	2c 83       	std	Y+4, r18	; 0x04
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	9d 81       	ldd	r25, Y+5	; 0x05
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	31 f0       	breq	.+12     	; 0x1b0a <EXTI_EXTIEnable+0x24e>
    1afe:	2c 81       	ldd	r18, Y+4	; 0x04
    1b00:	3d 81       	ldd	r19, Y+5	; 0x05
    1b02:	21 30       	cpi	r18, 0x01	; 1
    1b04:	31 05       	cpc	r19, r1
    1b06:	81 f0       	breq	.+32     	; 0x1b28 <EXTI_EXTIEnable+0x26c>
    1b08:	1e c0       	rjmp	.+60     	; 0x1b46 <EXTI_EXTIEnable+0x28a>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,6);
    1b0a:	a5 e5       	ldi	r26, 0x55	; 85
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e5 e5       	ldi	r30, 0x55	; 85
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 64       	ori	r24, 0x40	; 64
    1b16:	8c 93       	st	X, r24
        /*enable EXTI2*/
        SET_BIT(EXTI_U8_GICR,5);
    1b18:	ab e5       	ldi	r26, 0x5B	; 91
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	eb e5       	ldi	r30, 0x5B	; 91
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 62       	ori	r24, 0x20	; 32
    1b24:	8c 93       	st	X, r24
    1b26:	12 c0       	rjmp	.+36     	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        CLR_BIT(EXTI_U8_MCUCR,6);
    1b28:	a5 e5       	ldi	r26, 0x55	; 85
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e5       	ldi	r30, 0x55	; 85
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8f 7b       	andi	r24, 0xBF	; 191
    1b34:	8c 93       	st	X, r24
        /*enable EXTI2*/
        SET_BIT(EXTI_U8_GICR,5);
    1b36:	ab e5       	ldi	r26, 0x5B	; 91
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	eb e5       	ldi	r30, 0x5B	; 91
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 62       	ori	r24, 0x20	; 32
    1b42:	8c 93       	st	X, r24
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    1b46:	19 82       	std	Y+1, r1	; 0x01
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <EXTI_EXTIEnable+0x290>
       }
        break;
        default: Local_u8ErrorState = STD_TYPES_NOK;
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4e:	2b 96       	adiw	r28, 0x0b	; 11
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <EXTI_u8EXTIDisable>:

u8 EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <EXTI_u8EXTIDisable+0x6>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <EXTI_u8EXTIDisable+0x8>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_ErrorState = STD_TYPES_OK;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3c 83       	std	Y+4, r19	; 0x04
    1b7a:	2b 83       	std	Y+3, r18	; 0x03
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	91 05       	cpc	r25, r1
    1b84:	89 f0       	breq	.+34     	; 0x1ba8 <EXTI_u8EXTIDisable+0x48>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	a1 f0       	breq	.+40     	; 0x1bb8 <EXTI_u8EXTIDisable+0x58>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	c1 f4       	brne	.+48     	; 0x1bc8 <EXTI_u8EXTIDisable+0x68>
    {
    case EXTI_u8_INT0:
        /* disable EXTI0 */
        CLR_BIT(EXTI_U8_GICR,6);
    1b98:	ab e5       	ldi	r26, 0x5B	; 91
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	eb e5       	ldi	r30, 0x5B	; 91
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8f 7b       	andi	r24, 0xBF	; 191
    1ba4:	8c 93       	st	X, r24
    1ba6:	11 c0       	rjmp	.+34     	; 0x1bca <EXTI_u8EXTIDisable+0x6a>
        break;

        case EXTI_u8_INT1:
        /* disable EXTI1 */
        CLR_BIT(EXTI_U8_GICR,7);
    1ba8:	ab e5       	ldi	r26, 0x5B	; 91
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	eb e5       	ldi	r30, 0x5B	; 91
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8f 77       	andi	r24, 0x7F	; 127
    1bb4:	8c 93       	st	X, r24
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <EXTI_u8EXTIDisable+0x6a>
        break;
    
    case EXTI_u8_INT2:
        /* disable EXTI2 */
        CLR_BIT(EXTI_U8_GICR,5);
    1bb8:	ab e5       	ldi	r26, 0x5B	; 91
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	eb e5       	ldi	r30, 0x5B	; 91
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	8f 7d       	andi	r24, 0xDF	; 223
    1bc4:	8c 93       	st	X, r24
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <EXTI_u8EXTIDisable+0x6a>
        break;
    default: Local_ErrorState = STD_TYPES_NOK;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_ErrorState;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <EXTI_u8EXTISetCallBack>:

u8 EXTI_u8EXTISetCallBack(u8 Copy_uEXTIIndex, void(*Copy_pf) (void))
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <EXTI_u8EXTISetCallBack+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <EXTI_u8EXTISetCallBack+0x8>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    1be8:	7c 83       	std	Y+4, r23	; 0x04
    1bea:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_uEXTIIndex <= EXTI_u8_INT2) && (Copy_pf != NULL))
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	88 f4       	brcc	.+34     	; 0x1c18 <EXTI_u8EXTISetCallBack+0x3e>
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f0       	breq	.+26     	; 0x1c18 <EXTI_u8EXTISetCallBack+0x3e>
    {
        EXTI_ApfExti[Copy_uEXTIIndex] = Copy_pf;
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e7 52       	subi	r30, 0x27	; 39
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <EXTI_u8EXTISetCallBack+0x40>
    }
    else 
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1c18:	19 82       	std	Y+1, r1	; 0x01
    }


    return Local_u8ErrorState;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <__vector_1>:

/* prototype for ISR of EXTI0 */
void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	2f 93       	push	r18
    1c36:	3f 93       	push	r19
    1c38:	4f 93       	push	r20
    1c3a:	5f 93       	push	r21
    1c3c:	6f 93       	push	r22
    1c3e:	7f 93       	push	r23
    1c40:	8f 93       	push	r24
    1c42:	9f 93       	push	r25
    1c44:	af 93       	push	r26
    1c46:	bf 93       	push	r27
    1c48:	ef 93       	push	r30
    1c4a:	ff 93       	push	r31
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT0] != NULL){
    1c54:	80 91 d9 00 	lds	r24, 0x00D9
    1c58:	90 91 da 00 	lds	r25, 0x00DA
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	29 f0       	breq	.+10     	; 0x1c6a <__vector_1+0x40>

        EXTI_ApfExti[EXTI_u8_INT0]();
    1c60:	e0 91 d9 00 	lds	r30, 0x00D9
    1c64:	f0 91 da 00 	lds	r31, 0x00DA
    1c68:	09 95       	icall
    }
    
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	bf 91       	pop	r27
    1c74:	af 91       	pop	r26
    1c76:	9f 91       	pop	r25
    1c78:	8f 91       	pop	r24
    1c7a:	7f 91       	pop	r23
    1c7c:	6f 91       	pop	r22
    1c7e:	5f 91       	pop	r21
    1c80:	4f 91       	pop	r20
    1c82:	3f 91       	pop	r19
    1c84:	2f 91       	pop	r18
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	0f 90       	pop	r0
    1c8c:	1f 90       	pop	r1
    1c8e:	18 95       	reti

00001c90 <__vector_2>:

/* prototype for ISR of EXTI1 */
void __vector_2(void)      __attribute__((signal));
void __vector_2(void)
{
    1c90:	1f 92       	push	r1
    1c92:	0f 92       	push	r0
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	0f 92       	push	r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	2f 93       	push	r18
    1c9c:	3f 93       	push	r19
    1c9e:	4f 93       	push	r20
    1ca0:	5f 93       	push	r21
    1ca2:	6f 93       	push	r22
    1ca4:	7f 93       	push	r23
    1ca6:	8f 93       	push	r24
    1ca8:	9f 93       	push	r25
    1caa:	af 93       	push	r26
    1cac:	bf 93       	push	r27
    1cae:	ef 93       	push	r30
    1cb0:	ff 93       	push	r31
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT1] != NULL){
    1cba:	80 91 db 00 	lds	r24, 0x00DB
    1cbe:	90 91 dc 00 	lds	r25, 0x00DC
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	29 f0       	breq	.+10     	; 0x1cd0 <__vector_2+0x40>

        EXTI_ApfExti[EXTI_u8_INT1]();
    1cc6:	e0 91 db 00 	lds	r30, 0x00DB
    1cca:	f0 91 dc 00 	lds	r31, 0x00DC
    1cce:	09 95       	icall
    }
}
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	ff 91       	pop	r31
    1cd6:	ef 91       	pop	r30
    1cd8:	bf 91       	pop	r27
    1cda:	af 91       	pop	r26
    1cdc:	9f 91       	pop	r25
    1cde:	8f 91       	pop	r24
    1ce0:	7f 91       	pop	r23
    1ce2:	6f 91       	pop	r22
    1ce4:	5f 91       	pop	r21
    1ce6:	4f 91       	pop	r20
    1ce8:	3f 91       	pop	r19
    1cea:	2f 91       	pop	r18
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <__vector_3>:

/* prototype for ISR of EXTI2 */
void __vector_3(void)      __attribute__((signal));
void __vector_3(void)
{
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	2f 93       	push	r18
    1d02:	3f 93       	push	r19
    1d04:	4f 93       	push	r20
    1d06:	5f 93       	push	r21
    1d08:	6f 93       	push	r22
    1d0a:	7f 93       	push	r23
    1d0c:	8f 93       	push	r24
    1d0e:	9f 93       	push	r25
    1d10:	af 93       	push	r26
    1d12:	bf 93       	push	r27
    1d14:	ef 93       	push	r30
    1d16:	ff 93       	push	r31
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT2] != NULL){
    1d20:	80 91 dd 00 	lds	r24, 0x00DD
    1d24:	90 91 de 00 	lds	r25, 0x00DE
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	29 f0       	breq	.+10     	; 0x1d36 <__vector_3+0x40>

        EXTI_ApfExti[EXTI_u8_INT2]();
    1d2c:	e0 91 dd 00 	lds	r30, 0x00DD
    1d30:	f0 91 de 00 	lds	r31, 0x00DE
    1d34:	09 95       	icall
    }
}
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	ff 91       	pop	r31
    1d3c:	ef 91       	pop	r30
    1d3e:	bf 91       	pop	r27
    1d40:	af 91       	pop	r26
    1d42:	9f 91       	pop	r25
    1d44:	8f 91       	pop	r24
    1d46:	7f 91       	pop	r23
    1d48:	6f 91       	pop	r22
    1d4a:	5f 91       	pop	r21
    1d4c:	4f 91       	pop	r20
    1d4e:	3f 91       	pop	r19
    1d50:	2f 91       	pop	r18
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	0f 90       	pop	r0
    1d58:	1f 90       	pop	r1
    1d5a:	18 95       	reti

00001d5c <GI_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_Math.h"
#include "GI_interface.h"
#define SREG   *((volatile u8*)0x5f)

void GI_voidEnable(void){
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,7);
    1d64:	af e5       	ldi	r26, 0x5F	; 95
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	ef e5       	ldi	r30, 0x5F	; 95
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 68       	ori	r24, 0x80	; 128
    1d70:	8c 93       	st	X, r24
}
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <GI_voidDisable>:


void GI_voidDisable(void)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
    1d80:	af e5       	ldi	r26, 0x5F	; 95
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ef e5       	ldi	r30, 0x5F	; 95
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	8f 77       	andi	r24, 0x7F	; 127
    1d8c:	8c 93       	st	X, r24
}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <KPD_u8GetKeyState>:
u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
u8 KPD_Au8ColsPins[4]={KPD_u8_c1_PIN,KPD_u8_c2_PIN,KPD_u8_c3_PIN,KPD_u8_c4_PIN};


u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	65 97       	sbiw	r28, 0x15	; 21
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	9d 8b       	std	Y+21, r25	; 0x15
    1daa:	8c 8b       	std	Y+20, r24	; 0x14

    u8 Local_u8ErrorState = STD_TYPES_OK;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
    1db0:	1f 86       	std	Y+15, r1	; 0x0f
if(Copy_pu8ReturnedKey != NULL)
    1db2:	8c 89       	ldd	r24, Y+20	; 0x14
    1db4:	9d 89       	ldd	r25, Y+21	; 0x15
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <KPD_u8GetKeyState+0x28>
    1dba:	f0 c0       	rjmp	.+480    	; 0x1f9c <KPD_u8GetKeyState+0x208>
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1dbc:	ec 89       	ldd	r30, Y+20	; 0x14
    1dbe:	fd 89       	ldd	r31, Y+21	; 0x15
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	80 83       	st	Z, r24
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1dc4:	19 8a       	std	Y+17, r1	; 0x11
    1dc6:	e5 c0       	rjmp	.+458    	; 0x1f92 <KPD_u8GetKeyState+0x1fe>
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    1dc8:	89 89       	ldd	r24, Y+17	; 0x11
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 53       	subi	r30, 0x32	; 50
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	90 81       	ld	r25, Z
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	69 2f       	mov	r22, r25
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    1de0:	18 8a       	std	Y+16, r1	; 0x10
    1de2:	c1 c0       	rjmp	.+386    	; 0x1f66 <KPD_u8GetKeyState+0x1d2>
        {
            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1de4:	88 89       	ldd	r24, Y+16	; 0x10
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	fc 01       	movw	r30, r24
    1dec:	ee 52       	subi	r30, 0x2E	; 46
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	90 81       	ld	r25, Z
    1df2:	9e 01       	movw	r18, r28
    1df4:	2d 5e       	subi	r18, 0xED	; 237
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	69 2f       	mov	r22, r25
    1dfc:	a9 01       	movw	r20, r18
    1dfe:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <DIO_u8GetPinValue>
            if(Local_u8PinValue == DIO_u8_LOW)
    1e02:	8b 89       	ldd	r24, Y+19	; 0x13
    1e04:	88 23       	and	r24, r24
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <KPD_u8GetKeyState+0x76>
    1e08:	ab c0       	rjmp	.+342    	; 0x1f60 <KPD_u8GetKeyState+0x1cc>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 ea       	ldi	r26, 0xA0	; 160
    1e10:	b1 e4       	ldi	r27, 0x41	; 65
    1e12:	8b 87       	std	Y+11, r24	; 0x0b
    1e14:	9c 87       	std	Y+12, r25	; 0x0c
    1e16:	ad 87       	std	Y+13, r26	; 0x0d
    1e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a e7       	ldi	r20, 0x7A	; 122
    1e28:	53 e4       	ldi	r21, 0x43	; 67
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	8f 83       	std	Y+7, r24	; 0x07
    1e34:	98 87       	std	Y+8, r25	; 0x08
    1e36:	a9 87       	std	Y+9, r26	; 0x09
    1e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	4c f5       	brge	.+82     	; 0x1ec6 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <KPD_u8GetKeyState+0x128>
    1e9e:	89 e1       	ldi	r24, 0x19	; 25
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9c 83       	std	Y+4, r25	; 0x04
    1ea4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <KPD_u8GetKeyState+0x116>
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f7       	brne	.-38     	; 0x1e9e <KPD_u8GetKeyState+0x10a>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	9a 83       	std	Y+2, r25	; 0x02
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <KPD_u8GetKeyState+0x152>
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
            {
                //debouncing//
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1eee:	88 89       	ldd	r24, Y+16	; 0x10
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	ee 52       	subi	r30, 0x2E	; 46
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	90 81       	ld	r25, Z
    1efc:	9e 01       	movw	r18, r28
    1efe:	2d 5e       	subi	r18, 0xED	; 237
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	69 2f       	mov	r22, r25
    1f06:	a9 01       	movw	r20, r18
    1f08:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <DIO_u8GetPinValue>
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <KPD_u8GetKeyState+0x198>


                while (Local_u8PinValue == DIO_u8_LOW)
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1f0e:	88 89       	ldd	r24, Y+16	; 0x10
    1f10:	88 2f       	mov	r24, r24
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	fc 01       	movw	r30, r24
    1f16:	ee 52       	subi	r30, 0x2E	; 46
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	90 81       	ld	r25, Z
    1f1c:	9e 01       	movw	r18, r28
    1f1e:	2d 5e       	subi	r18, 0xED	; 237
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	69 2f       	mov	r22, r25
    1f26:	a9 01       	movw	r20, r18
    1f28:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <DIO_u8GetPinValue>
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);


                while (Local_u8PinValue == DIO_u8_LOW)
    1f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2e:	88 23       	and	r24, r24
    1f30:	71 f3       	breq	.-36     	; 0x1f0e <KPD_u8GetKeyState+0x17a>
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);

                }
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1f32:	89 89       	ldd	r24, Y+17	; 0x11
    1f34:	48 2f       	mov	r20, r24
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	88 89       	ldd	r24, Y+16	; 0x10
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	ca 01       	movw	r24, r20
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	82 0f       	add	r24, r18
    1f4a:	93 1f       	adc	r25, r19
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e2 54       	subi	r30, 0x42	; 66
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	ec 89       	ldd	r30, Y+20	; 0x14
    1f56:	fd 89       	ldd	r31, Y+21	; 0x15
    1f58:	80 83       	st	Z, r24
                Local_u8Flag =1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	8f 87       	std	Y+15, r24	; 0x0f
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <KPD_u8GetKeyState+0x1da>
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    1f60:	88 89       	ldd	r24, Y+16	; 0x10
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	88 8b       	std	Y+16, r24	; 0x10
    1f66:	88 89       	ldd	r24, Y+16	; 0x10
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	08 f4       	brcc	.+2      	; 0x1f6e <KPD_u8GetKeyState+0x1da>
    1f6c:	3b cf       	rjmp	.-394    	; 0x1de4 <KPD_u8GetKeyState+0x50>
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
                Local_u8Flag =1;
                break;
            }
        }
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    1f6e:	89 89       	ldd	r24, Y+17	; 0x11
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	fc 01       	movw	r30, r24
    1f76:	e2 53       	subi	r30, 0x32	; 50
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	90 81       	ld	r25, Z
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	69 2f       	mov	r22, r25
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
        if(Local_u8Flag == 1)
    1f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	49 f0       	breq	.+18     	; 0x1f9e <KPD_u8GetKeyState+0x20a>
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
if(Copy_pu8ReturnedKey != NULL)
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1f8c:	89 89       	ldd	r24, Y+17	; 0x11
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	89 8b       	std	Y+17, r24	; 0x11
    1f92:	89 89       	ldd	r24, Y+17	; 0x11
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	08 f4       	brcc	.+2      	; 0x1f9a <KPD_u8GetKeyState+0x206>
    1f98:	17 cf       	rjmp	.-466    	; 0x1dc8 <KPD_u8GetKeyState+0x34>
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <KPD_u8GetKeyState+0x20a>

     }

}
else{
    Local_u8ErrorState = STD_TYPES_NOK;
    1f9c:	1a 8a       	std	Y+18, r1	; 0x12
}

   return Local_u8ErrorState;
    1f9e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1fa0:	65 96       	adiw	r28, 0x15	; 21
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <LCD_voideInit>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_voideInit(void)
{
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	cc 54       	subi	r28, 0x4C	; 76
    1fc0:	d0 40       	sbci	r29, 0x00	; 0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e7 5b       	subi	r30, 0xB7	; 183
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	ac e0       	ldi	r26, 0x0C	; 12
    1fd8:	b2 e4       	ldi	r27, 0x42	; 66
    1fda:	80 83       	st	Z, r24
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	a2 83       	std	Z+2, r26	; 0x02
    1fe0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	0b 5b       	subi	r16, 0xBB	; 187
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e7 5b       	subi	r30, 0xB7	; 183
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a ef       	ldi	r20, 0xFA	; 250
    1ffc:	54 e4       	ldi	r21, 0x44	; 68
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	f8 01       	movw	r30, r16
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	a2 83       	std	Z+2, r26	; 0x02
    200e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2010:	fe 01       	movw	r30, r28
    2012:	eb 5b       	subi	r30, 0xBB	; 187
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202a:	88 23       	and	r24, r24
    202c:	44 f4       	brge	.+16     	; 0x203e <LCD_voideInit+0x8c>
		__ticks = 1;
    202e:	fe 01       	movw	r30, r28
    2030:	ed 5b       	subi	r30, 0xBD	; 189
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
    203c:	64 c0       	rjmp	.+200    	; 0x2106 <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    203e:	fe 01       	movw	r30, r28
    2040:	eb 5b       	subi	r30, 0xBB	; 187
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f e7       	ldi	r20, 0x7F	; 127
    2052:	57 e4       	ldi	r21, 0x47	; 71
    2054:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2058:	18 16       	cp	r1, r24
    205a:	0c f0       	brlt	.+2      	; 0x205e <LCD_voideInit+0xac>
    205c:	43 c0       	rjmp	.+134    	; 0x20e4 <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205e:	fe 01       	movw	r30, r28
    2060:	e7 5b       	subi	r30, 0xB7	; 183
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	8e 01       	movw	r16, r28
    207e:	0d 5b       	subi	r16, 0xBD	; 189
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	f8 01       	movw	r30, r16
    2090:	91 83       	std	Z+1, r25	; 0x01
    2092:	80 83       	st	Z, r24
    2094:	1f c0       	rjmp	.+62     	; 0x20d4 <LCD_voideInit+0x122>
    2096:	fe 01       	movw	r30, r28
    2098:	ef 5b       	subi	r30, 0xBF	; 191
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	88 ec       	ldi	r24, 0xC8	; 200
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	fe 01       	movw	r30, r28
    20a6:	ef 5b       	subi	r30, 0xBF	; 191
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_voideInit+0xfc>
    20b2:	fe 01       	movw	r30, r28
    20b4:	ef 5b       	subi	r30, 0xBF	; 191
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	de 01       	movw	r26, r28
    20be:	ad 5b       	subi	r26, 0xBD	; 189
    20c0:	bf 4f       	sbci	r27, 0xFF	; 255
    20c2:	fe 01       	movw	r30, r28
    20c4:	ed 5b       	subi	r30, 0xBD	; 189
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	9c 93       	st	X, r25
    20d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	fe 01       	movw	r30, r28
    20d6:	ed 5b       	subi	r30, 0xBD	; 189
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	d1 f6       	brne	.-76     	; 0x2096 <LCD_voideInit+0xe4>
    20e2:	24 c0       	rjmp	.+72     	; 0x212c <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	8e 01       	movw	r16, r28
    20e6:	0d 5b       	subi	r16, 0xBD	; 189
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	eb 5b       	subi	r30, 0xBB	; 187
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	f8 01       	movw	r30, r16
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
    2106:	fe 01       	movw	r30, r28
    2108:	ed 5b       	subi	r30, 0xBD	; 189
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	fe 01       	movw	r30, r28
    2112:	ff 96       	adiw	r30, 0x3f	; 63
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
    2118:	fe 01       	movw	r30, r28
    211a:	ff 96       	adiw	r30, 0x3f	; 63
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_voideInit+0x16e>
    2124:	fe 01       	movw	r30, r28
    2126:	ff 96       	adiw	r30, 0x3f	; 63
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
    _delay_ms(35);
    LCD_voidSendCmnd(0b00111000);
    212c:	88 e3       	ldi	r24, 0x38	; 56
    212e:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a0 e2       	ldi	r26, 0x20	; 32
    2138:	b2 e4       	ldi	r27, 0x42	; 66
    213a:	8b af       	std	Y+59, r24	; 0x3b
    213c:	9c af       	std	Y+60, r25	; 0x3c
    213e:	ad af       	std	Y+61, r26	; 0x3d
    2140:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2142:	6b ad       	ldd	r22, Y+59	; 0x3b
    2144:	7c ad       	ldd	r23, Y+60	; 0x3c
    2146:	8d ad       	ldd	r24, Y+61	; 0x3d
    2148:	9e ad       	ldd	r25, Y+62	; 0x3e
    214a:	2b ea       	ldi	r18, 0xAB	; 171
    214c:	3a ea       	ldi	r19, 0xAA	; 170
    214e:	4a e2       	ldi	r20, 0x2A	; 42
    2150:	50 e4       	ldi	r21, 0x40	; 64
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8f ab       	std	Y+55, r24	; 0x37
    215c:	98 af       	std	Y+56, r25	; 0x38
    215e:	a9 af       	std	Y+57, r26	; 0x39
    2160:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2162:	6f a9       	ldd	r22, Y+55	; 0x37
    2164:	78 ad       	ldd	r23, Y+56	; 0x38
    2166:	89 ad       	ldd	r24, Y+57	; 0x39
    2168:	9a ad       	ldd	r25, Y+58	; 0x3a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	1c f4       	brge	.+6      	; 0x2180 <LCD_voideInit+0x1ce>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	8e ab       	std	Y+54, r24	; 0x36
    217e:	91 c0       	rjmp	.+290    	; 0x22a2 <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    2180:	6f a9       	ldd	r22, Y+55	; 0x37
    2182:	78 ad       	ldd	r23, Y+56	; 0x38
    2184:	89 ad       	ldd	r24, Y+57	; 0x39
    2186:	9a ad       	ldd	r25, Y+58	; 0x3a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	53 e4       	ldi	r21, 0x43	; 67
    2190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	0c f0       	brlt	.+2      	; 0x219a <LCD_voideInit+0x1e8>
    2198:	7b c0       	rjmp	.+246    	; 0x2290 <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    219a:	6b ad       	ldd	r22, Y+59	; 0x3b
    219c:	7c ad       	ldd	r23, Y+60	; 0x3c
    219e:	8d ad       	ldd	r24, Y+61	; 0x3d
    21a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a e7       	ldi	r20, 0x7A	; 122
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8a ab       	std	Y+50, r24	; 0x32
    21b4:	9b ab       	std	Y+51, r25	; 0x33
    21b6:	ac ab       	std	Y+52, r26	; 0x34
    21b8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ba:	6a a9       	ldd	r22, Y+50	; 0x32
    21bc:	7b a9       	ldd	r23, Y+51	; 0x33
    21be:	8c a9       	ldd	r24, Y+52	; 0x34
    21c0:	9d a9       	ldd	r25, Y+53	; 0x35
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4a ef       	ldi	r20, 0xFA	; 250
    21c8:	54 e4       	ldi	r21, 0x44	; 68
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8e a7       	std	Y+46, r24	; 0x2e
    21d4:	9f a7       	std	Y+47, r25	; 0x2f
    21d6:	a8 ab       	std	Y+48, r26	; 0x30
    21d8:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    21da:	6e a5       	ldd	r22, Y+46	; 0x2e
    21dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    21de:	88 a9       	ldd	r24, Y+48	; 0x30
    21e0:	99 a9       	ldd	r25, Y+49	; 0x31
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ee:	88 23       	and	r24, r24
    21f0:	2c f4       	brge	.+10     	; 0x21fc <LCD_voideInit+0x24a>
		__ticks = 1;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9d a7       	std	Y+45, r25	; 0x2d
    21f8:	8c a7       	std	Y+44, r24	; 0x2c
    21fa:	3f c0       	rjmp	.+126    	; 0x227a <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    21fc:	6e a5       	ldd	r22, Y+46	; 0x2e
    21fe:	7f a5       	ldd	r23, Y+47	; 0x2f
    2200:	88 a9       	ldd	r24, Y+48	; 0x30
    2202:	99 a9       	ldd	r25, Y+49	; 0x31
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	3f ef       	ldi	r19, 0xFF	; 255
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	57 e4       	ldi	r21, 0x47	; 71
    220c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2210:	18 16       	cp	r1, r24
    2212:	4c f5       	brge	.+82     	; 0x2266 <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2214:	6a a9       	ldd	r22, Y+50	; 0x32
    2216:	7b a9       	ldd	r23, Y+51	; 0x33
    2218:	8c a9       	ldd	r24, Y+52	; 0x34
    221a:	9d a9       	ldd	r25, Y+53	; 0x35
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9d a7       	std	Y+45, r25	; 0x2d
    223a:	8c a7       	std	Y+44, r24	; 0x2c
    223c:	0f c0       	rjmp	.+30     	; 0x225c <LCD_voideInit+0x2aa>
    223e:	88 ec       	ldi	r24, 0xC8	; 200
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9b a7       	std	Y+43, r25	; 0x2b
    2244:	8a a7       	std	Y+42, r24	; 0x2a
    2246:	8a a5       	ldd	r24, Y+42	; 0x2a
    2248:	9b a5       	ldd	r25, Y+43	; 0x2b
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_voideInit+0x298>
    224e:	9b a7       	std	Y+43, r25	; 0x2b
    2250:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2252:	8c a5       	ldd	r24, Y+44	; 0x2c
    2254:	9d a5       	ldd	r25, Y+45	; 0x2d
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	9d a7       	std	Y+45, r25	; 0x2d
    225a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225c:	8c a5       	ldd	r24, Y+44	; 0x2c
    225e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	69 f7       	brne	.-38     	; 0x223e <LCD_voideInit+0x28c>
    2264:	24 c0       	rjmp	.+72     	; 0x22ae <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2266:	6e a5       	ldd	r22, Y+46	; 0x2e
    2268:	7f a5       	ldd	r23, Y+47	; 0x2f
    226a:	88 a9       	ldd	r24, Y+48	; 0x30
    226c:	99 a9       	ldd	r25, Y+49	; 0x31
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9d a7       	std	Y+45, r25	; 0x2d
    2278:	8c a7       	std	Y+44, r24	; 0x2c
    227a:	8c a5       	ldd	r24, Y+44	; 0x2c
    227c:	9d a5       	ldd	r25, Y+45	; 0x2d
    227e:	99 a7       	std	Y+41, r25	; 0x29
    2280:	88 a7       	std	Y+40, r24	; 0x28
    2282:	88 a5       	ldd	r24, Y+40	; 0x28
    2284:	99 a5       	ldd	r25, Y+41	; 0x29
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_voideInit+0x2d4>
    228a:	99 a7       	std	Y+41, r25	; 0x29
    228c:	88 a7       	std	Y+40, r24	; 0x28
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2290:	6f a9       	ldd	r22, Y+55	; 0x37
    2292:	78 ad       	ldd	r23, Y+56	; 0x38
    2294:	89 ad       	ldd	r24, Y+57	; 0x39
    2296:	9a ad       	ldd	r25, Y+58	; 0x3a
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8e ab       	std	Y+54, r24	; 0x36
    22a2:	8e a9       	ldd	r24, Y+54	; 0x36
    22a4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a6:	8f a1       	ldd	r24, Y+39	; 0x27
    22a8:	8a 95       	dec	r24
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_voideInit+0x2f6>
    22ac:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_voidSendCmnd(0b00001111);
    22ae:	8f e0       	ldi	r24, 0x0F	; 15
    22b0:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a0 e2       	ldi	r26, 0x20	; 32
    22ba:	b2 e4       	ldi	r27, 0x42	; 66
    22bc:	8b a3       	std	Y+35, r24	; 0x23
    22be:	9c a3       	std	Y+36, r25	; 0x24
    22c0:	ad a3       	std	Y+37, r26	; 0x25
    22c2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22c4:	6b a1       	ldd	r22, Y+35	; 0x23
    22c6:	7c a1       	ldd	r23, Y+36	; 0x24
    22c8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ca:	9e a1       	ldd	r25, Y+38	; 0x26
    22cc:	2b ea       	ldi	r18, 0xAB	; 171
    22ce:	3a ea       	ldi	r19, 0xAA	; 170
    22d0:	4a e2       	ldi	r20, 0x2A	; 42
    22d2:	50 e4       	ldi	r21, 0x40	; 64
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8f 8f       	std	Y+31, r24	; 0x1f
    22de:	98 a3       	std	Y+32, r25	; 0x20
    22e0:	a9 a3       	std	Y+33, r26	; 0x21
    22e2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22e6:	78 a1       	ldd	r23, Y+32	; 0x20
    22e8:	89 a1       	ldd	r24, Y+33	; 0x21
    22ea:	9a a1       	ldd	r25, Y+34	; 0x22
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	1c f4       	brge	.+6      	; 0x2302 <LCD_voideInit+0x350>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	8e 8f       	std	Y+30, r24	; 0x1e
    2300:	91 c0       	rjmp	.+290    	; 0x2424 <LCD_voideInit+0x472>
	else if (__tmp > 255)
    2302:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2304:	78 a1       	ldd	r23, Y+32	; 0x20
    2306:	89 a1       	ldd	r24, Y+33	; 0x21
    2308:	9a a1       	ldd	r25, Y+34	; 0x22
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	53 e4       	ldi	r21, 0x43	; 67
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	0c f0       	brlt	.+2      	; 0x231c <LCD_voideInit+0x36a>
    231a:	7b c0       	rjmp	.+246    	; 0x2412 <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    231c:	6b a1       	ldd	r22, Y+35	; 0x23
    231e:	7c a1       	ldd	r23, Y+36	; 0x24
    2320:	8d a1       	ldd	r24, Y+37	; 0x25
    2322:	9e a1       	ldd	r25, Y+38	; 0x26
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a e7       	ldi	r20, 0x7A	; 122
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8a 8f       	std	Y+26, r24	; 0x1a
    2336:	9b 8f       	std	Y+27, r25	; 0x1b
    2338:	ac 8f       	std	Y+28, r26	; 0x1c
    233a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    233e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2340:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2342:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a ef       	ldi	r20, 0xFA	; 250
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8e 8b       	std	Y+22, r24	; 0x16
    2356:	9f 8b       	std	Y+23, r25	; 0x17
    2358:	a8 8f       	std	Y+24, r26	; 0x18
    235a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    235c:	6e 89       	ldd	r22, Y+22	; 0x16
    235e:	7f 89       	ldd	r23, Y+23	; 0x17
    2360:	88 8d       	ldd	r24, Y+24	; 0x18
    2362:	99 8d       	ldd	r25, Y+25	; 0x19
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <LCD_voideInit+0x3cc>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9d 8b       	std	Y+21, r25	; 0x15
    237a:	8c 8b       	std	Y+20, r24	; 0x14
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    237e:	6e 89       	ldd	r22, Y+22	; 0x16
    2380:	7f 89       	ldd	r23, Y+23	; 0x17
    2382:	88 8d       	ldd	r24, Y+24	; 0x18
    2384:	99 8d       	ldd	r25, Y+25	; 0x19
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2398:	7b 8d       	ldd	r23, Y+27	; 0x1b
    239a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    239c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9d 8b       	std	Y+21, r25	; 0x15
    23bc:	8c 8b       	std	Y+20, r24	; 0x14
    23be:	0f c0       	rjmp	.+30     	; 0x23de <LCD_voideInit+0x42c>
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9b 8b       	std	Y+19, r25	; 0x13
    23c6:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c8:	8a 89       	ldd	r24, Y+18	; 0x12
    23ca:	9b 89       	ldd	r25, Y+19	; 0x13
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_voideInit+0x41a>
    23d0:	9b 8b       	std	Y+19, r25	; 0x13
    23d2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8c 89       	ldd	r24, Y+20	; 0x14
    23d6:	9d 89       	ldd	r25, Y+21	; 0x15
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9d 8b       	std	Y+21, r25	; 0x15
    23dc:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8c 89       	ldd	r24, Y+20	; 0x14
    23e0:	9d 89       	ldd	r25, Y+21	; 0x15
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <LCD_voideInit+0x40e>
    23e6:	24 c0       	rjmp	.+72     	; 0x2430 <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	6e 89       	ldd	r22, Y+22	; 0x16
    23ea:	7f 89       	ldd	r23, Y+23	; 0x17
    23ec:	88 8d       	ldd	r24, Y+24	; 0x18
    23ee:	99 8d       	ldd	r25, Y+25	; 0x19
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9d 8b       	std	Y+21, r25	; 0x15
    23fa:	8c 8b       	std	Y+20, r24	; 0x14
    23fc:	8c 89       	ldd	r24, Y+20	; 0x14
    23fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2400:	99 8b       	std	Y+17, r25	; 0x11
    2402:	88 8b       	std	Y+16, r24	; 0x10
    2404:	88 89       	ldd	r24, Y+16	; 0x10
    2406:	99 89       	ldd	r25, Y+17	; 0x11
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_voideInit+0x456>
    240c:	99 8b       	std	Y+17, r25	; 0x11
    240e:	88 8b       	std	Y+16, r24	; 0x10
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2412:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2414:	78 a1       	ldd	r23, Y+32	; 0x20
    2416:	89 a1       	ldd	r24, Y+33	; 0x21
    2418:	9a a1       	ldd	r25, Y+34	; 0x22
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8e 8f       	std	Y+30, r24	; 0x1e
    2424:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2426:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2428:	8f 85       	ldd	r24, Y+15	; 0x0f
    242a:	8a 95       	dec	r24
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_voideInit+0x478>
    242e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_voidSendCmnd(0x01);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 ea       	ldi	r26, 0xA0	; 160
    243c:	b0 e4       	ldi	r27, 0x40	; 64
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	ad 87       	std	Y+13, r26	; 0x0d
    2444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8f 83       	std	Y+7, r24	; 0x07
    2460:	98 87       	std	Y+8, r25	; 0x08
    2462:	a9 87       	std	Y+9, r26	; 0x09
    2464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_voideInit+0x4d6>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_voideInit+0x536>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_voideInit+0x524>
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_voideInit+0x518>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6f 81       	ldd	r22, Y+7	; 0x07
    24f4:	78 85       	ldd	r23, Y+8	; 0x08
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_voideInit+0x560>
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidSendCmnd(0b00000110);
    251a:	86 e0       	ldi	r24, 0x06	; 6
    251c:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
}
    2520:	c4 5b       	subi	r28, 0xB4	; 180
    2522:	df 4f       	sbci	r29, 0xFF	; 255
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	08 95       	ret

00002538 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	69 97       	sbiw	r28, 0x19	; 25
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
    /* Rs = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_LOW);
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	61 e0       	ldi	r22, 0x01	; 1
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD, Copy_u8Cmnd);
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	69 8d       	ldd	r22, Y+25	; 0x19
    2566:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	62 e0       	ldi	r22, 0x02	; 2
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e8       	ldi	r26, 0x80	; 128
    257a:	bf e3       	ldi	r27, 0x3F	; 63
    257c:	8d 8b       	std	Y+21, r24	; 0x15
    257e:	9e 8b       	std	Y+22, r25	; 0x16
    2580:	af 8b       	std	Y+23, r26	; 0x17
    2582:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	2b ea       	ldi	r18, 0xAB	; 171
    258e:	3a ea       	ldi	r19, 0xAA	; 170
    2590:	4a e2       	ldi	r20, 0x2A	; 42
    2592:	50 e4       	ldi	r21, 0x40	; 64
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	89 8b       	std	Y+17, r24	; 0x11
    259e:	9a 8b       	std	Y+18, r25	; 0x12
    25a0:	ab 8b       	std	Y+19, r26	; 0x13
    25a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25a4:	69 89       	ldd	r22, Y+17	; 0x11
    25a6:	7a 89       	ldd	r23, Y+18	; 0x12
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	5f e3       	ldi	r21, 0x3F	; 63
    25b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b8:	88 23       	and	r24, r24
    25ba:	1c f4       	brge	.+6      	; 0x25c2 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	88 8b       	std	Y+16, r24	; 0x10
    25c0:	91 c0       	rjmp	.+290    	; 0x26e4 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    25c2:	69 89       	ldd	r22, Y+17	; 0x11
    25c4:	7a 89       	ldd	r23, Y+18	; 0x12
    25c6:	8b 89       	ldd	r24, Y+19	; 0x13
    25c8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4f e7       	ldi	r20, 0x7F	; 127
    25d0:	53 e4       	ldi	r21, 0x43	; 67
    25d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d6:	18 16       	cp	r1, r24
    25d8:	0c f0       	brlt	.+2      	; 0x25dc <LCD_voidSendCmnd+0xa4>
    25da:	7b c0       	rjmp	.+246    	; 0x26d2 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    25dc:	6d 89       	ldd	r22, Y+21	; 0x15
    25de:	7e 89       	ldd	r23, Y+22	; 0x16
    25e0:	8f 89       	ldd	r24, Y+23	; 0x17
    25e2:	98 8d       	ldd	r25, Y+24	; 0x18
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4a e7       	ldi	r20, 0x7A	; 122
    25ea:	54 e4       	ldi	r21, 0x44	; 68
    25ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8c 87       	std	Y+12, r24	; 0x0c
    25f6:	9d 87       	std	Y+13, r25	; 0x0d
    25f8:	ae 87       	std	Y+14, r26	; 0x0e
    25fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    25fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2600:	8e 85       	ldd	r24, Y+14	; 0x0e
    2602:	9f 85       	ldd	r25, Y+15	; 0x0f
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	4a ef       	ldi	r20, 0xFA	; 250
    260a:	54 e4       	ldi	r21, 0x44	; 68
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	88 87       	std	Y+8, r24	; 0x08
    2616:	99 87       	std	Y+9, r25	; 0x09
    2618:	aa 87       	std	Y+10, r26	; 0x0a
    261a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    261c:	68 85       	ldd	r22, Y+8	; 0x08
    261e:	79 85       	ldd	r23, Y+9	; 0x09
    2620:	8a 85       	ldd	r24, Y+10	; 0x0a
    2622:	9b 85       	ldd	r25, Y+11	; 0x0b
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5f e3       	ldi	r21, 0x3F	; 63
    262c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2630:	88 23       	and	r24, r24
    2632:	2c f4       	brge	.+10     	; 0x263e <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9f 83       	std	Y+7, r25	; 0x07
    263a:	8e 83       	std	Y+6, r24	; 0x06
    263c:	3f c0       	rjmp	.+126    	; 0x26bc <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    263e:	68 85       	ldd	r22, Y+8	; 0x08
    2640:	79 85       	ldd	r23, Y+9	; 0x09
    2642:	8a 85       	ldd	r24, Y+10	; 0x0a
    2644:	9b 85       	ldd	r25, Y+11	; 0x0b
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	57 e4       	ldi	r21, 0x47	; 71
    264e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	4c f5       	brge	.+82     	; 0x26a8 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6c 85       	ldd	r22, Y+12	; 0x0c
    2658:	7d 85       	ldd	r23, Y+13	; 0x0d
    265a:	8e 85       	ldd	r24, Y+14	; 0x0e
    265c:	9f 85       	ldd	r25, Y+15	; 0x0f
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	9f 83       	std	Y+7, r25	; 0x07
    267c:	8e 83       	std	Y+6, r24	; 0x06
    267e:	0f c0       	rjmp	.+30     	; 0x269e <LCD_voidSendCmnd+0x166>
    2680:	88 ec       	ldi	r24, 0xC8	; 200
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9d 83       	std	Y+5, r25	; 0x05
    2686:	8c 83       	std	Y+4, r24	; 0x04
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	9d 81       	ldd	r25, Y+5	; 0x05
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_voidSendCmnd+0x154>
    2690:	9d 83       	std	Y+5, r25	; 0x05
    2692:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2694:	8e 81       	ldd	r24, Y+6	; 0x06
    2696:	9f 81       	ldd	r25, Y+7	; 0x07
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	9f 83       	std	Y+7, r25	; 0x07
    269c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269e:	8e 81       	ldd	r24, Y+6	; 0x06
    26a0:	9f 81       	ldd	r25, Y+7	; 0x07
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	69 f7       	brne	.-38     	; 0x2680 <LCD_voidSendCmnd+0x148>
    26a6:	24 c0       	rjmp	.+72     	; 0x26f0 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a8:	68 85       	ldd	r22, Y+8	; 0x08
    26aa:	79 85       	ldd	r23, Y+9	; 0x09
    26ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9f 83       	std	Y+7, r25	; 0x07
    26ba:	8e 83       	std	Y+6, r24	; 0x06
    26bc:	8e 81       	ldd	r24, Y+6	; 0x06
    26be:	9f 81       	ldd	r25, Y+7	; 0x07
    26c0:	9b 83       	std	Y+3, r25	; 0x03
    26c2:	8a 83       	std	Y+2, r24	; 0x02
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_voidSendCmnd+0x190>
    26cc:	9b 83       	std	Y+3, r25	; 0x03
    26ce:	8a 83       	std	Y+2, r24	; 0x02
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26d2:	69 89       	ldd	r22, Y+17	; 0x11
    26d4:	7a 89       	ldd	r23, Y+18	; 0x12
    26d6:	8b 89       	ldd	r24, Y+19	; 0x13
    26d8:	9c 89       	ldd	r25, Y+20	; 0x14
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	88 8b       	std	Y+16, r24	; 0x10
    26e4:	88 89       	ldd	r24, Y+16	; 0x10
    26e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	8a 95       	dec	r24
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_voidSendCmnd+0x1b2>
    26ee:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	62 e0       	ldi	r22, 0x02	; 2
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>

    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    _delay_us(1);

#endif
}
    26fa:	69 96       	adiw	r28, 0x19	; 25
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	69 97       	sbiw	r28, 0x19	; 25
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
    /* Rs = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_HIGH);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD, Copy_u8Char);
    2736:	83 e0       	ldi	r24, 0x03	; 3
    2738:	69 8d       	ldd	r22, Y+25	; 0x19
    273a:	0e 94 be 0b 	call	0x177c	; 0x177c <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	bf e3       	ldi	r27, 0x3F	; 63
    2750:	8d 8b       	std	Y+21, r24	; 0x15
    2752:	9e 8b       	std	Y+22, r25	; 0x16
    2754:	af 8b       	std	Y+23, r26	; 0x17
    2756:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2758:	6d 89       	ldd	r22, Y+21	; 0x15
    275a:	7e 89       	ldd	r23, Y+22	; 0x16
    275c:	8f 89       	ldd	r24, Y+23	; 0x17
    275e:	98 8d       	ldd	r25, Y+24	; 0x18
    2760:	2b ea       	ldi	r18, 0xAB	; 171
    2762:	3a ea       	ldi	r19, 0xAA	; 170
    2764:	4a e2       	ldi	r20, 0x2A	; 42
    2766:	50 e4       	ldi	r21, 0x40	; 64
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	89 8b       	std	Y+17, r24	; 0x11
    2772:	9a 8b       	std	Y+18, r25	; 0x12
    2774:	ab 8b       	std	Y+19, r26	; 0x13
    2776:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2778:	69 89       	ldd	r22, Y+17	; 0x11
    277a:	7a 89       	ldd	r23, Y+18	; 0x12
    277c:	8b 89       	ldd	r24, Y+19	; 0x13
    277e:	9c 89       	ldd	r25, Y+20	; 0x14
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	1c f4       	brge	.+6      	; 0x2796 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	88 8b       	std	Y+16, r24	; 0x10
    2794:	91 c0       	rjmp	.+290    	; 0x28b8 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2796:	69 89       	ldd	r22, Y+17	; 0x11
    2798:	7a 89       	ldd	r23, Y+18	; 0x12
    279a:	8b 89       	ldd	r24, Y+19	; 0x13
    279c:	9c 89       	ldd	r25, Y+20	; 0x14
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	53 e4       	ldi	r21, 0x43	; 67
    27a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	0c f0       	brlt	.+2      	; 0x27b0 <LCD_voidSendChar+0xa4>
    27ae:	7b c0       	rjmp	.+246    	; 0x28a6 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    27b0:	6d 89       	ldd	r22, Y+21	; 0x15
    27b2:	7e 89       	ldd	r23, Y+22	; 0x16
    27b4:	8f 89       	ldd	r24, Y+23	; 0x17
    27b6:	98 8d       	ldd	r25, Y+24	; 0x18
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a e7       	ldi	r20, 0x7A	; 122
    27be:	54 e4       	ldi	r21, 0x44	; 68
    27c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8c 87       	std	Y+12, r24	; 0x0c
    27ca:	9d 87       	std	Y+13, r25	; 0x0d
    27cc:	ae 87       	std	Y+14, r26	; 0x0e
    27ce:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    27d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    27d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    27d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	88 87       	std	Y+8, r24	; 0x08
    27ea:	99 87       	std	Y+9, r25	; 0x09
    27ec:	aa 87       	std	Y+10, r26	; 0x0a
    27ee:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27f0:	68 85       	ldd	r22, Y+8	; 0x08
    27f2:	79 85       	ldd	r23, Y+9	; 0x09
    27f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    27f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9f 83       	std	Y+7, r25	; 0x07
    280e:	8e 83       	std	Y+6, r24	; 0x06
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2812:	68 85       	ldd	r22, Y+8	; 0x08
    2814:	79 85       	ldd	r23, Y+9	; 0x09
    2816:	8a 85       	ldd	r24, Y+10	; 0x0a
    2818:	9b 85       	ldd	r25, Y+11	; 0x0b
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6c 85       	ldd	r22, Y+12	; 0x0c
    282c:	7d 85       	ldd	r23, Y+13	; 0x0d
    282e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2830:	9f 85       	ldd	r25, Y+15	; 0x0f
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9f 83       	std	Y+7, r25	; 0x07
    2850:	8e 83       	std	Y+6, r24	; 0x06
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <LCD_voidSendChar+0x166>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9d 83       	std	Y+5, r25	; 0x05
    285a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	9d 81       	ldd	r25, Y+5	; 0x05
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_voidSendChar+0x154>
    2864:	9d 83       	std	Y+5, r25	; 0x05
    2866:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8e 81       	ldd	r24, Y+6	; 0x06
    286a:	9f 81       	ldd	r25, Y+7	; 0x07
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9f 83       	std	Y+7, r25	; 0x07
    2870:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8e 81       	ldd	r24, Y+6	; 0x06
    2874:	9f 81       	ldd	r25, Y+7	; 0x07
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <LCD_voidSendChar+0x148>
    287a:	24 c0       	rjmp	.+72     	; 0x28c4 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	68 85       	ldd	r22, Y+8	; 0x08
    287e:	79 85       	ldd	r23, Y+9	; 0x09
    2880:	8a 85       	ldd	r24, Y+10	; 0x0a
    2882:	9b 85       	ldd	r25, Y+11	; 0x0b
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9f 83       	std	Y+7, r25	; 0x07
    288e:	8e 83       	std	Y+6, r24	; 0x06
    2890:	8e 81       	ldd	r24, Y+6	; 0x06
    2892:	9f 81       	ldd	r25, Y+7	; 0x07
    2894:	9b 83       	std	Y+3, r25	; 0x03
    2896:	8a 83       	std	Y+2, r24	; 0x02
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	9b 81       	ldd	r25, Y+3	; 0x03
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <LCD_voidSendChar+0x190>
    28a0:	9b 83       	std	Y+3, r25	; 0x03
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28a6:	69 89       	ldd	r22, Y+17	; 0x11
    28a8:	7a 89       	ldd	r23, Y+18	; 0x12
    28aa:	8b 89       	ldd	r24, Y+19	; 0x13
    28ac:	9c 89       	ldd	r25, Y+20	; 0x14
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	88 8b       	std	Y+16, r24	; 0x10
    28b8:	88 89       	ldd	r24, Y+16	; 0x10
    28ba:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	8a 95       	dec	r24
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_voidSendChar+0x1b2>
    28c2:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	62 e0       	ldi	r22, 0x02	; 2
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);

#endif
}
    28ce:	69 96       	adiw	r28, 0x19	; 25
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <LCD_PrintString>:

void LCD_PrintString(const char *str)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <LCD_PrintString+0x6>
    28e6:	0f 92       	push	r0
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	9b 83       	std	Y+3, r25	; 0x03
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    28f0:	19 82       	std	Y+1, r1	; 0x01
    28f2:	0e c0       	rjmp	.+28     	; 0x2910 <LCD_PrintString+0x30>
    while (str[i] != '\0')
    {
        LCD_voidSendChar(str[i]);
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	9b 81       	ldd	r25, Y+3	; 0x03
    28fe:	fc 01       	movw	r30, r24
    2900:	e2 0f       	add	r30, r18
    2902:	f3 1f       	adc	r31, r19
    2904:	80 81       	ld	r24, Z
    2906:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_voidSendChar>
        i++;
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	8f 5f       	subi	r24, 0xFF	; 255
    290e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_PrintString(const char *str)
{
    u8 i = 0;
    while (str[i] != '\0')
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	fc 01       	movw	r30, r24
    291c:	e2 0f       	add	r30, r18
    291e:	f3 1f       	adc	r31, r19
    2920:	80 81       	ld	r24, Z
    2922:	88 23       	and	r24, r24
    2924:	39 f7       	brne	.-50     	; 0x28f4 <LCD_PrintString+0x14>
    void LCD_voidClr()
    {
        LCD_voidSendCmnd(0x01);
        _delay_ms(2);
    }
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <LCD_voidClr.1385>:
        LCD_voidSendChar(str[i]);
        i++;
    }

    void LCD_voidClr()
    {
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	2e 97       	sbiw	r28, 0x0e	; 14
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
        LCD_voidSendCmnd(0x01);
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a0 e0       	ldi	r26, 0x00	; 0
    2952:	b0 e4       	ldi	r27, 0x40	; 64
    2954:	8b 87       	std	Y+11, r24	; 0x0b
    2956:	9c 87       	std	Y+12, r25	; 0x0c
    2958:	ad 87       	std	Y+13, r26	; 0x0d
    295a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	6b 85       	ldd	r22, Y+11	; 0x0b
    295e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2960:	8d 85       	ldd	r24, Y+13	; 0x0d
    2962:	9e 85       	ldd	r25, Y+14	; 0x0e
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a ef       	ldi	r20, 0xFA	; 250
    296a:	54 e4       	ldi	r21, 0x44	; 68
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	8f 83       	std	Y+7, r24	; 0x07
    2976:	98 87       	std	Y+8, r25	; 0x08
    2978:	a9 87       	std	Y+9, r26	; 0x09
    297a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    297c:	6f 81       	ldd	r22, Y+7	; 0x07
    297e:	78 85       	ldd	r23, Y+8	; 0x08
    2980:	89 85       	ldd	r24, Y+9	; 0x09
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <LCD_voidClr.1385+0x6c>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	3f c0       	rjmp	.+126    	; 0x2a1c <LCD_voidClr.1385+0xea>
	else if (__tmp > 65535)
    299e:	6f 81       	ldd	r22, Y+7	; 0x07
    29a0:	78 85       	ldd	r23, Y+8	; 0x08
    29a2:	89 85       	ldd	r24, Y+9	; 0x09
    29a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	4c f5       	brge	.+82     	; 0x2a08 <LCD_voidClr.1385+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e2       	ldi	r20, 0x20	; 32
    29c4:	51 e4       	ldi	r21, 0x41	; 65
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <LCD_voidClr.1385+0xcc>
    29e0:	88 ec       	ldi	r24, 0xC8	; 200
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9c 83       	std	Y+4, r25	; 0x04
    29e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_voidClr.1385+0xba>
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <LCD_voidClr.1385+0xae>
    2a06:	14 c0       	rjmp	.+40     	; 0x2a30 <LCD_voidClr.1385+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0a:	78 85       	ldd	r23, Y+8	; 0x08
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	9a 83       	std	Y+2, r25	; 0x02
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_voidClr.1385+0xf6>
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
    }
    2a30:	2e 96       	adiw	r28, 0x0e	; 14
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <LCD_u8GoToXY>:
}
u8 LCD_u8GoToXY(u8 COPY_u8LineNum, u8 Copy_u8location)
{
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <LCD_u8GoToXY+0x6>
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <LCD_u8GoToXY+0x8>
    2a4a:	0f 92       	push	r0
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	8a 83       	std	Y+2, r24	; 0x02
    2a52:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Errorstate = STD_TYPES_OK;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	89 83       	std	Y+1, r24	; 0x01
    if (COPY_u8LineNum <= 39)
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	88 32       	cpi	r24, 0x28	; 40
    2a5c:	e0 f4       	brcc	.+56     	; 0x2a96 <LCD_u8GoToXY+0x54>
    {
        switch (COPY_u8LineNum)
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	3d 83       	std	Y+5, r19	; 0x05
    2a66:	2c 83       	std	Y+4, r18	; 0x04
    2a68:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	31 f0       	breq	.+12     	; 0x2a7c <LCD_u8GoToXY+0x3a>
    2a70:	2c 81       	ldd	r18, Y+4	; 0x04
    2a72:	3d 81       	ldd	r19, Y+5	; 0x05
    2a74:	21 30       	cpi	r18, 0x01	; 1
    2a76:	31 05       	cpc	r19, r1
    2a78:	31 f0       	breq	.+12     	; 0x2a86 <LCD_u8GoToXY+0x44>
    2a7a:	0a c0       	rjmp	.+20     	; 0x2a90 <LCD_u8GoToXY+0x4e>
        {
        case LCD_u8_LINE1:
            LCD_voidSendCmnd(0x80 + Copy_u8location);
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	80 58       	subi	r24, 0x80	; 128
    2a80:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
    2a84:	0a c0       	rjmp	.+20     	; 0x2a9a <LCD_u8GoToXY+0x58>
            break;
        case LCD_u8_LINE2:
            LCD_voidSendCmnd(0xC0 + Copy_u8location);
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	80 54       	subi	r24, 0x40	; 64
    2a8a:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
    2a8e:	05 c0       	rjmp	.+10     	; 0x2a9a <LCD_u8GoToXY+0x58>
            break;
        default:
            local_u8Errorstate = STD_TYPES_OK;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <LCD_u8GoToXY+0x58>
        }
    }
    else
    {
        local_u8Errorstate = STD_TYPES_OK;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_u8Errorstate;
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <STEPPER_MOTOR_move>:
//	DIO_voidSetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
//
//}

u8 STEPPER_MOTOR_move(u8 copy_u8direction,u8 copy_u8angle)
{
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	c9 57       	subi	r28, 0x79	; 121
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e8 58       	subi	r30, 0x88	; 136
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 83       	st	Z, r24
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e7 58       	subi	r30, 0x87	; 135
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 83       	st	Z, r22
    u8 LocalErrorState = STD_TYPES_OK;
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e9 58       	subi	r30, 0x89	; 137
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	80 83       	st	Z, r24
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e7 58       	subi	r30, 0x87	; 135
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 2f       	mov	r24, r24
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a0 e0       	ldi	r26, 0x00	; 0
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	07 2e       	mov	r0, r23
    2af2:	7b e0       	ldi	r23, 0x0B	; 11
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	aa 1f       	adc	r26, r26
    2afa:	bb 1f       	adc	r27, r27
    2afc:	7a 95       	dec	r23
    2afe:	d1 f7       	brne	.-12     	; 0x2af4 <STEPPER_MOTOR_move+0x48>
    2b00:	70 2d       	mov	r23, r0
    2b02:	28 e6       	ldi	r18, 0x68	; 104
    2b04:	31 e0       	ldi	r19, 0x01	; 1
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 9b 24 	call	0x4936	; 0x4936 <__udivmodsi4>
    2b12:	da 01       	movw	r26, r20
    2b14:	c9 01       	movw	r24, r18
    2b16:	fe 01       	movw	r30, r28
    2b18:	ea 58       	subi	r30, 0x8A	; 138
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 83       	st	Z, r24
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e8 58       	subi	r30, 0x88	; 136
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 81       	ld	r24, Z
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	39 f0       	breq	.+14     	; 0x2b38 <STEPPER_MOTOR_move+0x8c>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e8 58       	subi	r30, 0x88	; 136
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	88 23       	and	r24, r24
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <STEPPER_MOTOR_move+0x8c>
    2b36:	58 c5       	rjmp	.+2736   	; 0x35e8 <STEPPER_MOTOR_move+0xb3c>
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e8 58       	subi	r30, 0x88	; 136
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <STEPPER_MOTOR_move+0x9a>
    2b44:	10 c3       	rjmp	.+1568   	; 0x3166 <STEPPER_MOTOR_move+0x6ba>
            {
                for(int i=0; i>=Local_u8Steps; i++)
    2b46:	fe 01       	movw	r30, r28
    2b48:	ec 58       	subi	r30, 0x8C	; 140
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	11 82       	std	Z+1, r1	; 0x01
    2b4e:	10 82       	st	Z, r1
    2b50:	fa c2       	rjmp	.+1524   	; 0x3146 <STEPPER_MOTOR_move+0x69a>
                {
                    
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	63 e0       	ldi	r22, 0x03	; 3
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	64 e0       	ldi	r22, 0x04	; 4
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	65 e0       	ldi	r22, 0x05	; 5
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	66 e0       	ldi	r22, 0x06	; 6
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e3 59       	subi	r30, 0x93	; 147
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e2       	ldi	r26, 0x20	; 32
    2b86:	b1 e4       	ldi	r27, 0x41	; 65
    2b88:	80 83       	st	Z, r24
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	a2 83       	std	Z+2, r26	; 0x02
    2b8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	8e 01       	movw	r16, r28
    2b92:	07 59       	subi	r16, 0x97	; 151
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	fe 01       	movw	r30, r28
    2b98:	e3 59       	subi	r30, 0x93	; 147
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	60 81       	ld	r22, Z
    2b9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a e7       	ldi	r20, 0x7A	; 122
    2baa:	53 e4       	ldi	r21, 0x43	; 67
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	80 83       	st	Z, r24
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	a2 83       	std	Z+2, r26	; 0x02
    2bbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e7 59       	subi	r30, 0x97	; 151
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	60 81       	ld	r22, Z
    2bc6:	71 81       	ldd	r23, Z+1	; 0x01
    2bc8:	82 81       	ldd	r24, Z+2	; 0x02
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	44 f4       	brge	.+16     	; 0x2bec <STEPPER_MOTOR_move+0x140>
		__ticks = 1;
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e9 59       	subi	r30, 0x99	; 153
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	80 83       	st	Z, r24
    2bea:	64 c0       	rjmp	.+200    	; 0x2cb4 <STEPPER_MOTOR_move+0x208>
	else if (__tmp > 65535)
    2bec:	fe 01       	movw	r30, r28
    2bee:	e7 59       	subi	r30, 0x97	; 151
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	60 81       	ld	r22, Z
    2bf4:	71 81       	ldd	r23, Z+1	; 0x01
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	93 81       	ldd	r25, Z+3	; 0x03
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	57 e4       	ldi	r21, 0x47	; 71
    2c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	0c f0       	brlt	.+2      	; 0x2c0c <STEPPER_MOTOR_move+0x160>
    2c0a:	43 c0       	rjmp	.+134    	; 0x2c92 <STEPPER_MOTOR_move+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e3 59       	subi	r30, 0x93	; 147
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	8e 01       	movw	r16, r28
    2c2c:	09 59       	subi	r16, 0x99	; 153
    2c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
    2c42:	1f c0       	rjmp	.+62     	; 0x2c82 <STEPPER_MOTOR_move+0x1d6>
    2c44:	fe 01       	movw	r30, r28
    2c46:	eb 59       	subi	r30, 0x9B	; 155
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	89 e1       	ldi	r24, 0x19	; 25
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    2c52:	fe 01       	movw	r30, r28
    2c54:	eb 59       	subi	r30, 0x9B	; 155
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	91 81       	ldd	r25, Z+1	; 0x01
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <STEPPER_MOTOR_move+0x1b0>
    2c60:	fe 01       	movw	r30, r28
    2c62:	eb 59       	subi	r30, 0x9B	; 155
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6a:	de 01       	movw	r26, r28
    2c6c:	a9 59       	subi	r26, 0x99	; 153
    2c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 59       	subi	r30, 0x99	; 153
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	11 96       	adiw	r26, 0x01	; 1
    2c7e:	9c 93       	st	X, r25
    2c80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c82:	fe 01       	movw	r30, r28
    2c84:	e9 59       	subi	r30, 0x99	; 153
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	d1 f6       	brne	.-76     	; 0x2c44 <STEPPER_MOTOR_move+0x198>
    2c90:	27 c0       	rjmp	.+78     	; 0x2ce0 <STEPPER_MOTOR_move+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	8e 01       	movw	r16, r28
    2c94:	09 59       	subi	r16, 0x99	; 153
    2c96:	1f 4f       	sbci	r17, 0xFF	; 255
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e7 59       	subi	r30, 0x97	; 151
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	f8 01       	movw	r30, r16
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	de 01       	movw	r26, r28
    2cb6:	ad 59       	subi	r26, 0x9D	; 157
    2cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e9 59       	subi	r30, 0x99	; 153
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	80 81       	ld	r24, Z
    2cc2:	91 81       	ldd	r25, Z+1	; 0x01
    2cc4:	8d 93       	st	X+, r24
    2cc6:	9c 93       	st	X, r25
    2cc8:	fe 01       	movw	r30, r28
    2cca:	ed 59       	subi	r30, 0x9D	; 157
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <STEPPER_MOTOR_move+0x226>
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ed 59       	subi	r30, 0x9D	; 157
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	63 e0       	ldi	r22, 0x03	; 3
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	64 e0       	ldi	r22, 0x04	; 4
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	65 e0       	ldi	r22, 0x05	; 5
    2cf8:	41 e0       	ldi	r20, 0x01	; 1
    2cfa:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
    2d00:	66 e0       	ldi	r22, 0x06	; 6
    2d02:	41 e0       	ldi	r20, 0x01	; 1
    2d04:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e1 5a       	subi	r30, 0xA1	; 161
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	a0 e2       	ldi	r26, 0x20	; 32
    2d14:	b1 e4       	ldi	r27, 0x41	; 65
    2d16:	80 83       	st	Z, r24
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	a2 83       	std	Z+2, r26	; 0x02
    2d1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1e:	8e 01       	movw	r16, r28
    2d20:	05 5a       	subi	r16, 0xA5	; 165
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	fe 01       	movw	r30, r28
    2d26:	e1 5a       	subi	r30, 0xA1	; 161
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	4a e7       	ldi	r20, 0x7A	; 122
    2d38:	53 e4       	ldi	r21, 0x43	; 67
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 83       	st	Z, r24
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	a2 83       	std	Z+2, r26	; 0x02
    2d4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e5 5a       	subi	r30, 0xA5	; 165
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e8       	ldi	r20, 0x80	; 128
    2d60:	5f e3       	ldi	r21, 0x3F	; 63
    2d62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d66:	88 23       	and	r24, r24
    2d68:	44 f4       	brge	.+16     	; 0x2d7a <STEPPER_MOTOR_move+0x2ce>
		__ticks = 1;
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e7 5a       	subi	r30, 0xA7	; 167
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	80 83       	st	Z, r24
    2d78:	64 c0       	rjmp	.+200    	; 0x2e42 <STEPPER_MOTOR_move+0x396>
	else if (__tmp > 65535)
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e5 5a       	subi	r30, 0xA5	; 165
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	0c f0       	brlt	.+2      	; 0x2d9a <STEPPER_MOTOR_move+0x2ee>
    2d98:	43 c0       	rjmp	.+134    	; 0x2e20 <STEPPER_MOTOR_move+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e1 5a       	subi	r30, 0xA1	; 161
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	8e 01       	movw	r16, r28
    2dba:	07 5a       	subi	r16, 0xA7	; 167
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	f8 01       	movw	r30, r16
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	80 83       	st	Z, r24
    2dd0:	1f c0       	rjmp	.+62     	; 0x2e10 <STEPPER_MOTOR_move+0x364>
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e9 5a       	subi	r30, 0xA9	; 169
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	89 e1       	ldi	r24, 0x19	; 25
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
    2de0:	fe 01       	movw	r30, r28
    2de2:	e9 5a       	subi	r30, 0xA9	; 169
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <STEPPER_MOTOR_move+0x33e>
    2dee:	fe 01       	movw	r30, r28
    2df0:	e9 5a       	subi	r30, 0xA9	; 169
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df8:	de 01       	movw	r26, r28
    2dfa:	a7 5a       	subi	r26, 0xA7	; 167
    2dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e7 5a       	subi	r30, 0xA7	; 167
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	11 96       	adiw	r26, 0x01	; 1
    2e0c:	9c 93       	st	X, r25
    2e0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	fe 01       	movw	r30, r28
    2e12:	e7 5a       	subi	r30, 0xA7	; 167
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	d1 f6       	brne	.-76     	; 0x2dd2 <STEPPER_MOTOR_move+0x326>
    2e1e:	27 c0       	rjmp	.+78     	; 0x2e6e <STEPPER_MOTOR_move+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	8e 01       	movw	r16, r28
    2e22:	07 5a       	subi	r16, 0xA7	; 167
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	e5 5a       	subi	r30, 0xA5	; 165
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	60 81       	ld	r22, Z
    2e2e:	71 81       	ldd	r23, Z+1	; 0x01
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	f8 01       	movw	r30, r16
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    2e42:	de 01       	movw	r26, r28
    2e44:	ab 5a       	subi	r26, 0xAB	; 171
    2e46:	bf 4f       	sbci	r27, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e7 5a       	subi	r30, 0xA7	; 167
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	8d 93       	st	X+, r24
    2e54:	9c 93       	st	X, r25
    2e56:	fe 01       	movw	r30, r28
    2e58:	eb 5a       	subi	r30, 0xAB	; 171
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <STEPPER_MOTOR_move+0x3b4>
    2e64:	fe 01       	movw	r30, r28
    2e66:	eb 5a       	subi	r30, 0xAB	; 171
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2e6e:	82 e0       	ldi	r24, 0x02	; 2
    2e70:	63 e0       	ldi	r22, 0x03	; 3
    2e72:	41 e0       	ldi	r20, 0x01	; 1
    2e74:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2e78:	82 e0       	ldi	r24, 0x02	; 2
    2e7a:	64 e0       	ldi	r22, 0x04	; 4
    2e7c:	41 e0       	ldi	r20, 0x01	; 1
    2e7e:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	65 e0       	ldi	r22, 0x05	; 5
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	66 e0       	ldi	r22, 0x06	; 6
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    2e96:	fe 01       	movw	r30, r28
    2e98:	ef 5a       	subi	r30, 0xAF	; 175
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	a0 e2       	ldi	r26, 0x20	; 32
    2ea2:	b1 e4       	ldi	r27, 0x41	; 65
    2ea4:	80 83       	st	Z, r24
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	a2 83       	std	Z+2, r26	; 0x02
    2eaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eac:	8e 01       	movw	r16, r28
    2eae:	03 5b       	subi	r16, 0xB3	; 179
    2eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ef 5a       	subi	r30, 0xAF	; 175
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	60 81       	ld	r22, Z
    2eba:	71 81       	ldd	r23, Z+1	; 0x01
    2ebc:	82 81       	ldd	r24, Z+2	; 0x02
    2ebe:	93 81       	ldd	r25, Z+3	; 0x03
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	4a e7       	ldi	r20, 0x7A	; 122
    2ec6:	53 e4       	ldi	r21, 0x43	; 67
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	f8 01       	movw	r30, r16
    2ed2:	80 83       	st	Z, r24
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	a2 83       	std	Z+2, r26	; 0x02
    2ed8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eda:	fe 01       	movw	r30, r28
    2edc:	e3 5b       	subi	r30, 0xB3	; 179
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e8       	ldi	r20, 0x80	; 128
    2eee:	5f e3       	ldi	r21, 0x3F	; 63
    2ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ef4:	88 23       	and	r24, r24
    2ef6:	44 f4       	brge	.+16     	; 0x2f08 <STEPPER_MOTOR_move+0x45c>
		__ticks = 1;
    2ef8:	fe 01       	movw	r30, r28
    2efa:	e5 5b       	subi	r30, 0xB5	; 181
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	64 c0       	rjmp	.+200    	; 0x2fd0 <STEPPER_MOTOR_move+0x524>
	else if (__tmp > 65535)
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e3 5b       	subi	r30, 0xB3	; 179
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	3f ef       	ldi	r19, 0xFF	; 255
    2f1a:	4f e7       	ldi	r20, 0x7F	; 127
    2f1c:	57 e4       	ldi	r21, 0x47	; 71
    2f1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f22:	18 16       	cp	r1, r24
    2f24:	0c f0       	brlt	.+2      	; 0x2f28 <STEPPER_MOTOR_move+0x47c>
    2f26:	43 c0       	rjmp	.+134    	; 0x2fae <STEPPER_MOTOR_move+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ef 5a       	subi	r30, 0xAF	; 175
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e2       	ldi	r20, 0x20	; 32
    2f3c:	51 e4       	ldi	r21, 0x41	; 65
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	8e 01       	movw	r16, r28
    2f48:	05 5b       	subi	r16, 0xB5	; 181
    2f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	cd 01       	movw	r24, r26
    2f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	f8 01       	movw	r30, r16
    2f5a:	91 83       	std	Z+1, r25	; 0x01
    2f5c:	80 83       	st	Z, r24
    2f5e:	1f c0       	rjmp	.+62     	; 0x2f9e <STEPPER_MOTOR_move+0x4f2>
    2f60:	fe 01       	movw	r30, r28
    2f62:	e7 5b       	subi	r30, 0xB7	; 183
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	89 e1       	ldi	r24, 0x19	; 25
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	80 83       	st	Z, r24
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e7 5b       	subi	r30, 0xB7	; 183
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <STEPPER_MOTOR_move+0x4cc>
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e7 5b       	subi	r30, 0xB7	; 183
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f86:	de 01       	movw	r26, r28
    2f88:	a5 5b       	subi	r26, 0xB5	; 181
    2f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e5 5b       	subi	r30, 0xB5	; 181
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	80 81       	ld	r24, Z
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	11 96       	adiw	r26, 0x01	; 1
    2f9a:	9c 93       	st	X, r25
    2f9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e5 5b       	subi	r30, 0xB5	; 181
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	d1 f6       	brne	.-76     	; 0x2f60 <STEPPER_MOTOR_move+0x4b4>
    2fac:	27 c0       	rjmp	.+78     	; 0x2ffc <STEPPER_MOTOR_move+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	8e 01       	movw	r16, r28
    2fb0:	05 5b       	subi	r16, 0xB5	; 181
    2fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e3 5b       	subi	r30, 0xB3	; 179
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	60 81       	ld	r22, Z
    2fbc:	71 81       	ldd	r23, Z+1	; 0x01
    2fbe:	82 81       	ldd	r24, Z+2	; 0x02
    2fc0:	93 81       	ldd	r25, Z+3	; 0x03
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	f8 01       	movw	r30, r16
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
    2fd0:	de 01       	movw	r26, r28
    2fd2:	a9 5b       	subi	r26, 0xB9	; 185
    2fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e5 5b       	subi	r30, 0xB5	; 181
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	8d 93       	st	X+, r24
    2fe2:	9c 93       	st	X, r25
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e9 5b       	subi	r30, 0xB9	; 185
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <STEPPER_MOTOR_move+0x542>
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e9 5b       	subi	r30, 0xB9	; 185
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
    2ffe:	63 e0       	ldi	r22, 0x03	; 3
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    3006:	82 e0       	ldi	r24, 0x02	; 2
    3008:	64 e0       	ldi	r22, 0x04	; 4
    300a:	41 e0       	ldi	r20, 0x01	; 1
    300c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    3010:	82 e0       	ldi	r24, 0x02	; 2
    3012:	65 e0       	ldi	r22, 0x05	; 5
    3014:	41 e0       	ldi	r20, 0x01	; 1
    3016:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	66 e0       	ldi	r22, 0x06	; 6
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    3024:	fe 01       	movw	r30, r28
    3026:	ed 5b       	subi	r30, 0xBD	; 189
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	a0 e2       	ldi	r26, 0x20	; 32
    3030:	b1 e4       	ldi	r27, 0x41	; 65
    3032:	80 83       	st	Z, r24
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	a2 83       	std	Z+2, r26	; 0x02
    3038:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303a:	8e 01       	movw	r16, r28
    303c:	01 5c       	subi	r16, 0xC1	; 193
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
    3040:	fe 01       	movw	r30, r28
    3042:	ed 5b       	subi	r30, 0xBD	; 189
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	60 81       	ld	r22, Z
    3048:	71 81       	ldd	r23, Z+1	; 0x01
    304a:	82 81       	ldd	r24, Z+2	; 0x02
    304c:	93 81       	ldd	r25, Z+3	; 0x03
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	4a e7       	ldi	r20, 0x7A	; 122
    3054:	53 e4       	ldi	r21, 0x43	; 67
    3056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	f8 01       	movw	r30, r16
    3060:	80 83       	st	Z, r24
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	a2 83       	std	Z+2, r26	; 0x02
    3066:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3068:	fe 01       	movw	r30, r28
    306a:	ff 96       	adiw	r30, 0x3f	; 63
    306c:	60 81       	ld	r22, Z
    306e:	71 81       	ldd	r23, Z+1	; 0x01
    3070:	82 81       	ldd	r24, Z+2	; 0x02
    3072:	93 81       	ldd	r25, Z+3	; 0x03
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e8       	ldi	r20, 0x80	; 128
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3080:	88 23       	and	r24, r24
    3082:	2c f4       	brge	.+10     	; 0x308e <STEPPER_MOTOR_move+0x5e2>
		__ticks = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	9e af       	std	Y+62, r25	; 0x3e
    308a:	8d af       	std	Y+61, r24	; 0x3d
    308c:	46 c0       	rjmp	.+140    	; 0x311a <STEPPER_MOTOR_move+0x66e>
	else if (__tmp > 65535)
    308e:	fe 01       	movw	r30, r28
    3090:	ff 96       	adiw	r30, 0x3f	; 63
    3092:	60 81       	ld	r22, Z
    3094:	71 81       	ldd	r23, Z+1	; 0x01
    3096:	82 81       	ldd	r24, Z+2	; 0x02
    3098:	93 81       	ldd	r25, Z+3	; 0x03
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	4f e7       	ldi	r20, 0x7F	; 127
    30a0:	57 e4       	ldi	r21, 0x47	; 71
    30a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	64 f5       	brge	.+88     	; 0x3102 <STEPPER_MOTOR_move+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30aa:	fe 01       	movw	r30, r28
    30ac:	ed 5b       	subi	r30, 0xBD	; 189
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	60 81       	ld	r22, Z
    30b2:	71 81       	ldd	r23, Z+1	; 0x01
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e2       	ldi	r20, 0x20	; 32
    30be:	51 e4       	ldi	r21, 0x41	; 65
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9e af       	std	Y+62, r25	; 0x3e
    30d6:	8d af       	std	Y+61, r24	; 0x3d
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <STEPPER_MOTOR_move+0x64c>
    30da:	89 e1       	ldi	r24, 0x19	; 25
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9c af       	std	Y+60, r25	; 0x3c
    30e0:	8b af       	std	Y+59, r24	; 0x3b
    30e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    30e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <STEPPER_MOTOR_move+0x63a>
    30ea:	9c af       	std	Y+60, r25	; 0x3c
    30ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9e af       	std	Y+62, r25	; 0x3e
    30f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    30fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f7       	brne	.-38     	; 0x30da <STEPPER_MOTOR_move+0x62e>
    3100:	16 c0       	rjmp	.+44     	; 0x312e <STEPPER_MOTOR_move+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3102:	fe 01       	movw	r30, r28
    3104:	ff 96       	adiw	r30, 0x3f	; 63
    3106:	60 81       	ld	r22, Z
    3108:	71 81       	ldd	r23, Z+1	; 0x01
    310a:	82 81       	ldd	r24, Z+2	; 0x02
    310c:	93 81       	ldd	r25, Z+3	; 0x03
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9e af       	std	Y+62, r25	; 0x3e
    3118:	8d af       	std	Y+61, r24	; 0x3d
    311a:	8d ad       	ldd	r24, Y+61	; 0x3d
    311c:	9e ad       	ldd	r25, Y+62	; 0x3e
    311e:	9a af       	std	Y+58, r25	; 0x3a
    3120:	89 af       	std	Y+57, r24	; 0x39
    3122:	89 ad       	ldd	r24, Y+57	; 0x39
    3124:	9a ad       	ldd	r25, Y+58	; 0x3a
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <STEPPER_MOTOR_move+0x67a>
    312a:	9a af       	std	Y+58, r25	; 0x3a
    312c:	89 af       	std	Y+57, r24	; 0x39
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
            {
                for(int i=0; i>=Local_u8Steps; i++)
    312e:	de 01       	movw	r26, r28
    3130:	ac 58       	subi	r26, 0x8C	; 140
    3132:	bf 4f       	sbci	r27, 0xFF	; 255
    3134:	fe 01       	movw	r30, r28
    3136:	ec 58       	subi	r30, 0x8C	; 140
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	80 81       	ld	r24, Z
    313c:	91 81       	ldd	r25, Z+1	; 0x01
    313e:	01 96       	adiw	r24, 0x01	; 1
    3140:	11 96       	adiw	r26, 0x01	; 1
    3142:	9c 93       	st	X, r25
    3144:	8e 93       	st	-X, r24
    3146:	fe 01       	movw	r30, r28
    3148:	ea 58       	subi	r30, 0x8A	; 138
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	fe 01       	movw	r30, r28
    3154:	ec 58       	subi	r30, 0x8C	; 140
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	82 17       	cp	r24, r18
    315e:	93 07       	cpc	r25, r19
    3160:	0c f0       	brlt	.+2      	; 0x3164 <STEPPER_MOTOR_move+0x6b8>
    3162:	f7 cc       	rjmp	.-1554   	; 0x2b52 <STEPPER_MOTOR_move+0xa6>
    3164:	45 c2       	rjmp	.+1162   	; 0x35f0 <STEPPER_MOTOR_move+0xb44>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
    3166:	fe 01       	movw	r30, r28
    3168:	e8 58       	subi	r30, 0x88	; 136
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	88 23       	and	r24, r24
    3170:	09 f0       	breq	.+2      	; 0x3174 <STEPPER_MOTOR_move+0x6c8>
    3172:	3e c2       	rjmp	.+1148   	; 0x35f0 <STEPPER_MOTOR_move+0xb44>
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    3174:	fe 01       	movw	r30, r28
    3176:	ee 58       	subi	r30, 0x8E	; 142
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	11 82       	std	Z+1, r1	; 0x01
    317c:	10 82       	st	Z, r1
    317e:	24 c2       	rjmp	.+1096   	; 0x35c8 <STEPPER_MOTOR_move+0xb1c>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	63 e0       	ldi	r22, 0x03	; 3
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    318a:	82 e0       	ldi	r24, 0x02	; 2
    318c:	64 e0       	ldi	r22, 0x04	; 4
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	65 e0       	ldi	r22, 0x05	; 5
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	66 e0       	ldi	r22, 0x06	; 6
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	a0 e2       	ldi	r26, 0x20	; 32
    31ae:	b1 e4       	ldi	r27, 0x41	; 65
    31b0:	8d ab       	std	Y+53, r24	; 0x35
    31b2:	9e ab       	std	Y+54, r25	; 0x36
    31b4:	af ab       	std	Y+55, r26	; 0x37
    31b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b8:	6d a9       	ldd	r22, Y+53	; 0x35
    31ba:	7e a9       	ldd	r23, Y+54	; 0x36
    31bc:	8f a9       	ldd	r24, Y+55	; 0x37
    31be:	98 ad       	ldd	r25, Y+56	; 0x38
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a e7       	ldi	r20, 0x7A	; 122
    31c6:	53 e4       	ldi	r21, 0x43	; 67
    31c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	89 ab       	std	Y+49, r24	; 0x31
    31d2:	9a ab       	std	Y+50, r25	; 0x32
    31d4:	ab ab       	std	Y+51, r26	; 0x33
    31d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31d8:	69 a9       	ldd	r22, Y+49	; 0x31
    31da:	7a a9       	ldd	r23, Y+50	; 0x32
    31dc:	8b a9       	ldd	r24, Y+51	; 0x33
    31de:	9c a9       	ldd	r25, Y+52	; 0x34
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	2c f4       	brge	.+10     	; 0x31fa <STEPPER_MOTOR_move+0x74e>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	98 ab       	std	Y+48, r25	; 0x30
    31f6:	8f a7       	std	Y+47, r24	; 0x2f
    31f8:	3f c0       	rjmp	.+126    	; 0x3278 <STEPPER_MOTOR_move+0x7cc>
	else if (__tmp > 65535)
    31fa:	69 a9       	ldd	r22, Y+49	; 0x31
    31fc:	7a a9       	ldd	r23, Y+50	; 0x32
    31fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3200:	9c a9       	ldd	r25, Y+52	; 0x34
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	4f e7       	ldi	r20, 0x7F	; 127
    3208:	57 e4       	ldi	r21, 0x47	; 71
    320a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320e:	18 16       	cp	r1, r24
    3210:	4c f5       	brge	.+82     	; 0x3264 <STEPPER_MOTOR_move+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3212:	6d a9       	ldd	r22, Y+53	; 0x35
    3214:	7e a9       	ldd	r23, Y+54	; 0x36
    3216:	8f a9       	ldd	r24, Y+55	; 0x37
    3218:	98 ad       	ldd	r25, Y+56	; 0x38
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e2       	ldi	r20, 0x20	; 32
    3220:	51 e4       	ldi	r21, 0x41	; 65
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	bc 01       	movw	r22, r24
    322c:	cd 01       	movw	r24, r26
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	98 ab       	std	Y+48, r25	; 0x30
    3238:	8f a7       	std	Y+47, r24	; 0x2f
    323a:	0f c0       	rjmp	.+30     	; 0x325a <STEPPER_MOTOR_move+0x7ae>
    323c:	89 e1       	ldi	r24, 0x19	; 25
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9e a7       	std	Y+46, r25	; 0x2e
    3242:	8d a7       	std	Y+45, r24	; 0x2d
    3244:	8d a5       	ldd	r24, Y+45	; 0x2d
    3246:	9e a5       	ldd	r25, Y+46	; 0x2e
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <STEPPER_MOTOR_move+0x79c>
    324c:	9e a7       	std	Y+46, r25	; 0x2e
    324e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3250:	8f a5       	ldd	r24, Y+47	; 0x2f
    3252:	98 a9       	ldd	r25, Y+48	; 0x30
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	98 ab       	std	Y+48, r25	; 0x30
    3258:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325a:	8f a5       	ldd	r24, Y+47	; 0x2f
    325c:	98 a9       	ldd	r25, Y+48	; 0x30
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	69 f7       	brne	.-38     	; 0x323c <STEPPER_MOTOR_move+0x790>
    3262:	14 c0       	rjmp	.+40     	; 0x328c <STEPPER_MOTOR_move+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3264:	69 a9       	ldd	r22, Y+49	; 0x31
    3266:	7a a9       	ldd	r23, Y+50	; 0x32
    3268:	8b a9       	ldd	r24, Y+51	; 0x33
    326a:	9c a9       	ldd	r25, Y+52	; 0x34
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	98 ab       	std	Y+48, r25	; 0x30
    3276:	8f a7       	std	Y+47, r24	; 0x2f
    3278:	8f a5       	ldd	r24, Y+47	; 0x2f
    327a:	98 a9       	ldd	r25, Y+48	; 0x30
    327c:	9c a7       	std	Y+44, r25	; 0x2c
    327e:	8b a7       	std	Y+43, r24	; 0x2b
    3280:	8b a5       	ldd	r24, Y+43	; 0x2b
    3282:	9c a5       	ldd	r25, Y+44	; 0x2c
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <STEPPER_MOTOR_move+0x7d8>
    3288:	9c a7       	std	Y+44, r25	; 0x2c
    328a:	8b a7       	std	Y+43, r24	; 0x2b
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	63 e0       	ldi	r22, 0x03	; 3
    3290:	41 e0       	ldi	r20, 0x01	; 1
    3292:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	64 e0       	ldi	r22, 0x04	; 4
    329a:	41 e0       	ldi	r20, 0x01	; 1
    329c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    32a0:	82 e0       	ldi	r24, 0x02	; 2
    32a2:	65 e0       	ldi	r22, 0x05	; 5
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    32aa:	82 e0       	ldi	r24, 0x02	; 2
    32ac:	66 e0       	ldi	r22, 0x06	; 6
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	a0 e2       	ldi	r26, 0x20	; 32
    32ba:	b1 e4       	ldi	r27, 0x41	; 65
    32bc:	8f a3       	std	Y+39, r24	; 0x27
    32be:	98 a7       	std	Y+40, r25	; 0x28
    32c0:	a9 a7       	std	Y+41, r26	; 0x29
    32c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	6f a1       	ldd	r22, Y+39	; 0x27
    32c6:	78 a5       	ldd	r23, Y+40	; 0x28
    32c8:	89 a5       	ldd	r24, Y+41	; 0x29
    32ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a e7       	ldi	r20, 0x7A	; 122
    32d2:	53 e4       	ldi	r21, 0x43	; 67
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8b a3       	std	Y+35, r24	; 0x23
    32de:	9c a3       	std	Y+36, r25	; 0x24
    32e0:	ad a3       	std	Y+37, r26	; 0x25
    32e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32e4:	6b a1       	ldd	r22, Y+35	; 0x23
    32e6:	7c a1       	ldd	r23, Y+36	; 0x24
    32e8:	8d a1       	ldd	r24, Y+37	; 0x25
    32ea:	9e a1       	ldd	r25, Y+38	; 0x26
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <STEPPER_MOTOR_move+0x85a>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9a a3       	std	Y+34, r25	; 0x22
    3302:	89 a3       	std	Y+33, r24	; 0x21
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <STEPPER_MOTOR_move+0x8d8>
	else if (__tmp > 65535)
    3306:	6b a1       	ldd	r22, Y+35	; 0x23
    3308:	7c a1       	ldd	r23, Y+36	; 0x24
    330a:	8d a1       	ldd	r24, Y+37	; 0x25
    330c:	9e a1       	ldd	r25, Y+38	; 0x26
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <STEPPER_MOTOR_move+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	6f a1       	ldd	r22, Y+39	; 0x27
    3320:	78 a5       	ldd	r23, Y+40	; 0x28
    3322:	89 a5       	ldd	r24, Y+41	; 0x29
    3324:	9a a5       	ldd	r25, Y+42	; 0x2a
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9a a3       	std	Y+34, r25	; 0x22
    3344:	89 a3       	std	Y+33, r24	; 0x21
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <STEPPER_MOTOR_move+0x8ba>
    3348:	89 e1       	ldi	r24, 0x19	; 25
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	98 a3       	std	Y+32, r25	; 0x20
    334e:	8f 8f       	std	Y+31, r24	; 0x1f
    3350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3352:	98 a1       	ldd	r25, Y+32	; 0x20
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <STEPPER_MOTOR_move+0x8a8>
    3358:	98 a3       	std	Y+32, r25	; 0x20
    335a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	89 a1       	ldd	r24, Y+33	; 0x21
    335e:	9a a1       	ldd	r25, Y+34	; 0x22
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9a a3       	std	Y+34, r25	; 0x22
    3364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	89 a1       	ldd	r24, Y+33	; 0x21
    3368:	9a a1       	ldd	r25, Y+34	; 0x22
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <STEPPER_MOTOR_move+0x89c>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <STEPPER_MOTOR_move+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6b a1       	ldd	r22, Y+35	; 0x23
    3372:	7c a1       	ldd	r23, Y+36	; 0x24
    3374:	8d a1       	ldd	r24, Y+37	; 0x25
    3376:	9e a1       	ldd	r25, Y+38	; 0x26
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9a a3       	std	Y+34, r25	; 0x22
    3382:	89 a3       	std	Y+33, r24	; 0x21
    3384:	89 a1       	ldd	r24, Y+33	; 0x21
    3386:	9a a1       	ldd	r25, Y+34	; 0x22
    3388:	9e 8f       	std	Y+30, r25	; 0x1e
    338a:	8d 8f       	std	Y+29, r24	; 0x1d
    338c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    338e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <STEPPER_MOTOR_move+0x8e4>
    3394:	9e 8f       	std	Y+30, r25	; 0x1e
    3396:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	63 e0       	ldi	r22, 0x03	; 3
    339c:	41 e0       	ldi	r20, 0x01	; 1
    339e:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	64 e0       	ldi	r22, 0x04	; 4
    33a6:	40 e0       	ldi	r20, 0x00	; 0
    33a8:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    33ac:	82 e0       	ldi	r24, 0x02	; 2
    33ae:	65 e0       	ldi	r22, 0x05	; 5
    33b0:	41 e0       	ldi	r20, 0x01	; 1
    33b2:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    33b6:	82 e0       	ldi	r24, 0x02	; 2
    33b8:	66 e0       	ldi	r22, 0x06	; 6
    33ba:	41 e0       	ldi	r20, 0x01	; 1
    33bc:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a0 e2       	ldi	r26, 0x20	; 32
    33c6:	b1 e4       	ldi	r27, 0x41	; 65
    33c8:	89 8f       	std	Y+25, r24	; 0x19
    33ca:	9a 8f       	std	Y+26, r25	; 0x1a
    33cc:	ab 8f       	std	Y+27, r26	; 0x1b
    33ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	69 8d       	ldd	r22, Y+25	; 0x19
    33d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a e7       	ldi	r20, 0x7A	; 122
    33de:	53 e4       	ldi	r21, 0x43	; 67
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8d 8b       	std	Y+21, r24	; 0x15
    33ea:	9e 8b       	std	Y+22, r25	; 0x16
    33ec:	af 8b       	std	Y+23, r26	; 0x17
    33ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f0:	6d 89       	ldd	r22, Y+21	; 0x15
    33f2:	7e 89       	ldd	r23, Y+22	; 0x16
    33f4:	8f 89       	ldd	r24, Y+23	; 0x17
    33f6:	98 8d       	ldd	r25, Y+24	; 0x18
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <STEPPER_MOTOR_move+0x966>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9c 8b       	std	Y+20, r25	; 0x14
    340e:	8b 8b       	std	Y+19, r24	; 0x13
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <STEPPER_MOTOR_move+0x9e4>
	else if (__tmp > 65535)
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <STEPPER_MOTOR_move+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	69 8d       	ldd	r22, Y+25	; 0x19
    342c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9c 8b       	std	Y+20, r25	; 0x14
    3450:	8b 8b       	std	Y+19, r24	; 0x13
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <STEPPER_MOTOR_move+0x9c6>
    3454:	89 e1       	ldi	r24, 0x19	; 25
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9a 8b       	std	Y+18, r25	; 0x12
    345a:	89 8b       	std	Y+17, r24	; 0x11
    345c:	89 89       	ldd	r24, Y+17	; 0x11
    345e:	9a 89       	ldd	r25, Y+18	; 0x12
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <STEPPER_MOTOR_move+0x9b4>
    3464:	9a 8b       	std	Y+18, r25	; 0x12
    3466:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8b 89       	ldd	r24, Y+19	; 0x13
    346a:	9c 89       	ldd	r25, Y+20	; 0x14
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9c 8b       	std	Y+20, r25	; 0x14
    3470:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <STEPPER_MOTOR_move+0x9a8>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <STEPPER_MOTOR_move+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6d 89       	ldd	r22, Y+21	; 0x15
    347e:	7e 89       	ldd	r23, Y+22	; 0x16
    3480:	8f 89       	ldd	r24, Y+23	; 0x17
    3482:	98 8d       	ldd	r25, Y+24	; 0x18
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9c 8b       	std	Y+20, r25	; 0x14
    348e:	8b 8b       	std	Y+19, r24	; 0x13
    3490:	8b 89       	ldd	r24, Y+19	; 0x13
    3492:	9c 89       	ldd	r25, Y+20	; 0x14
    3494:	98 8b       	std	Y+16, r25	; 0x10
    3496:	8f 87       	std	Y+15, r24	; 0x0f
    3498:	8f 85       	ldd	r24, Y+15	; 0x0f
    349a:	98 89       	ldd	r25, Y+16	; 0x10
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <STEPPER_MOTOR_move+0x9f0>
    34a0:	98 8b       	std	Y+16, r25	; 0x10
    34a2:	8f 87       	std	Y+15, r24	; 0x0f
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	63 e0       	ldi	r22, 0x03	; 3
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	64 e0       	ldi	r22, 0x04	; 4
    34b2:	41 e0       	ldi	r20, 0x01	; 1
    34b4:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    34b8:	82 e0       	ldi	r24, 0x02	; 2
    34ba:	65 e0       	ldi	r22, 0x05	; 5
    34bc:	41 e0       	ldi	r20, 0x01	; 1
    34be:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    34c2:	82 e0       	ldi	r24, 0x02	; 2
    34c4:	66 e0       	ldi	r22, 0x06	; 6
    34c6:	41 e0       	ldi	r20, 0x01	; 1
    34c8:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a0 e2       	ldi	r26, 0x20	; 32
    34d2:	b1 e4       	ldi	r27, 0x41	; 65
    34d4:	8b 87       	std	Y+11, r24	; 0x0b
    34d6:	9c 87       	std	Y+12, r25	; 0x0c
    34d8:	ad 87       	std	Y+13, r26	; 0x0d
    34da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34de:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a e7       	ldi	r20, 0x7A	; 122
    34ea:	53 e4       	ldi	r21, 0x43	; 67
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8f 83       	std	Y+7, r24	; 0x07
    34f6:	98 87       	std	Y+8, r25	; 0x08
    34f8:	a9 87       	std	Y+9, r26	; 0x09
    34fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e8       	ldi	r20, 0x80	; 128
    350a:	5f e3       	ldi	r21, 0x3F	; 63
    350c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3510:	88 23       	and	r24, r24
    3512:	2c f4       	brge	.+10     	; 0x351e <STEPPER_MOTOR_move+0xa72>
		__ticks = 1;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	3f c0       	rjmp	.+126    	; 0x359c <STEPPER_MOTOR_move+0xaf0>
	else if (__tmp > 65535)
    351e:	6f 81       	ldd	r22, Y+7	; 0x07
    3520:	78 85       	ldd	r23, Y+8	; 0x08
    3522:	89 85       	ldd	r24, Y+9	; 0x09
    3524:	9a 85       	ldd	r25, Y+10	; 0x0a
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	3f ef       	ldi	r19, 0xFF	; 255
    352a:	4f e7       	ldi	r20, 0x7F	; 127
    352c:	57 e4       	ldi	r21, 0x47	; 71
    352e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3532:	18 16       	cp	r1, r24
    3534:	4c f5       	brge	.+82     	; 0x3588 <STEPPER_MOTOR_move+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	6b 85       	ldd	r22, Y+11	; 0x0b
    3538:	7c 85       	ldd	r23, Y+12	; 0x0c
    353a:	8d 85       	ldd	r24, Y+13	; 0x0d
    353c:	9e 85       	ldd	r25, Y+14	; 0x0e
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9e 83       	std	Y+6, r25	; 0x06
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	0f c0       	rjmp	.+30     	; 0x357e <STEPPER_MOTOR_move+0xad2>
    3560:	89 e1       	ldi	r24, 0x19	; 25
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9c 83       	std	Y+4, r25	; 0x04
    3566:	8b 83       	std	Y+3, r24	; 0x03
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <STEPPER_MOTOR_move+0xac0>
    3570:	9c 83       	std	Y+4, r25	; 0x04
    3572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	69 f7       	brne	.-38     	; 0x3560 <STEPPER_MOTOR_move+0xab4>
    3586:	14 c0       	rjmp	.+40     	; 0x35b0 <STEPPER_MOTOR_move+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	6f 81       	ldd	r22, Y+7	; 0x07
    358a:	78 85       	ldd	r23, Y+8	; 0x08
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9e 83       	std	Y+6, r25	; 0x06
    359a:	8d 83       	std	Y+5, r24	; 0x05
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	9a 83       	std	Y+2, r25	; 0x02
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <STEPPER_MOTOR_move+0xafc>
    35ac:	9a 83       	std	Y+2, r25	; 0x02
    35ae:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    35b0:	de 01       	movw	r26, r28
    35b2:	ae 58       	subi	r26, 0x8E	; 142
    35b4:	bf 4f       	sbci	r27, 0xFF	; 255
    35b6:	fe 01       	movw	r30, r28
    35b8:	ee 58       	subi	r30, 0x8E	; 142
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	80 81       	ld	r24, Z
    35be:	91 81       	ldd	r25, Z+1	; 0x01
    35c0:	01 96       	adiw	r24, 0x01	; 1
    35c2:	11 96       	adiw	r26, 0x01	; 1
    35c4:	9c 93       	st	X, r25
    35c6:	8e 93       	st	-X, r24
    35c8:	fe 01       	movw	r30, r28
    35ca:	ea 58       	subi	r30, 0x8A	; 138
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	28 2f       	mov	r18, r24
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	fe 01       	movw	r30, r28
    35d6:	ee 58       	subi	r30, 0x8E	; 142
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	82 17       	cp	r24, r18
    35e0:	93 07       	cpc	r25, r19
    35e2:	0c f0       	brlt	.+2      	; 0x35e6 <STEPPER_MOTOR_move+0xb3a>
    35e4:	cd cd       	rjmp	.-1126   	; 0x3180 <STEPPER_MOTOR_move+0x6d4>
    35e6:	04 c0       	rjmp	.+8      	; 0x35f0 <STEPPER_MOTOR_move+0xb44>
                }
                
    }
    

else{u8 LocalErrorState = STD_TYPES_NOK;}
    35e8:	fe 01       	movw	r30, r28
    35ea:	ef 58       	subi	r30, 0x8F	; 143
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	10 82       	st	Z, r1
return LocalErrorState;
    35f0:	fe 01       	movw	r30, r28
    35f2:	e9 58       	subi	r30, 0x89	; 137
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 81       	ld	r24, Z
}
    35f8:	c7 58       	subi	r28, 0x87	; 135
    35fa:	df 4f       	sbci	r29, 0xFF	; 255
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	cf 91       	pop	r28
    3608:	df 91       	pop	r29
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	08 95       	ret

00003610 <TIMERS_voidTimer1Init>:

/*global pointer to function of timer0 OVF*/
static void(*TIMERS_pfTimer0OVF) (void) = NULL;
static void(*TIMERS_pfTimer0CTC) (void) = NULL;

void TIMERS_voidTimer1Init(void){
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
	/*select timer 1 mode => 14*/
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    3618:	af e4       	ldi	r26, 0x4F	; 79
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	ef e4       	ldi	r30, 0x4F	; 79
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	82 60       	ori	r24, 0x02	; 2
    3624:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    3626:	af e4       	ldi	r26, 0x4F	; 79
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	ef e4       	ldi	r30, 0x4F	; 79
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	8e 7f       	andi	r24, 0xFE	; 254
    3632:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    3634:	ae e4       	ldi	r26, 0x4E	; 78
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	ee e4       	ldi	r30, 0x4E	; 78
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	80 61       	ori	r24, 0x10	; 16
    3640:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    3642:	ae e4       	ldi	r26, 0x4E	; 78
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	ee e4       	ldi	r30, 0x4E	; 78
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	88 60       	ori	r24, 0x08	; 8
    364e:	8c 93       	st	X, r24

	/* select HW action on OC1A => non inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    3650:	af e4       	ldi	r26, 0x4F	; 79
    3652:	b0 e0       	ldi	r27, 0x00	; 0
    3654:	ef e4       	ldi	r30, 0x4F	; 79
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	80 68       	ori	r24, 0x80	; 128
    365c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    365e:	af e4       	ldi	r26, 0x4F	; 79
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	ef e4       	ldi	r30, 0x4F	; 79
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	8f 7b       	andi	r24, 0xBF	; 191
    366a:	8c 93       	st	X, r24

	/*set top value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
    366c:	e6 e4       	ldi	r30, 0x46	; 70
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	8f e1       	ldi	r24, 0x1F	; 31
    3672:	9e e4       	ldi	r25, 0x4E	; 78
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24

	/* set angel of servo motor */
	TIMERS_u16_OCR1A_REG =999;
    3678:	ea e4       	ldi	r30, 0x4A	; 74
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	87 ee       	ldi	r24, 0xE7	; 231
    367e:	93 e0       	ldi	r25, 0x03	; 3
    3680:	91 83       	std	Z+1, r25	; 0x01
    3682:	80 83       	st	Z, r24

	/*set prescaler value CLK/8*/
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    3684:	ae e4       	ldi	r26, 0x4E	; 78
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	ee e4       	ldi	r30, 0x4E	; 78
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	8b 7f       	andi	r24, 0xFB	; 251
    3690:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    3692:	ae e4       	ldi	r26, 0x4E	; 78
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	ee e4       	ldi	r30, 0x4E	; 78
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	82 60       	ori	r24, 0x02	; 2
    369e:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    36a0:	ae e4       	ldi	r26, 0x4E	; 78
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	ee e4       	ldi	r30, 0x4E	; 78
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	8e 7f       	andi	r24, 0xFE	; 254
    36ac:	8c 93       	st	X, r24
}
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <Servo_Angel>:


void Servo_Angel(u8 Copy_u8Angel){
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	0f 92       	push	r0
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	89 83       	std	Y+1, r24	; 0x01
	/*select timer 1 mode => 14*/
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    36c0:	af e4       	ldi	r26, 0x4F	; 79
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	ef e4       	ldi	r30, 0x4F	; 79
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	82 60       	ori	r24, 0x02	; 2
    36cc:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    36ce:	af e4       	ldi	r26, 0x4F	; 79
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	ef e4       	ldi	r30, 0x4F	; 79
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	8e 7f       	andi	r24, 0xFE	; 254
    36da:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    36dc:	ae e4       	ldi	r26, 0x4E	; 78
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	ee e4       	ldi	r30, 0x4E	; 78
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	80 61       	ori	r24, 0x10	; 16
    36e8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    36ea:	ae e4       	ldi	r26, 0x4E	; 78
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	ee e4       	ldi	r30, 0x4E	; 78
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	88 60       	ori	r24, 0x08	; 8
    36f6:	8c 93       	st	X, r24

	/* select HW action on OC1A => non inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    36f8:	af e4       	ldi	r26, 0x4F	; 79
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	ef e4       	ldi	r30, 0x4F	; 79
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	80 68       	ori	r24, 0x80	; 128
    3704:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    3706:	af e4       	ldi	r26, 0x4F	; 79
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	ef e4       	ldi	r30, 0x4F	; 79
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	8f 7b       	andi	r24, 0xBF	; 191
    3712:	8c 93       	st	X, r24

	/*set top value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
    3714:	e6 e4       	ldi	r30, 0x46	; 70
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	8f e1       	ldi	r24, 0x1F	; 31
    371a:	9e e4       	ldi	r25, 0x4E	; 78
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	80 83       	st	Z, r24

	/* set angel of servo motor */
	TIMERS_u16_OCR1A_REG =Copy_u8Angel;
    3720:	ea e4       	ldi	r30, 0x4A	; 74
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	80 83       	st	Z, r24

	/*set prescaler value CLK/8*/
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    372e:	ae e4       	ldi	r26, 0x4E	; 78
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	ee e4       	ldi	r30, 0x4E	; 78
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	8b 7f       	andi	r24, 0xFB	; 251
    373a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    373c:	ae e4       	ldi	r26, 0x4E	; 78
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	ee e4       	ldi	r30, 0x4E	; 78
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	82 60       	ori	r24, 0x02	; 2
    3748:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    374a:	ae e4       	ldi	r26, 0x4E	; 78
    374c:	b0 e0       	ldi	r27, 0x00	; 0
    374e:	ee e4       	ldi	r30, 0x4E	; 78
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	80 81       	ld	r24, Z
    3754:	8e 7f       	andi	r24, 0xFE	; 254
    3756:	8c 93       	st	X, r24
}
    3758:	0f 90       	pop	r0
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <TIMERS_voidTimer1SetCopmpareMatchValue>:

void TIMERS_voidTimer1SetCopmpareMatchValue(u16 Copy_u16OCRValue)
{
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	00 d0       	rcall	.+0      	; 0x3766 <TIMERS_voidTimer1SetCopmpareMatchValue+0x6>
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	9a 83       	std	Y+2, r25	; 0x02
    376c:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG =Copy_u16OCRValue;
    376e:	ea e4       	ldi	r30, 0x4A	; 74
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	9a 81       	ldd	r25, Y+2	; 0x02
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
}
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	cf 91       	pop	r28
    3780:	df 91       	pop	r29
    3782:	08 95       	ret

00003784 <TIMERS_voidTimer0Init>:


void TIMERS_voidTimer0Init(void)
{
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
//    SET_BIT(TIMERS_u8_TCCR0_REG,1);
//    CLR_BIT(TIMERS_u8_TCCR0_REG,0);
//

	/*select mode =. fast pwm mode*/
	SET_BIT(TIMERS_u8_TCCR0_REG,6);
    378c:	a3 e5       	ldi	r26, 0x53	; 83
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	e3 e5       	ldi	r30, 0x53	; 83
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	80 81       	ld	r24, Z
    3796:	80 64       	ori	r24, 0x40	; 64
    3798:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    379a:	a3 e5       	ldi	r26, 0x53	; 83
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	e3 e5       	ldi	r30, 0x53	; 83
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	88 60       	ori	r24, 0x08	; 8
    37a6:	8c 93       	st	X, r24

	/*select HW action on OV0Pin => non inverting*/
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
    37a8:	a3 e5       	ldi	r26, 0x53	; 83
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	e3 e5       	ldi	r30, 0x53	; 83
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	80 62       	ori	r24, 0x20	; 32
    37b4:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    37b6:	a3 e5       	ldi	r26, 0x53	; 83
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	e3 e5       	ldi	r30, 0x53	; 83
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	8f 7e       	andi	r24, 0xEF	; 239
    37c2:	8c 93       	st	X, r24
	/*set prescaler value CLK/8*/
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    37c4:	a3 e5       	ldi	r26, 0x53	; 83
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e3 e5       	ldi	r30, 0x53	; 83
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	8b 7f       	andi	r24, 0xFB	; 251
    37d0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    37d2:	a3 e5       	ldi	r26, 0x53	; 83
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	e3 e5       	ldi	r30, 0x53	; 83
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	82 60       	ori	r24, 0x02	; 2
    37de:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    37e0:	a3 e5       	ldi	r26, 0x53	; 83
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e3 e5       	ldi	r30, 0x53	; 83
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	8e 7f       	andi	r24, 0xFE	; 254
    37ec:	8c 93       	st	X, r24


}
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <TIMERS_voidTimer0SetCopmpareMatchValue>:


void TIMERS_voidTimer0SetCopmpareMatchValue(u8 Copy_u8OCR0Value)
{
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	0f 92       	push	r0
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    3800:	ec e5       	ldi	r30, 0x5C	; 92
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	80 83       	st	Z, r24

}
    3808:	0f 90       	pop	r0
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <TIMERS_u8Timer0SetCallBack>:


u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf) (void))
{
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	00 d0       	rcall	.+0      	; 0x3816 <TIMERS_u8Timer0SetCallBack+0x6>
    3816:	0f 92       	push	r0
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	9b 83       	std	Y+3, r25	; 0x03
    381e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pf != NULL)
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	9b 81       	ldd	r25, Y+3	; 0x03
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	39 f0       	breq	.+14     	; 0x383a <TIMERS_u8Timer0SetCallBack+0x2a>
    {
        TIMERS_pfTimer0OVF = Copy_pf;
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	90 93 e0 00 	sts	0x00E0, r25
    3834:	80 93 df 00 	sts	0x00DF, r24
    3838:	01 c0       	rjmp	.+2      	; 0x383c <TIMERS_u8Timer0SetCallBack+0x2c>


    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    383a:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    383c:	89 81       	ldd	r24, Y+1	; 0x01
}
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <TIMERS_u8Timer0CTCSetCallBack>:


u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf) (void))
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	00 d0       	rcall	.+0      	; 0x3850 <TIMERS_u8Timer0CTCSetCallBack+0x6>
    3850:	0f 92       	push	r0
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	9b 83       	std	Y+3, r25	; 0x03
    3858:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8ErrorState = STD_TYPES_OK;
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	89 83       	std	Y+1, r24	; 0x01

	    if(Copy_pf != NULL)
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	9b 81       	ldd	r25, Y+3	; 0x03
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	39 f0       	breq	.+14     	; 0x3874 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	    {
	        TIMERS_pfTimer0CTC = Copy_pf;
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	9b 81       	ldd	r25, Y+3	; 0x03
    386a:	90 93 e2 00 	sts	0x00E2, r25
    386e:	80 93 e1 00 	sts	0x00E1, r24
    3872:	01 c0       	rjmp	.+2      	; 0x3876 <TIMERS_u8Timer0CTCSetCallBack+0x2c>


	    }
	    else
	    {
	        Local_u8ErrorState = STD_TYPES_NOK;
    3874:	19 82       	std	Y+1, r1	; 0x01
	    }

	    return Local_u8ErrorState;
    3876:	89 81       	ldd	r24, Y+1	; 0x01
}
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
    387e:	cf 91       	pop	r28
    3880:	df 91       	pop	r29
    3882:	08 95       	ret

00003884 <__vector_11>:


void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    3884:	1f 92       	push	r1
    3886:	0f 92       	push	r0
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	0f 92       	push	r0
    388c:	11 24       	eor	r1, r1
    388e:	2f 93       	push	r18
    3890:	3f 93       	push	r19
    3892:	4f 93       	push	r20
    3894:	5f 93       	push	r21
    3896:	6f 93       	push	r22
    3898:	7f 93       	push	r23
    389a:	8f 93       	push	r24
    389c:	9f 93       	push	r25
    389e:	af 93       	push	r26
    38a0:	bf 93       	push	r27
    38a2:	ef 93       	push	r30
    38a4:	ff 93       	push	r31
    38a6:	df 93       	push	r29
    38a8:	cf 93       	push	r28
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    38ae:	80 91 e3 00 	lds	r24, 0x00E3
    38b2:	90 91 e4 00 	lds	r25, 0x00E4
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	90 93 e4 00 	sts	0x00E4, r25
    38bc:	80 93 e3 00 	sts	0x00E3, r24
	if(Local_u16CounterOVF == 3907){
    38c0:	80 91 e3 00 	lds	r24, 0x00E3
    38c4:	90 91 e4 00 	lds	r25, 0x00E4
    38c8:	2f e0       	ldi	r18, 0x0F	; 15
    38ca:	83 34       	cpi	r24, 0x43	; 67
    38cc:	92 07       	cpc	r25, r18
    38ce:	99 f4       	brne	.+38     	; 0x38f6 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    38d0:	e2 e5       	ldi	r30, 0x52	; 82
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 ec       	ldi	r24, 0xC0	; 192
    38d6:	80 83       	st	Z, r24
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    38d8:	10 92 e4 00 	sts	0x00E4, r1
    38dc:	10 92 e3 00 	sts	0x00E3, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL){
    38e0:	80 91 df 00 	lds	r24, 0x00DF
    38e4:	90 91 e0 00 	lds	r25, 0x00E0
    38e8:	00 97       	sbiw	r24, 0x00	; 0
    38ea:	29 f0       	breq	.+10     	; 0x38f6 <__vector_11+0x72>
			TIMERS_pfTimer0OVF();
    38ec:	e0 91 df 00 	lds	r30, 0x00DF
    38f0:	f0 91 e0 00 	lds	r31, 0x00E0
    38f4:	09 95       	icall
		}
	}
}
    38f6:	cf 91       	pop	r28
    38f8:	df 91       	pop	r29
    38fa:	ff 91       	pop	r31
    38fc:	ef 91       	pop	r30
    38fe:	bf 91       	pop	r27
    3900:	af 91       	pop	r26
    3902:	9f 91       	pop	r25
    3904:	8f 91       	pop	r24
    3906:	7f 91       	pop	r23
    3908:	6f 91       	pop	r22
    390a:	5f 91       	pop	r21
    390c:	4f 91       	pop	r20
    390e:	3f 91       	pop	r19
    3910:	2f 91       	pop	r18
    3912:	0f 90       	pop	r0
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	0f 90       	pop	r0
    3918:	1f 90       	pop	r1
    391a:	18 95       	reti

0000391c <__vector_10>:

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    391c:	1f 92       	push	r1
    391e:	0f 92       	push	r0
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	0f 92       	push	r0
    3924:	11 24       	eor	r1, r1
    3926:	2f 93       	push	r18
    3928:	3f 93       	push	r19
    392a:	4f 93       	push	r20
    392c:	5f 93       	push	r21
    392e:	6f 93       	push	r22
    3930:	7f 93       	push	r23
    3932:	8f 93       	push	r24
    3934:	9f 93       	push	r25
    3936:	af 93       	push	r26
    3938:	bf 93       	push	r27
    393a:	ef 93       	push	r30
    393c:	ff 93       	push	r31
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    3946:	80 91 e5 00 	lds	r24, 0x00E5
    394a:	90 91 e6 00 	lds	r25, 0x00E6
    394e:	01 96       	adiw	r24, 0x01	; 1
    3950:	90 93 e6 00 	sts	0x00E6, r25
    3954:	80 93 e5 00 	sts	0x00E5, r24
	if(Local_u16CounterCTC == 10000){
    3958:	80 91 e5 00 	lds	r24, 0x00E5
    395c:	90 91 e6 00 	lds	r25, 0x00E6
    3960:	27 e2       	ldi	r18, 0x27	; 39
    3962:	80 31       	cpi	r24, 0x10	; 16
    3964:	92 07       	cpc	r25, r18
    3966:	79 f4       	brne	.+30     	; 0x3986 <__vector_10+0x6a>
		/* Clear Counter */
		Local_u16CounterCTC = 0;
    3968:	10 92 e6 00 	sts	0x00E6, r1
    396c:	10 92 e5 00 	sts	0x00E5, r1

		/* Call CallBack function*/
		if(TIMERS_pfTimer0CTC != NULL){
    3970:	80 91 e1 00 	lds	r24, 0x00E1
    3974:	90 91 e2 00 	lds	r25, 0x00E2
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	29 f0       	breq	.+10     	; 0x3986 <__vector_10+0x6a>
		    TIMERS_pfTimer0CTC();
    397c:	e0 91 e1 00 	lds	r30, 0x00E1
    3980:	f0 91 e2 00 	lds	r31, 0x00E2
    3984:	09 95       	icall
			}

	}
}
    3986:	cf 91       	pop	r28
    3988:	df 91       	pop	r29
    398a:	ff 91       	pop	r31
    398c:	ef 91       	pop	r30
    398e:	bf 91       	pop	r27
    3990:	af 91       	pop	r26
    3992:	9f 91       	pop	r25
    3994:	8f 91       	pop	r24
    3996:	7f 91       	pop	r23
    3998:	6f 91       	pop	r22
    399a:	5f 91       	pop	r21
    399c:	4f 91       	pop	r20
    399e:	3f 91       	pop	r19
    39a0:	2f 91       	pop	r18
    39a2:	0f 90       	pop	r0
    39a4:	0f be       	out	0x3f, r0	; 63
    39a6:	0f 90       	pop	r0
    39a8:	1f 90       	pop	r1
    39aa:	18 95       	reti

000039ac <WDT_voidEnable>:
#include "WDT_interface.h"

#define WDTCR   *((volatile u8*)0x41)

void WDT_voidEnable(void)
{
    39ac:	df 93       	push	r29
    39ae:	cf 93       	push	r28
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
	/* enable WDT = 2.1 sec*/
	WDTCR = 0b00001111;
    39b4:	e1 e4       	ldi	r30, 0x41	; 65
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	8f e0       	ldi	r24, 0x0F	; 15
    39ba:	80 83       	st	Z, r24
}
    39bc:	cf 91       	pop	r28
    39be:	df 91       	pop	r29
    39c0:	08 95       	ret

000039c2 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
    39c2:	df 93       	push	r29
    39c4:	cf 93       	push	r28
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= ((1<<4) | (1<<3));
    39ca:	a1 e4       	ldi	r26, 0x41	; 65
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	e1 e4       	ldi	r30, 0x41	; 65
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	88 61       	ori	r24, 0x18	; 24
    39d6:	8c 93       	st	X, r24

	WDTCR = 0x00;
    39d8:	e1 e4       	ldi	r30, 0x41	; 65
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	10 82       	st	Z, r1
}
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	08 95       	ret

000039e4 <main>:
#include <util/delay.h>



int main(void)
{
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	c2 59       	subi	r28, 0x92	; 146
    39f2:	d0 40       	sbci	r29, 0x00	; 0
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	DIO_voidInit();
    39fe:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_voidInit>
	LCD_voideInit();
    3a02:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_voideInit>
	LCD_PrintString("enter password");
    3a06:	80 e6       	ldi	r24, 0x60	; 96
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
	u8 password[4] = {'1','2','3','3'};
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e1 57       	subi	r30, 0x71	; 113
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	81 e3       	ldi	r24, 0x31	; 49
    3a16:	80 83       	st	Z, r24
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e1 57       	subi	r30, 0x71	; 113
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	82 e3       	ldi	r24, 0x32	; 50
    3a20:	81 83       	std	Z+1, r24	; 0x01
    3a22:	fe 01       	movw	r30, r28
    3a24:	e1 57       	subi	r30, 0x71	; 113
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	83 e3       	ldi	r24, 0x33	; 51
    3a2a:	82 83       	std	Z+2, r24	; 0x02
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e1 57       	subi	r30, 0x71	; 113
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	83 e3       	ldi	r24, 0x33	; 51
    3a34:	83 83       	std	Z+3, r24	; 0x03
	u8 index = 0;
    3a36:	fe 01       	movw	r30, r28
    3a38:	e3 57       	subi	r30, 0x73	; 115
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	10 82       	st	Z, r1

	while(1)
	{

				LCD_voideInit();
    3a3e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_voideInit>

				  LCD_PrintString("1-DC 2-steper");
    3a42:	8f e6       	ldi	r24, 0x6F	; 111
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
				  LCD_voidSendCmnd(0xC0);
    3a4a:	80 ec       	ldi	r24, 0xC0	; 192
    3a4c:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
				  LCD_PrintString("3-servo");
    3a50:	8d e7       	ldi	r24, 0x7D	; 125
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
				  while(1){
					KPD_u8GetKeyState(&Local_u8Key);
    3a58:	ce 01       	movw	r24, r28
    3a5a:	82 57       	subi	r24, 0x72	; 114
    3a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <KPD_u8GetKeyState>
					 if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    3a62:	fe 01       	movw	r30, r28
    3a64:	e2 57       	subi	r30, 0x72	; 114
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	80 81       	ld	r24, Z
    3a6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a6c:	a9 f3       	breq	.-22     	; 0x3a58 <main+0x74>
						if(Local_u8Key=='1'){
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e2 57       	subi	r30, 0x72	; 114
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	80 81       	ld	r24, Z
    3a76:	81 33       	cpi	r24, 0x31	; 49
    3a78:	51 f5       	brne	.+84     	; 0x3ace <main+0xea>
							LCD_voideInit();
    3a7a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_voideInit>
							LCD_PrintString("1-ccw");
    3a7e:	85 e8       	ldi	r24, 0x85	; 133
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
							LCD_voidSendCmnd(0xC0);
    3a86:	80 ec       	ldi	r24, 0xC0	; 192
    3a88:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
							LCD_PrintString("1-cw");
    3a8c:	8b e8       	ldi	r24, 0x8B	; 139
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
							while(1){
								KPD_u8GetKeyState(&Local_u8Key);
    3a94:	ce 01       	movw	r24, r28
    3a96:	82 57       	subi	r24, 0x72	; 114
    3a98:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <KPD_u8GetKeyState>
								if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e2 57       	subi	r30, 0x72	; 114
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    3aa8:	a9 f3       	breq	.-22     	; 0x3a94 <main+0xb0>
									if(Local_u8Key=='1'){
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e2 57       	subi	r30, 0x72	; 114
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 81       	ld	r24, Z
    3ab2:	81 33       	cpi	r24, 0x31	; 49
    3ab4:	19 f4       	brne	.+6      	; 0x3abc <main+0xd8>
										DC_Motor_Rotate_Clockwise();
    3ab6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DC_Motor_Rotate_Clockwise>
    3aba:	ce cf       	rjmp	.-100    	; 0x3a58 <main+0x74>
										break;
									}
									else if (Local_u8Key=='2')
    3abc:	fe 01       	movw	r30, r28
    3abe:	e2 57       	subi	r30, 0x72	; 114
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	82 33       	cpi	r24, 0x32	; 50
    3ac6:	31 f7       	brne	.-52     	; 0x3a94 <main+0xb0>
									{
										DC_Motor_Rotate_CounterClockwise();
    3ac8:	0e 94 cb 07 	call	0xf96	; 0xf96 <DC_Motor_Rotate_CounterClockwise>
    3acc:	c5 cf       	rjmp	.-118    	; 0x3a58 <main+0x74>
									}

								}
							}
						}
						else if (Local_u8Key=='2')
    3ace:	fe 01       	movw	r30, r28
    3ad0:	e2 57       	subi	r30, 0x72	; 114
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	80 81       	ld	r24, Z
    3ad6:	82 33       	cpi	r24, 0x32	; 50
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <main+0xf8>
    3ada:	f7 c6       	rjmp	.+3566   	; 0x48ca <main+0xee6>
						{
							LCD_voideInit();
    3adc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_voideInit>
							LCD_PrintString("1-cw");
    3ae0:	8b e8       	ldi	r24, 0x8B	; 139
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
							LCD_voidSendCmnd(0xC0);
    3ae8:	80 ec       	ldi	r24, 0xC0	; 192
    3aea:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
							LCD_PrintString("1-ccw");
    3aee:	85 e8       	ldi	r24, 0x85	; 133
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
							while(1){
								KPD_u8GetKeyState(&Local_u8Key);
    3af6:	ce 01       	movw	r24, r28
    3af8:	82 57       	subi	r24, 0x72	; 114
    3afa:	9f 4f       	sbci	r25, 0xFF	; 255
    3afc:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <KPD_u8GetKeyState>
								if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3b00:	fe 01       	movw	r30, r28
    3b02:	e2 57       	subi	r30, 0x72	; 114
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	80 81       	ld	r24, Z
    3b08:	8f 3f       	cpi	r24, 0xFF	; 255
    3b0a:	a9 f3       	breq	.-22     	; 0x3af6 <main+0x112>
									if(Local_u8Key =='1'){
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e2 57       	subi	r30, 0x72	; 114
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	80 81       	ld	r24, Z
    3b14:	81 33       	cpi	r24, 0x31	; 49
    3b16:	09 f0       	breq	.+2      	; 0x3b1a <main+0x136>
    3b18:	01 c4       	rjmp	.+2050   	; 0x431c <main+0x938>
										LCD_voideInit();
    3b1a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_voideInit>
							            LCD_PrintString("1-90 2-180 3-270");
    3b1e:	80 e9       	ldi	r24, 0x90	; 144
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
							            LCD_voidSendCmnd(0xC0);
    3b26:	80 ec       	ldi	r24, 0xC0	; 192
    3b28:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
							            LCD_PrintString("4-360");
    3b2c:	81 ea       	ldi	r24, 0xA1	; 161
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
										while(1){
											KPD_u8GetKeyState(&Local_u8Key);
    3b34:	ce 01       	movw	r24, r28
    3b36:	82 57       	subi	r24, 0x72	; 114
    3b38:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <KPD_u8GetKeyState>
											if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3b3e:	fe 01       	movw	r30, r28
    3b40:	e2 57       	subi	r30, 0x72	; 114
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	80 81       	ld	r24, Z
    3b46:	8f 3f       	cpi	r24, 0xFF	; 255
    3b48:	b1 f2       	breq	.-84     	; 0x3af6 <main+0x112>
												if(Local_u8Key=='1'){
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e2 57       	subi	r30, 0x72	; 114
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 81       	ld	r24, Z
    3b52:	81 33       	cpi	r24, 0x31	; 49
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <main+0x174>
    3b56:	be c0       	rjmp	.+380    	; 0x3cd4 <main+0x2f0>
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    3b58:	82 e0       	ldi	r24, 0x02	; 2
    3b5a:	63 e0       	ldi	r22, 0x03	; 3
    3b5c:	41 e0       	ldi	r20, 0x01	; 1
    3b5e:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    3b62:	fe 01       	movw	r30, r28
    3b64:	e7 57       	subi	r30, 0x77	; 119
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	a8 e4       	ldi	r26, 0x48	; 72
    3b6e:	b3 e4       	ldi	r27, 0x43	; 67
    3b70:	80 83       	st	Z, r24
    3b72:	91 83       	std	Z+1, r25	; 0x01
    3b74:	a2 83       	std	Z+2, r26	; 0x02
    3b76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b78:	8e 01       	movw	r16, r28
    3b7a:	0b 57       	subi	r16, 0x7B	; 123
    3b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e7 57       	subi	r30, 0x77	; 119
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	4a ef       	ldi	r20, 0xFA	; 250
    3b92:	54 e4       	ldi	r21, 0x44	; 68
    3b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	f8 01       	movw	r30, r16
    3b9e:	80 83       	st	Z, r24
    3ba0:	91 83       	std	Z+1, r25	; 0x01
    3ba2:	a2 83       	std	Z+2, r26	; 0x02
    3ba4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	eb 57       	subi	r30, 0x7B	; 123
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	40 e8       	ldi	r20, 0x80	; 128
    3bba:	5f e3       	ldi	r21, 0x3F	; 63
    3bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bc0:	88 23       	and	r24, r24
    3bc2:	44 f4       	brge	.+16     	; 0x3bd4 <main+0x1f0>
		__ticks = 1;
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	ed 57       	subi	r30, 0x7D	; 125
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	80 83       	st	Z, r24
    3bd2:	64 c0       	rjmp	.+200    	; 0x3c9c <main+0x2b8>
	else if (__tmp > 65535)
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	eb 57       	subi	r30, 0x7B	; 123
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	60 81       	ld	r22, Z
    3bdc:	71 81       	ldd	r23, Z+1	; 0x01
    3bde:	82 81       	ldd	r24, Z+2	; 0x02
    3be0:	93 81       	ldd	r25, Z+3	; 0x03
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	3f ef       	ldi	r19, 0xFF	; 255
    3be6:	4f e7       	ldi	r20, 0x7F	; 127
    3be8:	57 e4       	ldi	r21, 0x47	; 71
    3bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bee:	18 16       	cp	r1, r24
    3bf0:	0c f0       	brlt	.+2      	; 0x3bf4 <main+0x210>
    3bf2:	43 c0       	rjmp	.+134    	; 0x3c7a <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e7 57       	subi	r30, 0x77	; 119
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	60 81       	ld	r22, Z
    3bfc:	71 81       	ldd	r23, Z+1	; 0x01
    3bfe:	82 81       	ldd	r24, Z+2	; 0x02
    3c00:	93 81       	ldd	r25, Z+3	; 0x03
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	40 e2       	ldi	r20, 0x20	; 32
    3c08:	51 e4       	ldi	r21, 0x41	; 65
    3c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	8e 01       	movw	r16, r28
    3c14:	0d 57       	subi	r16, 0x7D	; 125
    3c16:	1f 4f       	sbci	r17, 0xFF	; 255
    3c18:	bc 01       	movw	r22, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	f8 01       	movw	r30, r16
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
    3c2a:	1f c0       	rjmp	.+62     	; 0x3c6a <main+0x286>
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ef 57       	subi	r30, 0x7F	; 127
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	88 ec       	ldi	r24, 0xC8	; 200
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	91 83       	std	Z+1, r25	; 0x01
    3c38:	80 83       	st	Z, r24
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	ef 57       	subi	r30, 0x7F	; 127
    3c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c40:	80 81       	ld	r24, Z
    3c42:	91 81       	ldd	r25, Z+1	; 0x01
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <main+0x260>
    3c48:	fe 01       	movw	r30, r28
    3c4a:	ef 57       	subi	r30, 0x7F	; 127
    3c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c52:	de 01       	movw	r26, r28
    3c54:	ad 57       	subi	r26, 0x7D	; 125
    3c56:	bf 4f       	sbci	r27, 0xFF	; 255
    3c58:	fe 01       	movw	r30, r28
    3c5a:	ed 57       	subi	r30, 0x7D	; 125
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	80 81       	ld	r24, Z
    3c60:	91 81       	ldd	r25, Z+1	; 0x01
    3c62:	01 97       	sbiw	r24, 0x01	; 1
    3c64:	11 96       	adiw	r26, 0x01	; 1
    3c66:	9c 93       	st	X, r25
    3c68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	ed 57       	subi	r30, 0x7D	; 125
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 81       	ld	r24, Z
    3c72:	91 81       	ldd	r25, Z+1	; 0x01
    3c74:	00 97       	sbiw	r24, 0x00	; 0
    3c76:	d1 f6       	brne	.-76     	; 0x3c2c <main+0x248>
    3c78:	27 c0       	rjmp	.+78     	; 0x3cc8 <main+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7a:	8e 01       	movw	r16, r28
    3c7c:	0d 57       	subi	r16, 0x7D	; 125
    3c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c80:	fe 01       	movw	r30, r28
    3c82:	eb 57       	subi	r30, 0x7B	; 123
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	60 81       	ld	r22, Z
    3c88:	71 81       	ldd	r23, Z+1	; 0x01
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	f8 01       	movw	r30, r16
    3c98:	91 83       	std	Z+1, r25	; 0x01
    3c9a:	80 83       	st	Z, r24
    3c9c:	de 01       	movw	r26, r28
    3c9e:	a1 58       	subi	r26, 0x81	; 129
    3ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	ed 57       	subi	r30, 0x7D	; 125
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	91 81       	ldd	r25, Z+1	; 0x01
    3cac:	8d 93       	st	X+, r24
    3cae:	9c 93       	st	X, r25
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	e1 58       	subi	r30, 0x81	; 129
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	80 81       	ld	r24, Z
    3cb8:	91 81       	ldd	r25, Z+1	; 0x01
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <main+0x2d6>
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e1 58       	subi	r30, 0x81	; 129
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	80 83       	st	Z, r24
												_delay_ms(200);
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3cc8:	82 e0       	ldi	r24, 0x02	; 2
    3cca:	64 e0       	ldi	r22, 0x04	; 4
    3ccc:	41 e0       	ldi	r20, 0x01	; 1
    3cce:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    3cd2:	11 cf       	rjmp	.-478    	; 0x3af6 <main+0x112>
												break;
												}
												else if (Local_u8Key=='2')
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e2 57       	subi	r30, 0x72	; 114
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	80 81       	ld	r24, Z
    3cdc:	82 33       	cpi	r24, 0x32	; 50
    3cde:	59 f4       	brne	.+22     	; 0x3cf6 <main+0x312>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3ce0:	82 e0       	ldi	r24, 0x02	; 2
    3ce2:	64 e0       	ldi	r22, 0x04	; 4
    3ce4:	41 e0       	ldi	r20, 0x01	; 1
    3ce6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3cea:	82 e0       	ldi	r24, 0x02	; 2
    3cec:	65 e0       	ldi	r22, 0x05	; 5
    3cee:	41 e0       	ldi	r20, 0x01	; 1
    3cf0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    3cf4:	00 cf       	rjmp	.-512    	; 0x3af6 <main+0x112>
													break;
												}
												else if (Local_u8Key=='3')
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e2 57       	subi	r30, 0x72	; 114
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	80 81       	ld	r24, Z
    3cfe:	83 33       	cpi	r24, 0x33	; 51
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <main+0x320>
    3d02:	c8 c0       	rjmp	.+400    	; 0x3e94 <main+0x4b0>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3d04:	82 e0       	ldi	r24, 0x02	; 2
    3d06:	64 e0       	ldi	r22, 0x04	; 4
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3d0e:	82 e0       	ldi	r24, 0x02	; 2
    3d10:	65 e0       	ldi	r22, 0x05	; 5
    3d12:	41 e0       	ldi	r20, 0x01	; 1
    3d14:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    3d18:	fe 01       	movw	r30, r28
    3d1a:	e5 58       	subi	r30, 0x85	; 133
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	aa ef       	ldi	r26, 0xFA	; 250
    3d24:	b4 e4       	ldi	r27, 0x44	; 68
    3d26:	80 83       	st	Z, r24
    3d28:	91 83       	std	Z+1, r25	; 0x01
    3d2a:	a2 83       	std	Z+2, r26	; 0x02
    3d2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2e:	8e 01       	movw	r16, r28
    3d30:	09 58       	subi	r16, 0x89	; 137
    3d32:	1f 4f       	sbci	r17, 0xFF	; 255
    3d34:	fe 01       	movw	r30, r28
    3d36:	e5 58       	subi	r30, 0x85	; 133
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	93 81       	ldd	r25, Z+3	; 0x03
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	4a ef       	ldi	r20, 0xFA	; 250
    3d48:	54 e4       	ldi	r21, 0x44	; 68
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	f8 01       	movw	r30, r16
    3d54:	80 83       	st	Z, r24
    3d56:	91 83       	std	Z+1, r25	; 0x01
    3d58:	a2 83       	std	Z+2, r26	; 0x02
    3d5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	e9 58       	subi	r30, 0x89	; 137
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	60 81       	ld	r22, Z
    3d64:	71 81       	ldd	r23, Z+1	; 0x01
    3d66:	82 81       	ldd	r24, Z+2	; 0x02
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 e8       	ldi	r20, 0x80	; 128
    3d70:	5f e3       	ldi	r21, 0x3F	; 63
    3d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d76:	88 23       	and	r24, r24
    3d78:	44 f4       	brge	.+16     	; 0x3d8a <main+0x3a6>
		__ticks = 1;
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	eb 58       	subi	r30, 0x8B	; 139
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	91 83       	std	Z+1, r25	; 0x01
    3d86:	80 83       	st	Z, r24
    3d88:	64 c0       	rjmp	.+200    	; 0x3e52 <main+0x46e>
	else if (__tmp > 65535)
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e9 58       	subi	r30, 0x89	; 137
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	60 81       	ld	r22, Z
    3d92:	71 81       	ldd	r23, Z+1	; 0x01
    3d94:	82 81       	ldd	r24, Z+2	; 0x02
    3d96:	93 81       	ldd	r25, Z+3	; 0x03
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	3f ef       	ldi	r19, 0xFF	; 255
    3d9c:	4f e7       	ldi	r20, 0x7F	; 127
    3d9e:	57 e4       	ldi	r21, 0x47	; 71
    3da0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3da4:	18 16       	cp	r1, r24
    3da6:	0c f0       	brlt	.+2      	; 0x3daa <main+0x3c6>
    3da8:	43 c0       	rjmp	.+134    	; 0x3e30 <main+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3daa:	fe 01       	movw	r30, r28
    3dac:	e5 58       	subi	r30, 0x85	; 133
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	60 81       	ld	r22, Z
    3db2:	71 81       	ldd	r23, Z+1	; 0x01
    3db4:	82 81       	ldd	r24, Z+2	; 0x02
    3db6:	93 81       	ldd	r25, Z+3	; 0x03
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	40 e2       	ldi	r20, 0x20	; 32
    3dbe:	51 e4       	ldi	r21, 0x41	; 65
    3dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	8e 01       	movw	r16, r28
    3dca:	0b 58       	subi	r16, 0x8B	; 139
    3dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dce:	bc 01       	movw	r22, r24
    3dd0:	cd 01       	movw	r24, r26
    3dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	f8 01       	movw	r30, r16
    3ddc:	91 83       	std	Z+1, r25	; 0x01
    3dde:	80 83       	st	Z, r24
    3de0:	1f c0       	rjmp	.+62     	; 0x3e20 <main+0x43c>
    3de2:	fe 01       	movw	r30, r28
    3de4:	ed 58       	subi	r30, 0x8D	; 141
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	88 ec       	ldi	r24, 0xC8	; 200
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	91 83       	std	Z+1, r25	; 0x01
    3dee:	80 83       	st	Z, r24
    3df0:	fe 01       	movw	r30, r28
    3df2:	ed 58       	subi	r30, 0x8D	; 141
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	80 81       	ld	r24, Z
    3df8:	91 81       	ldd	r25, Z+1	; 0x01
    3dfa:	01 97       	sbiw	r24, 0x01	; 1
    3dfc:	f1 f7       	brne	.-4      	; 0x3dfa <main+0x416>
    3dfe:	fe 01       	movw	r30, r28
    3e00:	ed 58       	subi	r30, 0x8D	; 141
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	91 83       	std	Z+1, r25	; 0x01
    3e06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e08:	de 01       	movw	r26, r28
    3e0a:	ab 58       	subi	r26, 0x8B	; 139
    3e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e0e:	fe 01       	movw	r30, r28
    3e10:	eb 58       	subi	r30, 0x8B	; 139
    3e12:	ff 4f       	sbci	r31, 0xFF	; 255
    3e14:	80 81       	ld	r24, Z
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	01 97       	sbiw	r24, 0x01	; 1
    3e1a:	11 96       	adiw	r26, 0x01	; 1
    3e1c:	9c 93       	st	X, r25
    3e1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e20:	fe 01       	movw	r30, r28
    3e22:	eb 58       	subi	r30, 0x8B	; 139
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	80 81       	ld	r24, Z
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	00 97       	sbiw	r24, 0x00	; 0
    3e2c:	d1 f6       	brne	.-76     	; 0x3de2 <main+0x3fe>
    3e2e:	27 c0       	rjmp	.+78     	; 0x3e7e <main+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e30:	8e 01       	movw	r16, r28
    3e32:	0b 58       	subi	r16, 0x8B	; 139
    3e34:	1f 4f       	sbci	r17, 0xFF	; 255
    3e36:	fe 01       	movw	r30, r28
    3e38:	e9 58       	subi	r30, 0x89	; 137
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	82 81       	ldd	r24, Z+2	; 0x02
    3e42:	93 81       	ldd	r25, Z+3	; 0x03
    3e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	80 83       	st	Z, r24
    3e52:	de 01       	movw	r26, r28
    3e54:	af 58       	subi	r26, 0x8F	; 143
    3e56:	bf 4f       	sbci	r27, 0xFF	; 255
    3e58:	fe 01       	movw	r30, r28
    3e5a:	eb 58       	subi	r30, 0x8B	; 139
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	80 81       	ld	r24, Z
    3e60:	91 81       	ldd	r25, Z+1	; 0x01
    3e62:	8d 93       	st	X+, r24
    3e64:	9c 93       	st	X, r25
    3e66:	fe 01       	movw	r30, r28
    3e68:	ef 58       	subi	r30, 0x8F	; 143
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <main+0x48c>
    3e74:	fe 01       	movw	r30, r28
    3e76:	ef 58       	subi	r30, 0x8F	; 143
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    3e7e:	82 e0       	ldi	r24, 0x02	; 2
    3e80:	64 e0       	ldi	r22, 0x04	; 4
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3e88:	82 e0       	ldi	r24, 0x02	; 2
    3e8a:	64 e0       	ldi	r22, 0x04	; 4
    3e8c:	41 e0       	ldi	r20, 0x01	; 1
    3e8e:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    3e92:	31 ce       	rjmp	.-926    	; 0x3af6 <main+0x112>
													break;
												}
												else if (Local_u8Key=='4')
    3e94:	fe 01       	movw	r30, r28
    3e96:	e2 57       	subi	r30, 0x72	; 114
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	80 81       	ld	r24, Z
    3e9c:	84 33       	cpi	r24, 0x34	; 52
    3e9e:	09 f0       	breq	.+2      	; 0x3ea2 <main+0x4be>
    3ea0:	2a ce       	rjmp	.-940    	; 0x3af6 <main+0x112>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3ea2:	82 e0       	ldi	r24, 0x02	; 2
    3ea4:	64 e0       	ldi	r22, 0x04	; 4
    3ea6:	41 e0       	ldi	r20, 0x01	; 1
    3ea8:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3eac:	82 e0       	ldi	r24, 0x02	; 2
    3eae:	65 e0       	ldi	r22, 0x05	; 5
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	e3 59       	subi	r30, 0x93	; 147
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	aa ef       	ldi	r26, 0xFA	; 250
    3ec2:	b4 e4       	ldi	r27, 0x44	; 68
    3ec4:	80 83       	st	Z, r24
    3ec6:	91 83       	std	Z+1, r25	; 0x01
    3ec8:	a2 83       	std	Z+2, r26	; 0x02
    3eca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ecc:	8e 01       	movw	r16, r28
    3ece:	07 59       	subi	r16, 0x97	; 151
    3ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	e3 59       	subi	r30, 0x93	; 147
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	60 81       	ld	r22, Z
    3eda:	71 81       	ldd	r23, Z+1	; 0x01
    3edc:	82 81       	ldd	r24, Z+2	; 0x02
    3ede:	93 81       	ldd	r25, Z+3	; 0x03
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	4a ef       	ldi	r20, 0xFA	; 250
    3ee6:	54 e4       	ldi	r21, 0x44	; 68
    3ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	f8 01       	movw	r30, r16
    3ef2:	80 83       	st	Z, r24
    3ef4:	91 83       	std	Z+1, r25	; 0x01
    3ef6:	a2 83       	std	Z+2, r26	; 0x02
    3ef8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3efa:	fe 01       	movw	r30, r28
    3efc:	e7 59       	subi	r30, 0x97	; 151
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	60 81       	ld	r22, Z
    3f02:	71 81       	ldd	r23, Z+1	; 0x01
    3f04:	82 81       	ldd	r24, Z+2	; 0x02
    3f06:	93 81       	ldd	r25, Z+3	; 0x03
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	40 e8       	ldi	r20, 0x80	; 128
    3f0e:	5f e3       	ldi	r21, 0x3F	; 63
    3f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f14:	88 23       	and	r24, r24
    3f16:	44 f4       	brge	.+16     	; 0x3f28 <main+0x544>
		__ticks = 1;
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e9 59       	subi	r30, 0x99	; 153
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	91 83       	std	Z+1, r25	; 0x01
    3f24:	80 83       	st	Z, r24
    3f26:	64 c0       	rjmp	.+200    	; 0x3ff0 <main+0x60c>
	else if (__tmp > 65535)
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e7 59       	subi	r30, 0x97	; 151
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	60 81       	ld	r22, Z
    3f30:	71 81       	ldd	r23, Z+1	; 0x01
    3f32:	82 81       	ldd	r24, Z+2	; 0x02
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	3f ef       	ldi	r19, 0xFF	; 255
    3f3a:	4f e7       	ldi	r20, 0x7F	; 127
    3f3c:	57 e4       	ldi	r21, 0x47	; 71
    3f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f42:	18 16       	cp	r1, r24
    3f44:	0c f0       	brlt	.+2      	; 0x3f48 <main+0x564>
    3f46:	43 c0       	rjmp	.+134    	; 0x3fce <main+0x5ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e3 59       	subi	r30, 0x93	; 147
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	60 81       	ld	r22, Z
    3f50:	71 81       	ldd	r23, Z+1	; 0x01
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	40 e2       	ldi	r20, 0x20	; 32
    3f5c:	51 e4       	ldi	r21, 0x41	; 65
    3f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	8e 01       	movw	r16, r28
    3f68:	09 59       	subi	r16, 0x99	; 153
    3f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6c:	bc 01       	movw	r22, r24
    3f6e:	cd 01       	movw	r24, r26
    3f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	f8 01       	movw	r30, r16
    3f7a:	91 83       	std	Z+1, r25	; 0x01
    3f7c:	80 83       	st	Z, r24
    3f7e:	1f c0       	rjmp	.+62     	; 0x3fbe <main+0x5da>
    3f80:	fe 01       	movw	r30, r28
    3f82:	eb 59       	subi	r30, 0x9B	; 155
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	88 ec       	ldi	r24, 0xC8	; 200
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	91 83       	std	Z+1, r25	; 0x01
    3f8c:	80 83       	st	Z, r24
    3f8e:	fe 01       	movw	r30, r28
    3f90:	eb 59       	subi	r30, 0x9B	; 155
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 81       	ld	r24, Z
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	01 97       	sbiw	r24, 0x01	; 1
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <main+0x5b4>
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	eb 59       	subi	r30, 0x9B	; 155
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	91 83       	std	Z+1, r25	; 0x01
    3fa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa6:	de 01       	movw	r26, r28
    3fa8:	a9 59       	subi	r26, 0x99	; 153
    3faa:	bf 4f       	sbci	r27, 0xFF	; 255
    3fac:	fe 01       	movw	r30, r28
    3fae:	e9 59       	subi	r30, 0x99	; 153
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	80 81       	ld	r24, Z
    3fb4:	91 81       	ldd	r25, Z+1	; 0x01
    3fb6:	01 97       	sbiw	r24, 0x01	; 1
    3fb8:	11 96       	adiw	r26, 0x01	; 1
    3fba:	9c 93       	st	X, r25
    3fbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e9 59       	subi	r30, 0x99	; 153
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 81       	ld	r24, Z
    3fc6:	91 81       	ldd	r25, Z+1	; 0x01
    3fc8:	00 97       	sbiw	r24, 0x00	; 0
    3fca:	d1 f6       	brne	.-76     	; 0x3f80 <main+0x59c>
    3fcc:	27 c0       	rjmp	.+78     	; 0x401c <main+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fce:	8e 01       	movw	r16, r28
    3fd0:	09 59       	subi	r16, 0x99	; 153
    3fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	e7 59       	subi	r30, 0x97	; 151
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	60 81       	ld	r22, Z
    3fdc:	71 81       	ldd	r23, Z+1	; 0x01
    3fde:	82 81       	ldd	r24, Z+2	; 0x02
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	f8 01       	movw	r30, r16
    3fec:	91 83       	std	Z+1, r25	; 0x01
    3fee:	80 83       	st	Z, r24
    3ff0:	de 01       	movw	r26, r28
    3ff2:	ad 59       	subi	r26, 0x9D	; 157
    3ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e9 59       	subi	r30, 0x99	; 153
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	80 81       	ld	r24, Z
    3ffe:	91 81       	ldd	r25, Z+1	; 0x01
    4000:	8d 93       	st	X+, r24
    4002:	9c 93       	st	X, r25
    4004:	fe 01       	movw	r30, r28
    4006:	ed 59       	subi	r30, 0x9D	; 157
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	f1 f7       	brne	.-4      	; 0x400e <main+0x62a>
    4012:	fe 01       	movw	r30, r28
    4014:	ed 59       	subi	r30, 0x9D	; 157
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	91 83       	std	Z+1, r25	; 0x01
    401a:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    401c:	82 e0       	ldi	r24, 0x02	; 2
    401e:	65 e0       	ldi	r22, 0x05	; 5
    4020:	41 e0       	ldi	r20, 0x01	; 1
    4022:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    4026:	fe 01       	movw	r30, r28
    4028:	e1 5a       	subi	r30, 0xA1	; 161
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	a8 e4       	ldi	r26, 0x48	; 72
    4032:	b3 e4       	ldi	r27, 0x43	; 67
    4034:	80 83       	st	Z, r24
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	a2 83       	std	Z+2, r26	; 0x02
    403a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403c:	8e 01       	movw	r16, r28
    403e:	05 5a       	subi	r16, 0xA5	; 165
    4040:	1f 4f       	sbci	r17, 0xFF	; 255
    4042:	fe 01       	movw	r30, r28
    4044:	e1 5a       	subi	r30, 0xA1	; 161
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	60 81       	ld	r22, Z
    404a:	71 81       	ldd	r23, Z+1	; 0x01
    404c:	82 81       	ldd	r24, Z+2	; 0x02
    404e:	93 81       	ldd	r25, Z+3	; 0x03
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	4a ef       	ldi	r20, 0xFA	; 250
    4056:	54 e4       	ldi	r21, 0x44	; 68
    4058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f8 01       	movw	r30, r16
    4062:	80 83       	st	Z, r24
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	a2 83       	std	Z+2, r26	; 0x02
    4068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    406a:	fe 01       	movw	r30, r28
    406c:	e5 5a       	subi	r30, 0xA5	; 165
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	60 81       	ld	r22, Z
    4072:	71 81       	ldd	r23, Z+1	; 0x01
    4074:	82 81       	ldd	r24, Z+2	; 0x02
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e8       	ldi	r20, 0x80	; 128
    407e:	5f e3       	ldi	r21, 0x3F	; 63
    4080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4084:	88 23       	and	r24, r24
    4086:	44 f4       	brge	.+16     	; 0x4098 <main+0x6b4>
		__ticks = 1;
    4088:	fe 01       	movw	r30, r28
    408a:	e7 5a       	subi	r30, 0xA7	; 167
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	91 83       	std	Z+1, r25	; 0x01
    4094:	80 83       	st	Z, r24
    4096:	64 c0       	rjmp	.+200    	; 0x4160 <main+0x77c>
	else if (__tmp > 65535)
    4098:	fe 01       	movw	r30, r28
    409a:	e5 5a       	subi	r30, 0xA5	; 165
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	60 81       	ld	r22, Z
    40a0:	71 81       	ldd	r23, Z+1	; 0x01
    40a2:	82 81       	ldd	r24, Z+2	; 0x02
    40a4:	93 81       	ldd	r25, Z+3	; 0x03
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	3f ef       	ldi	r19, 0xFF	; 255
    40aa:	4f e7       	ldi	r20, 0x7F	; 127
    40ac:	57 e4       	ldi	r21, 0x47	; 71
    40ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40b2:	18 16       	cp	r1, r24
    40b4:	0c f0       	brlt	.+2      	; 0x40b8 <main+0x6d4>
    40b6:	43 c0       	rjmp	.+134    	; 0x413e <main+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b8:	fe 01       	movw	r30, r28
    40ba:	e1 5a       	subi	r30, 0xA1	; 161
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	40 e2       	ldi	r20, 0x20	; 32
    40cc:	51 e4       	ldi	r21, 0x41	; 65
    40ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	8e 01       	movw	r16, r28
    40d8:	07 5a       	subi	r16, 0xA7	; 167
    40da:	1f 4f       	sbci	r17, 0xFF	; 255
    40dc:	bc 01       	movw	r22, r24
    40de:	cd 01       	movw	r24, r26
    40e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	f8 01       	movw	r30, r16
    40ea:	91 83       	std	Z+1, r25	; 0x01
    40ec:	80 83       	st	Z, r24
    40ee:	1f c0       	rjmp	.+62     	; 0x412e <main+0x74a>
    40f0:	fe 01       	movw	r30, r28
    40f2:	e9 5a       	subi	r30, 0xA9	; 169
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	88 ec       	ldi	r24, 0xC8	; 200
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	80 83       	st	Z, r24
    40fe:	fe 01       	movw	r30, r28
    4100:	e9 5a       	subi	r30, 0xA9	; 169
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	80 81       	ld	r24, Z
    4106:	91 81       	ldd	r25, Z+1	; 0x01
    4108:	01 97       	sbiw	r24, 0x01	; 1
    410a:	f1 f7       	brne	.-4      	; 0x4108 <main+0x724>
    410c:	fe 01       	movw	r30, r28
    410e:	e9 5a       	subi	r30, 0xA9	; 169
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	91 83       	std	Z+1, r25	; 0x01
    4114:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4116:	de 01       	movw	r26, r28
    4118:	a7 5a       	subi	r26, 0xA7	; 167
    411a:	bf 4f       	sbci	r27, 0xFF	; 255
    411c:	fe 01       	movw	r30, r28
    411e:	e7 5a       	subi	r30, 0xA7	; 167
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	80 81       	ld	r24, Z
    4124:	91 81       	ldd	r25, Z+1	; 0x01
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	11 96       	adiw	r26, 0x01	; 1
    412a:	9c 93       	st	X, r25
    412c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412e:	fe 01       	movw	r30, r28
    4130:	e7 5a       	subi	r30, 0xA7	; 167
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	d1 f6       	brne	.-76     	; 0x40f0 <main+0x70c>
    413c:	27 c0       	rjmp	.+78     	; 0x418c <main+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413e:	8e 01       	movw	r16, r28
    4140:	07 5a       	subi	r16, 0xA7	; 167
    4142:	1f 4f       	sbci	r17, 0xFF	; 255
    4144:	fe 01       	movw	r30, r28
    4146:	e5 5a       	subi	r30, 0xA5	; 165
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	60 81       	ld	r22, Z
    414c:	71 81       	ldd	r23, Z+1	; 0x01
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	f8 01       	movw	r30, r16
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	80 83       	st	Z, r24
    4160:	de 01       	movw	r26, r28
    4162:	ab 5a       	subi	r26, 0xAB	; 171
    4164:	bf 4f       	sbci	r27, 0xFF	; 255
    4166:	fe 01       	movw	r30, r28
    4168:	e7 5a       	subi	r30, 0xA7	; 167
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	91 81       	ldd	r25, Z+1	; 0x01
    4170:	8d 93       	st	X+, r24
    4172:	9c 93       	st	X, r25
    4174:	fe 01       	movw	r30, r28
    4176:	eb 5a       	subi	r30, 0xAB	; 171
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	91 81       	ldd	r25, Z+1	; 0x01
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	f1 f7       	brne	.-4      	; 0x417e <main+0x79a>
    4182:	fe 01       	movw	r30, r28
    4184:	eb 5a       	subi	r30, 0xAB	; 171
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	91 83       	std	Z+1, r25	; 0x01
    418a:	80 83       	st	Z, r24
													_delay_ms(200);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    418c:	82 e0       	ldi	r24, 0x02	; 2
    418e:	64 e0       	ldi	r22, 0x04	; 4
    4190:	40 e0       	ldi	r20, 0x00	; 0
    4192:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	65 e0       	ldi	r22, 0x05	; 5
    419a:	41 e0       	ldi	r20, 0x01	; 1
    419c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    41a0:	fe 01       	movw	r30, r28
    41a2:	ef 5a       	subi	r30, 0xAF	; 175
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	aa ef       	ldi	r26, 0xFA	; 250
    41ac:	b4 e4       	ldi	r27, 0x44	; 68
    41ae:	80 83       	st	Z, r24
    41b0:	91 83       	std	Z+1, r25	; 0x01
    41b2:	a2 83       	std	Z+2, r26	; 0x02
    41b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b6:	8e 01       	movw	r16, r28
    41b8:	03 5b       	subi	r16, 0xB3	; 179
    41ba:	1f 4f       	sbci	r17, 0xFF	; 255
    41bc:	fe 01       	movw	r30, r28
    41be:	ef 5a       	subi	r30, 0xAF	; 175
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	60 81       	ld	r22, Z
    41c4:	71 81       	ldd	r23, Z+1	; 0x01
    41c6:	82 81       	ldd	r24, Z+2	; 0x02
    41c8:	93 81       	ldd	r25, Z+3	; 0x03
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	4a ef       	ldi	r20, 0xFA	; 250
    41d0:	54 e4       	ldi	r21, 0x44	; 68
    41d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	f8 01       	movw	r30, r16
    41dc:	80 83       	st	Z, r24
    41de:	91 83       	std	Z+1, r25	; 0x01
    41e0:	a2 83       	std	Z+2, r26	; 0x02
    41e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41e4:	fe 01       	movw	r30, r28
    41e6:	e3 5b       	subi	r30, 0xB3	; 179
    41e8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ea:	60 81       	ld	r22, Z
    41ec:	71 81       	ldd	r23, Z+1	; 0x01
    41ee:	82 81       	ldd	r24, Z+2	; 0x02
    41f0:	93 81       	ldd	r25, Z+3	; 0x03
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	40 e8       	ldi	r20, 0x80	; 128
    41f8:	5f e3       	ldi	r21, 0x3F	; 63
    41fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41fe:	88 23       	and	r24, r24
    4200:	44 f4       	brge	.+16     	; 0x4212 <main+0x82e>
		__ticks = 1;
    4202:	fe 01       	movw	r30, r28
    4204:	e5 5b       	subi	r30, 0xB5	; 181
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	91 83       	std	Z+1, r25	; 0x01
    420e:	80 83       	st	Z, r24
    4210:	64 c0       	rjmp	.+200    	; 0x42da <main+0x8f6>
	else if (__tmp > 65535)
    4212:	fe 01       	movw	r30, r28
    4214:	e3 5b       	subi	r30, 0xB3	; 179
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	60 81       	ld	r22, Z
    421a:	71 81       	ldd	r23, Z+1	; 0x01
    421c:	82 81       	ldd	r24, Z+2	; 0x02
    421e:	93 81       	ldd	r25, Z+3	; 0x03
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	3f ef       	ldi	r19, 0xFF	; 255
    4224:	4f e7       	ldi	r20, 0x7F	; 127
    4226:	57 e4       	ldi	r21, 0x47	; 71
    4228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    422c:	18 16       	cp	r1, r24
    422e:	0c f0       	brlt	.+2      	; 0x4232 <main+0x84e>
    4230:	43 c0       	rjmp	.+134    	; 0x42b8 <main+0x8d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4232:	fe 01       	movw	r30, r28
    4234:	ef 5a       	subi	r30, 0xAF	; 175
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	60 81       	ld	r22, Z
    423a:	71 81       	ldd	r23, Z+1	; 0x01
    423c:	82 81       	ldd	r24, Z+2	; 0x02
    423e:	93 81       	ldd	r25, Z+3	; 0x03
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	40 e2       	ldi	r20, 0x20	; 32
    4246:	51 e4       	ldi	r21, 0x41	; 65
    4248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	8e 01       	movw	r16, r28
    4252:	05 5b       	subi	r16, 0xB5	; 181
    4254:	1f 4f       	sbci	r17, 0xFF	; 255
    4256:	bc 01       	movw	r22, r24
    4258:	cd 01       	movw	r24, r26
    425a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	f8 01       	movw	r30, r16
    4264:	91 83       	std	Z+1, r25	; 0x01
    4266:	80 83       	st	Z, r24
    4268:	1f c0       	rjmp	.+62     	; 0x42a8 <main+0x8c4>
    426a:	fe 01       	movw	r30, r28
    426c:	e7 5b       	subi	r30, 0xB7	; 183
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	88 ec       	ldi	r24, 0xC8	; 200
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	91 83       	std	Z+1, r25	; 0x01
    4276:	80 83       	st	Z, r24
    4278:	fe 01       	movw	r30, r28
    427a:	e7 5b       	subi	r30, 0xB7	; 183
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	80 81       	ld	r24, Z
    4280:	91 81       	ldd	r25, Z+1	; 0x01
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	f1 f7       	brne	.-4      	; 0x4282 <main+0x89e>
    4286:	fe 01       	movw	r30, r28
    4288:	e7 5b       	subi	r30, 0xB7	; 183
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	91 83       	std	Z+1, r25	; 0x01
    428e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4290:	de 01       	movw	r26, r28
    4292:	a5 5b       	subi	r26, 0xB5	; 181
    4294:	bf 4f       	sbci	r27, 0xFF	; 255
    4296:	fe 01       	movw	r30, r28
    4298:	e5 5b       	subi	r30, 0xB5	; 181
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	80 81       	ld	r24, Z
    429e:	91 81       	ldd	r25, Z+1	; 0x01
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	11 96       	adiw	r26, 0x01	; 1
    42a4:	9c 93       	st	X, r25
    42a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a8:	fe 01       	movw	r30, r28
    42aa:	e5 5b       	subi	r30, 0xB5	; 181
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	80 81       	ld	r24, Z
    42b0:	91 81       	ldd	r25, Z+1	; 0x01
    42b2:	00 97       	sbiw	r24, 0x00	; 0
    42b4:	d1 f6       	brne	.-76     	; 0x426a <main+0x886>
    42b6:	27 c0       	rjmp	.+78     	; 0x4306 <main+0x922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b8:	8e 01       	movw	r16, r28
    42ba:	05 5b       	subi	r16, 0xB5	; 181
    42bc:	1f 4f       	sbci	r17, 0xFF	; 255
    42be:	fe 01       	movw	r30, r28
    42c0:	e3 5b       	subi	r30, 0xB3	; 179
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	60 81       	ld	r22, Z
    42c6:	71 81       	ldd	r23, Z+1	; 0x01
    42c8:	82 81       	ldd	r24, Z+2	; 0x02
    42ca:	93 81       	ldd	r25, Z+3	; 0x03
    42cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	f8 01       	movw	r30, r16
    42d6:	91 83       	std	Z+1, r25	; 0x01
    42d8:	80 83       	st	Z, r24
    42da:	de 01       	movw	r26, r28
    42dc:	a9 5b       	subi	r26, 0xB9	; 185
    42de:	bf 4f       	sbci	r27, 0xFF	; 255
    42e0:	fe 01       	movw	r30, r28
    42e2:	e5 5b       	subi	r30, 0xB5	; 181
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	80 81       	ld	r24, Z
    42e8:	91 81       	ldd	r25, Z+1	; 0x01
    42ea:	8d 93       	st	X+, r24
    42ec:	9c 93       	st	X, r25
    42ee:	fe 01       	movw	r30, r28
    42f0:	e9 5b       	subi	r30, 0xB9	; 185
    42f2:	ff 4f       	sbci	r31, 0xFF	; 255
    42f4:	80 81       	ld	r24, Z
    42f6:	91 81       	ldd	r25, Z+1	; 0x01
    42f8:	01 97       	sbiw	r24, 0x01	; 1
    42fa:	f1 f7       	brne	.-4      	; 0x42f8 <main+0x914>
    42fc:	fe 01       	movw	r30, r28
    42fe:	e9 5b       	subi	r30, 0xB9	; 185
    4300:	ff 4f       	sbci	r31, 0xFF	; 255
    4302:	91 83       	std	Z+1, r25	; 0x01
    4304:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    4306:	82 e0       	ldi	r24, 0x02	; 2
    4308:	63 e0       	ldi	r22, 0x03	; 3
    430a:	41 e0       	ldi	r20, 0x01	; 1
    430c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    4310:	82 e0       	ldi	r24, 0x02	; 2
    4312:	65 e0       	ldi	r22, 0x05	; 5
    4314:	40 e0       	ldi	r20, 0x00	; 0
    4316:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    431a:	ed cb       	rjmp	.-2086   	; 0x3af6 <main+0x112>

											}

										break;}
									}
									else if(Local_u8Key=='2'){
    431c:	fe 01       	movw	r30, r28
    431e:	e2 57       	subi	r30, 0x72	; 114
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 81       	ld	r24, Z
    4324:	82 33       	cpi	r24, 0x32	; 50
    4326:	09 f0       	breq	.+2      	; 0x432a <main+0x946>
    4328:	e6 cb       	rjmp	.-2100   	; 0x3af6 <main+0x112>
										LCD_voideInit();
    432a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_voideInit>
							            LCD_PrintString("1-90 2-180 3-270");
    432e:	80 e9       	ldi	r24, 0x90	; 144
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
							            LCD_voidSendCmnd(0xC0);
    4336:	80 ec       	ldi	r24, 0xC0	; 192
    4338:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_voidSendCmnd>
							            LCD_PrintString("4-360");
    433c:	81 ea       	ldi	r24, 0xA1	; 161
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>
										while(1){
											KPD_u8GetKeyState(&Local_u8Key);
    4344:	ce 01       	movw	r24, r28
    4346:	82 57       	subi	r24, 0x72	; 114
    4348:	9f 4f       	sbci	r25, 0xFF	; 255
    434a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <KPD_u8GetKeyState>
											if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    434e:	fe 01       	movw	r30, r28
    4350:	e2 57       	subi	r30, 0x72	; 114
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	80 81       	ld	r24, Z
    4356:	8f 3f       	cpi	r24, 0xFF	; 255
    4358:	09 f4       	brne	.+2      	; 0x435c <main+0x978>
    435a:	cd cb       	rjmp	.-2150   	; 0x3af6 <main+0x112>
												if(Local_u8Key=='1'){
    435c:	fe 01       	movw	r30, r28
    435e:	e2 57       	subi	r30, 0x72	; 114
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	80 81       	ld	r24, Z
    4364:	81 33       	cpi	r24, 0x31	; 49
    4366:	09 f0       	breq	.+2      	; 0x436a <main+0x986>
    4368:	90 c0       	rjmp	.+288    	; 0x448a <main+0xaa6>
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    436a:	82 e0       	ldi	r24, 0x02	; 2
    436c:	66 e0       	ldi	r22, 0x06	; 6
    436e:	41 e0       	ldi	r20, 0x01	; 1
    4370:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    4374:	fe 01       	movw	r30, r28
    4376:	ed 5b       	subi	r30, 0xBD	; 189
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	a8 e4       	ldi	r26, 0x48	; 72
    4380:	b3 e4       	ldi	r27, 0x43	; 67
    4382:	80 83       	st	Z, r24
    4384:	91 83       	std	Z+1, r25	; 0x01
    4386:	a2 83       	std	Z+2, r26	; 0x02
    4388:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    438a:	8e 01       	movw	r16, r28
    438c:	01 5c       	subi	r16, 0xC1	; 193
    438e:	1f 4f       	sbci	r17, 0xFF	; 255
    4390:	fe 01       	movw	r30, r28
    4392:	ed 5b       	subi	r30, 0xBD	; 189
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	60 81       	ld	r22, Z
    4398:	71 81       	ldd	r23, Z+1	; 0x01
    439a:	82 81       	ldd	r24, Z+2	; 0x02
    439c:	93 81       	ldd	r25, Z+3	; 0x03
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	4a ef       	ldi	r20, 0xFA	; 250
    43a4:	54 e4       	ldi	r21, 0x44	; 68
    43a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	f8 01       	movw	r30, r16
    43b0:	80 83       	st	Z, r24
    43b2:	91 83       	std	Z+1, r25	; 0x01
    43b4:	a2 83       	std	Z+2, r26	; 0x02
    43b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43b8:	fe 01       	movw	r30, r28
    43ba:	ff 96       	adiw	r30, 0x3f	; 63
    43bc:	60 81       	ld	r22, Z
    43be:	71 81       	ldd	r23, Z+1	; 0x01
    43c0:	82 81       	ldd	r24, Z+2	; 0x02
    43c2:	93 81       	ldd	r25, Z+3	; 0x03
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e8       	ldi	r20, 0x80	; 128
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d0:	88 23       	and	r24, r24
    43d2:	2c f4       	brge	.+10     	; 0x43de <main+0x9fa>
		__ticks = 1;
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	9e af       	std	Y+62, r25	; 0x3e
    43da:	8d af       	std	Y+61, r24	; 0x3d
    43dc:	46 c0       	rjmp	.+140    	; 0x446a <main+0xa86>
	else if (__tmp > 65535)
    43de:	fe 01       	movw	r30, r28
    43e0:	ff 96       	adiw	r30, 0x3f	; 63
    43e2:	60 81       	ld	r22, Z
    43e4:	71 81       	ldd	r23, Z+1	; 0x01
    43e6:	82 81       	ldd	r24, Z+2	; 0x02
    43e8:	93 81       	ldd	r25, Z+3	; 0x03
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	3f ef       	ldi	r19, 0xFF	; 255
    43ee:	4f e7       	ldi	r20, 0x7F	; 127
    43f0:	57 e4       	ldi	r21, 0x47	; 71
    43f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f6:	18 16       	cp	r1, r24
    43f8:	64 f5       	brge	.+88     	; 0x4452 <main+0xa6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43fa:	fe 01       	movw	r30, r28
    43fc:	ed 5b       	subi	r30, 0xBD	; 189
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	60 81       	ld	r22, Z
    4402:	71 81       	ldd	r23, Z+1	; 0x01
    4404:	82 81       	ldd	r24, Z+2	; 0x02
    4406:	93 81       	ldd	r25, Z+3	; 0x03
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	40 e2       	ldi	r20, 0x20	; 32
    440e:	51 e4       	ldi	r21, 0x41	; 65
    4410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	bc 01       	movw	r22, r24
    441a:	cd 01       	movw	r24, r26
    441c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	9e af       	std	Y+62, r25	; 0x3e
    4426:	8d af       	std	Y+61, r24	; 0x3d
    4428:	0f c0       	rjmp	.+30     	; 0x4448 <main+0xa64>
    442a:	88 ec       	ldi	r24, 0xC8	; 200
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	9c af       	std	Y+60, r25	; 0x3c
    4430:	8b af       	std	Y+59, r24	; 0x3b
    4432:	8b ad       	ldd	r24, Y+59	; 0x3b
    4434:	9c ad       	ldd	r25, Y+60	; 0x3c
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	f1 f7       	brne	.-4      	; 0x4436 <main+0xa52>
    443a:	9c af       	std	Y+60, r25	; 0x3c
    443c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4440:	9e ad       	ldd	r25, Y+62	; 0x3e
    4442:	01 97       	sbiw	r24, 0x01	; 1
    4444:	9e af       	std	Y+62, r25	; 0x3e
    4446:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4448:	8d ad       	ldd	r24, Y+61	; 0x3d
    444a:	9e ad       	ldd	r25, Y+62	; 0x3e
    444c:	00 97       	sbiw	r24, 0x00	; 0
    444e:	69 f7       	brne	.-38     	; 0x442a <main+0xa46>
    4450:	16 c0       	rjmp	.+44     	; 0x447e <main+0xa9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4452:	fe 01       	movw	r30, r28
    4454:	ff 96       	adiw	r30, 0x3f	; 63
    4456:	60 81       	ld	r22, Z
    4458:	71 81       	ldd	r23, Z+1	; 0x01
    445a:	82 81       	ldd	r24, Z+2	; 0x02
    445c:	93 81       	ldd	r25, Z+3	; 0x03
    445e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	9e af       	std	Y+62, r25	; 0x3e
    4468:	8d af       	std	Y+61, r24	; 0x3d
    446a:	8d ad       	ldd	r24, Y+61	; 0x3d
    446c:	9e ad       	ldd	r25, Y+62	; 0x3e
    446e:	9a af       	std	Y+58, r25	; 0x3a
    4470:	89 af       	std	Y+57, r24	; 0x39
    4472:	89 ad       	ldd	r24, Y+57	; 0x39
    4474:	9a ad       	ldd	r25, Y+58	; 0x3a
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <main+0xa92>
    447a:	9a af       	std	Y+58, r25	; 0x3a
    447c:	89 af       	std	Y+57, r24	; 0x39
												_delay_ms(200);
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	65 e0       	ldi	r22, 0x05	; 5
    4482:	41 e0       	ldi	r20, 0x01	; 1
    4484:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    4488:	36 cb       	rjmp	.-2452   	; 0x3af6 <main+0x112>
												break;
												}
												else if (Local_u8Key=='2')
    448a:	fe 01       	movw	r30, r28
    448c:	e2 57       	subi	r30, 0x72	; 114
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	80 81       	ld	r24, Z
    4492:	82 33       	cpi	r24, 0x32	; 50
    4494:	59 f4       	brne	.+22     	; 0x44ac <main+0xac8>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    4496:	82 e0       	ldi	r24, 0x02	; 2
    4498:	65 e0       	ldi	r22, 0x05	; 5
    449a:	41 e0       	ldi	r20, 0x01	; 1
    449c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    44a0:	82 e0       	ldi	r24, 0x02	; 2
    44a2:	64 e0       	ldi	r22, 0x04	; 4
    44a4:	41 e0       	ldi	r20, 0x01	; 1
    44a6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    44aa:	25 cb       	rjmp	.-2486   	; 0x3af6 <main+0x112>
													break;
												}
												else if (Local_u8Key=='3')
    44ac:	fe 01       	movw	r30, r28
    44ae:	e2 57       	subi	r30, 0x72	; 114
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	80 81       	ld	r24, Z
    44b4:	83 33       	cpi	r24, 0x33	; 51
    44b6:	09 f0       	breq	.+2      	; 0x44ba <main+0xad6>
    44b8:	87 c0       	rjmp	.+270    	; 0x45c8 <main+0xbe4>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    44ba:	82 e0       	ldi	r24, 0x02	; 2
    44bc:	65 e0       	ldi	r22, 0x05	; 5
    44be:	41 e0       	ldi	r20, 0x01	; 1
    44c0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    44c4:	82 e0       	ldi	r24, 0x02	; 2
    44c6:	64 e0       	ldi	r22, 0x04	; 4
    44c8:	41 e0       	ldi	r20, 0x01	; 1
    44ca:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	aa ef       	ldi	r26, 0xFA	; 250
    44d4:	b4 e4       	ldi	r27, 0x44	; 68
    44d6:	8d ab       	std	Y+53, r24	; 0x35
    44d8:	9e ab       	std	Y+54, r25	; 0x36
    44da:	af ab       	std	Y+55, r26	; 0x37
    44dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44de:	6d a9       	ldd	r22, Y+53	; 0x35
    44e0:	7e a9       	ldd	r23, Y+54	; 0x36
    44e2:	8f a9       	ldd	r24, Y+55	; 0x37
    44e4:	98 ad       	ldd	r25, Y+56	; 0x38
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	4a ef       	ldi	r20, 0xFA	; 250
    44ec:	54 e4       	ldi	r21, 0x44	; 68
    44ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	89 ab       	std	Y+49, r24	; 0x31
    44f8:	9a ab       	std	Y+50, r25	; 0x32
    44fa:	ab ab       	std	Y+51, r26	; 0x33
    44fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44fe:	69 a9       	ldd	r22, Y+49	; 0x31
    4500:	7a a9       	ldd	r23, Y+50	; 0x32
    4502:	8b a9       	ldd	r24, Y+51	; 0x33
    4504:	9c a9       	ldd	r25, Y+52	; 0x34
    4506:	20 e0       	ldi	r18, 0x00	; 0
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	40 e8       	ldi	r20, 0x80	; 128
    450c:	5f e3       	ldi	r21, 0x3F	; 63
    450e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4512:	88 23       	and	r24, r24
    4514:	2c f4       	brge	.+10     	; 0x4520 <main+0xb3c>
		__ticks = 1;
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	98 ab       	std	Y+48, r25	; 0x30
    451c:	8f a7       	std	Y+47, r24	; 0x2f
    451e:	3f c0       	rjmp	.+126    	; 0x459e <main+0xbba>
	else if (__tmp > 65535)
    4520:	69 a9       	ldd	r22, Y+49	; 0x31
    4522:	7a a9       	ldd	r23, Y+50	; 0x32
    4524:	8b a9       	ldd	r24, Y+51	; 0x33
    4526:	9c a9       	ldd	r25, Y+52	; 0x34
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	3f ef       	ldi	r19, 0xFF	; 255
    452c:	4f e7       	ldi	r20, 0x7F	; 127
    452e:	57 e4       	ldi	r21, 0x47	; 71
    4530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4534:	18 16       	cp	r1, r24
    4536:	4c f5       	brge	.+82     	; 0x458a <main+0xba6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4538:	6d a9       	ldd	r22, Y+53	; 0x35
    453a:	7e a9       	ldd	r23, Y+54	; 0x36
    453c:	8f a9       	ldd	r24, Y+55	; 0x37
    453e:	98 ad       	ldd	r25, Y+56	; 0x38
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e2       	ldi	r20, 0x20	; 32
    4546:	51 e4       	ldi	r21, 0x41	; 65
    4548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	bc 01       	movw	r22, r24
    4552:	cd 01       	movw	r24, r26
    4554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	98 ab       	std	Y+48, r25	; 0x30
    455e:	8f a7       	std	Y+47, r24	; 0x2f
    4560:	0f c0       	rjmp	.+30     	; 0x4580 <main+0xb9c>
    4562:	88 ec       	ldi	r24, 0xC8	; 200
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	9e a7       	std	Y+46, r25	; 0x2e
    4568:	8d a7       	std	Y+45, r24	; 0x2d
    456a:	8d a5       	ldd	r24, Y+45	; 0x2d
    456c:	9e a5       	ldd	r25, Y+46	; 0x2e
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <main+0xb8a>
    4572:	9e a7       	std	Y+46, r25	; 0x2e
    4574:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4576:	8f a5       	ldd	r24, Y+47	; 0x2f
    4578:	98 a9       	ldd	r25, Y+48	; 0x30
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	98 ab       	std	Y+48, r25	; 0x30
    457e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4580:	8f a5       	ldd	r24, Y+47	; 0x2f
    4582:	98 a9       	ldd	r25, Y+48	; 0x30
    4584:	00 97       	sbiw	r24, 0x00	; 0
    4586:	69 f7       	brne	.-38     	; 0x4562 <main+0xb7e>
    4588:	14 c0       	rjmp	.+40     	; 0x45b2 <main+0xbce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458a:	69 a9       	ldd	r22, Y+49	; 0x31
    458c:	7a a9       	ldd	r23, Y+50	; 0x32
    458e:	8b a9       	ldd	r24, Y+51	; 0x33
    4590:	9c a9       	ldd	r25, Y+52	; 0x34
    4592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	98 ab       	std	Y+48, r25	; 0x30
    459c:	8f a7       	std	Y+47, r24	; 0x2f
    459e:	8f a5       	ldd	r24, Y+47	; 0x2f
    45a0:	98 a9       	ldd	r25, Y+48	; 0x30
    45a2:	9c a7       	std	Y+44, r25	; 0x2c
    45a4:	8b a7       	std	Y+43, r24	; 0x2b
    45a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    45a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <main+0xbc6>
    45ae:	9c a7       	std	Y+44, r25	; 0x2c
    45b0:	8b a7       	std	Y+43, r24	; 0x2b
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	65 e0       	ldi	r22, 0x05	; 5
    45b6:	40 e0       	ldi	r20, 0x00	; 0
    45b8:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    45bc:	82 e0       	ldi	r24, 0x02	; 2
    45be:	63 e0       	ldi	r22, 0x03	; 3
    45c0:	41 e0       	ldi	r20, 0x01	; 1
    45c2:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    45c6:	97 ca       	rjmp	.-2770   	; 0x3af6 <main+0x112>
													break;
												}
												else if (Local_u8Key=='4')
    45c8:	fe 01       	movw	r30, r28
    45ca:	e2 57       	subi	r30, 0x72	; 114
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	80 81       	ld	r24, Z
    45d0:	84 33       	cpi	r24, 0x34	; 52
    45d2:	09 f0       	breq	.+2      	; 0x45d6 <main+0xbf2>
    45d4:	90 ca       	rjmp	.-2784   	; 0x3af6 <main+0x112>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    45d6:	82 e0       	ldi	r24, 0x02	; 2
    45d8:	65 e0       	ldi	r22, 0x05	; 5
    45da:	41 e0       	ldi	r20, 0x01	; 1
    45dc:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    45e0:	82 e0       	ldi	r24, 0x02	; 2
    45e2:	66 e0       	ldi	r22, 0x06	; 6
    45e4:	41 e0       	ldi	r20, 0x01	; 1
    45e6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	aa ef       	ldi	r26, 0xFA	; 250
    45f0:	b4 e4       	ldi	r27, 0x44	; 68
    45f2:	8f a3       	std	Y+39, r24	; 0x27
    45f4:	98 a7       	std	Y+40, r25	; 0x28
    45f6:	a9 a7       	std	Y+41, r26	; 0x29
    45f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45fa:	6f a1       	ldd	r22, Y+39	; 0x27
    45fc:	78 a5       	ldd	r23, Y+40	; 0x28
    45fe:	89 a5       	ldd	r24, Y+41	; 0x29
    4600:	9a a5       	ldd	r25, Y+42	; 0x2a
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	4a ef       	ldi	r20, 0xFA	; 250
    4608:	54 e4       	ldi	r21, 0x44	; 68
    460a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	8b a3       	std	Y+35, r24	; 0x23
    4614:	9c a3       	std	Y+36, r25	; 0x24
    4616:	ad a3       	std	Y+37, r26	; 0x25
    4618:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    461a:	6b a1       	ldd	r22, Y+35	; 0x23
    461c:	7c a1       	ldd	r23, Y+36	; 0x24
    461e:	8d a1       	ldd	r24, Y+37	; 0x25
    4620:	9e a1       	ldd	r25, Y+38	; 0x26
    4622:	20 e0       	ldi	r18, 0x00	; 0
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	40 e8       	ldi	r20, 0x80	; 128
    4628:	5f e3       	ldi	r21, 0x3F	; 63
    462a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    462e:	88 23       	and	r24, r24
    4630:	2c f4       	brge	.+10     	; 0x463c <main+0xc58>
		__ticks = 1;
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	9a a3       	std	Y+34, r25	; 0x22
    4638:	89 a3       	std	Y+33, r24	; 0x21
    463a:	3f c0       	rjmp	.+126    	; 0x46ba <main+0xcd6>
	else if (__tmp > 65535)
    463c:	6b a1       	ldd	r22, Y+35	; 0x23
    463e:	7c a1       	ldd	r23, Y+36	; 0x24
    4640:	8d a1       	ldd	r24, Y+37	; 0x25
    4642:	9e a1       	ldd	r25, Y+38	; 0x26
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	3f ef       	ldi	r19, 0xFF	; 255
    4648:	4f e7       	ldi	r20, 0x7F	; 127
    464a:	57 e4       	ldi	r21, 0x47	; 71
    464c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4650:	18 16       	cp	r1, r24
    4652:	4c f5       	brge	.+82     	; 0x46a6 <main+0xcc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4654:	6f a1       	ldd	r22, Y+39	; 0x27
    4656:	78 a5       	ldd	r23, Y+40	; 0x28
    4658:	89 a5       	ldd	r24, Y+41	; 0x29
    465a:	9a a5       	ldd	r25, Y+42	; 0x2a
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e2       	ldi	r20, 0x20	; 32
    4662:	51 e4       	ldi	r21, 0x41	; 65
    4664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	bc 01       	movw	r22, r24
    466e:	cd 01       	movw	r24, r26
    4670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	9a a3       	std	Y+34, r25	; 0x22
    467a:	89 a3       	std	Y+33, r24	; 0x21
    467c:	0f c0       	rjmp	.+30     	; 0x469c <main+0xcb8>
    467e:	88 ec       	ldi	r24, 0xC8	; 200
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	98 a3       	std	Y+32, r25	; 0x20
    4684:	8f 8f       	std	Y+31, r24	; 0x1f
    4686:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4688:	98 a1       	ldd	r25, Y+32	; 0x20
    468a:	01 97       	sbiw	r24, 0x01	; 1
    468c:	f1 f7       	brne	.-4      	; 0x468a <main+0xca6>
    468e:	98 a3       	std	Y+32, r25	; 0x20
    4690:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4692:	89 a1       	ldd	r24, Y+33	; 0x21
    4694:	9a a1       	ldd	r25, Y+34	; 0x22
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	9a a3       	std	Y+34, r25	; 0x22
    469a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    469c:	89 a1       	ldd	r24, Y+33	; 0x21
    469e:	9a a1       	ldd	r25, Y+34	; 0x22
    46a0:	00 97       	sbiw	r24, 0x00	; 0
    46a2:	69 f7       	brne	.-38     	; 0x467e <main+0xc9a>
    46a4:	14 c0       	rjmp	.+40     	; 0x46ce <main+0xcea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a6:	6b a1       	ldd	r22, Y+35	; 0x23
    46a8:	7c a1       	ldd	r23, Y+36	; 0x24
    46aa:	8d a1       	ldd	r24, Y+37	; 0x25
    46ac:	9e a1       	ldd	r25, Y+38	; 0x26
    46ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b2:	dc 01       	movw	r26, r24
    46b4:	cb 01       	movw	r24, r22
    46b6:	9a a3       	std	Y+34, r25	; 0x22
    46b8:	89 a3       	std	Y+33, r24	; 0x21
    46ba:	89 a1       	ldd	r24, Y+33	; 0x21
    46bc:	9a a1       	ldd	r25, Y+34	; 0x22
    46be:	9e 8f       	std	Y+30, r25	; 0x1e
    46c0:	8d 8f       	std	Y+29, r24	; 0x1d
    46c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	f1 f7       	brne	.-4      	; 0x46c6 <main+0xce2>
    46ca:	9e 8f       	std	Y+30, r25	; 0x1e
    46cc:	8d 8f       	std	Y+29, r24	; 0x1d
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    46ce:	82 e0       	ldi	r24, 0x02	; 2
    46d0:	64 e0       	ldi	r22, 0x04	; 4
    46d2:	41 e0       	ldi	r20, 0x01	; 1
    46d4:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	a8 e4       	ldi	r26, 0x48	; 72
    46de:	b3 e4       	ldi	r27, 0x43	; 67
    46e0:	89 8f       	std	Y+25, r24	; 0x19
    46e2:	9a 8f       	std	Y+26, r25	; 0x1a
    46e4:	ab 8f       	std	Y+27, r26	; 0x1b
    46e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46e8:	69 8d       	ldd	r22, Y+25	; 0x19
    46ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	4a ef       	ldi	r20, 0xFA	; 250
    46f6:	54 e4       	ldi	r21, 0x44	; 68
    46f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	8d 8b       	std	Y+21, r24	; 0x15
    4702:	9e 8b       	std	Y+22, r25	; 0x16
    4704:	af 8b       	std	Y+23, r26	; 0x17
    4706:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4708:	6d 89       	ldd	r22, Y+21	; 0x15
    470a:	7e 89       	ldd	r23, Y+22	; 0x16
    470c:	8f 89       	ldd	r24, Y+23	; 0x17
    470e:	98 8d       	ldd	r25, Y+24	; 0x18
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	40 e8       	ldi	r20, 0x80	; 128
    4716:	5f e3       	ldi	r21, 0x3F	; 63
    4718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    471c:	88 23       	and	r24, r24
    471e:	2c f4       	brge	.+10     	; 0x472a <main+0xd46>
		__ticks = 1;
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	9c 8b       	std	Y+20, r25	; 0x14
    4726:	8b 8b       	std	Y+19, r24	; 0x13
    4728:	3f c0       	rjmp	.+126    	; 0x47a8 <main+0xdc4>
	else if (__tmp > 65535)
    472a:	6d 89       	ldd	r22, Y+21	; 0x15
    472c:	7e 89       	ldd	r23, Y+22	; 0x16
    472e:	8f 89       	ldd	r24, Y+23	; 0x17
    4730:	98 8d       	ldd	r25, Y+24	; 0x18
    4732:	20 e0       	ldi	r18, 0x00	; 0
    4734:	3f ef       	ldi	r19, 0xFF	; 255
    4736:	4f e7       	ldi	r20, 0x7F	; 127
    4738:	57 e4       	ldi	r21, 0x47	; 71
    473a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    473e:	18 16       	cp	r1, r24
    4740:	4c f5       	brge	.+82     	; 0x4794 <main+0xdb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4742:	69 8d       	ldd	r22, Y+25	; 0x19
    4744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4748:	9c 8d       	ldd	r25, Y+28	; 0x1c
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	40 e2       	ldi	r20, 0x20	; 32
    4750:	51 e4       	ldi	r21, 0x41	; 65
    4752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4756:	dc 01       	movw	r26, r24
    4758:	cb 01       	movw	r24, r22
    475a:	bc 01       	movw	r22, r24
    475c:	cd 01       	movw	r24, r26
    475e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	9c 8b       	std	Y+20, r25	; 0x14
    4768:	8b 8b       	std	Y+19, r24	; 0x13
    476a:	0f c0       	rjmp	.+30     	; 0x478a <main+0xda6>
    476c:	88 ec       	ldi	r24, 0xC8	; 200
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	9a 8b       	std	Y+18, r25	; 0x12
    4772:	89 8b       	std	Y+17, r24	; 0x11
    4774:	89 89       	ldd	r24, Y+17	; 0x11
    4776:	9a 89       	ldd	r25, Y+18	; 0x12
    4778:	01 97       	sbiw	r24, 0x01	; 1
    477a:	f1 f7       	brne	.-4      	; 0x4778 <main+0xd94>
    477c:	9a 8b       	std	Y+18, r25	; 0x12
    477e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4780:	8b 89       	ldd	r24, Y+19	; 0x13
    4782:	9c 89       	ldd	r25, Y+20	; 0x14
    4784:	01 97       	sbiw	r24, 0x01	; 1
    4786:	9c 8b       	std	Y+20, r25	; 0x14
    4788:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    478a:	8b 89       	ldd	r24, Y+19	; 0x13
    478c:	9c 89       	ldd	r25, Y+20	; 0x14
    478e:	00 97       	sbiw	r24, 0x00	; 0
    4790:	69 f7       	brne	.-38     	; 0x476c <main+0xd88>
    4792:	14 c0       	rjmp	.+40     	; 0x47bc <main+0xdd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4794:	6d 89       	ldd	r22, Y+21	; 0x15
    4796:	7e 89       	ldd	r23, Y+22	; 0x16
    4798:	8f 89       	ldd	r24, Y+23	; 0x17
    479a:	98 8d       	ldd	r25, Y+24	; 0x18
    479c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a0:	dc 01       	movw	r26, r24
    47a2:	cb 01       	movw	r24, r22
    47a4:	9c 8b       	std	Y+20, r25	; 0x14
    47a6:	8b 8b       	std	Y+19, r24	; 0x13
    47a8:	8b 89       	ldd	r24, Y+19	; 0x13
    47aa:	9c 89       	ldd	r25, Y+20	; 0x14
    47ac:	98 8b       	std	Y+16, r25	; 0x10
    47ae:	8f 87       	std	Y+15, r24	; 0x0f
    47b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    47b2:	98 89       	ldd	r25, Y+16	; 0x10
    47b4:	01 97       	sbiw	r24, 0x01	; 1
    47b6:	f1 f7       	brne	.-4      	; 0x47b4 <main+0xdd0>
    47b8:	98 8b       	std	Y+16, r25	; 0x10
    47ba:	8f 87       	std	Y+15, r24	; 0x0f
													_delay_ms(200);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    47bc:	82 e0       	ldi	r24, 0x02	; 2
    47be:	65 e0       	ldi	r22, 0x05	; 5
    47c0:	40 e0       	ldi	r20, 0x00	; 0
    47c2:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    47c6:	82 e0       	ldi	r24, 0x02	; 2
    47c8:	63 e0       	ldi	r22, 0x03	; 3
    47ca:	41 e0       	ldi	r20, 0x01	; 1
    47cc:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	aa ef       	ldi	r26, 0xFA	; 250
    47d6:	b4 e4       	ldi	r27, 0x44	; 68
    47d8:	8b 87       	std	Y+11, r24	; 0x0b
    47da:	9c 87       	std	Y+12, r25	; 0x0c
    47dc:	ad 87       	std	Y+13, r26	; 0x0d
    47de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	4a ef       	ldi	r20, 0xFA	; 250
    47ee:	54 e4       	ldi	r21, 0x44	; 68
    47f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f4:	dc 01       	movw	r26, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	8f 83       	std	Y+7, r24	; 0x07
    47fa:	98 87       	std	Y+8, r25	; 0x08
    47fc:	a9 87       	std	Y+9, r26	; 0x09
    47fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4800:	6f 81       	ldd	r22, Y+7	; 0x07
    4802:	78 85       	ldd	r23, Y+8	; 0x08
    4804:	89 85       	ldd	r24, Y+9	; 0x09
    4806:	9a 85       	ldd	r25, Y+10	; 0x0a
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	40 e8       	ldi	r20, 0x80	; 128
    480e:	5f e3       	ldi	r21, 0x3F	; 63
    4810:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4814:	88 23       	and	r24, r24
    4816:	2c f4       	brge	.+10     	; 0x4822 <main+0xe3e>
		__ticks = 1;
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	9e 83       	std	Y+6, r25	; 0x06
    481e:	8d 83       	std	Y+5, r24	; 0x05
    4820:	3f c0       	rjmp	.+126    	; 0x48a0 <main+0xebc>
	else if (__tmp > 65535)
    4822:	6f 81       	ldd	r22, Y+7	; 0x07
    4824:	78 85       	ldd	r23, Y+8	; 0x08
    4826:	89 85       	ldd	r24, Y+9	; 0x09
    4828:	9a 85       	ldd	r25, Y+10	; 0x0a
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	3f ef       	ldi	r19, 0xFF	; 255
    482e:	4f e7       	ldi	r20, 0x7F	; 127
    4830:	57 e4       	ldi	r21, 0x47	; 71
    4832:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4836:	18 16       	cp	r1, r24
    4838:	4c f5       	brge	.+82     	; 0x488c <main+0xea8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483a:	6b 85       	ldd	r22, Y+11	; 0x0b
    483c:	7c 85       	ldd	r23, Y+12	; 0x0c
    483e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4840:	9e 85       	ldd	r25, Y+14	; 0x0e
    4842:	20 e0       	ldi	r18, 0x00	; 0
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	40 e2       	ldi	r20, 0x20	; 32
    4848:	51 e4       	ldi	r21, 0x41	; 65
    484a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    484e:	dc 01       	movw	r26, r24
    4850:	cb 01       	movw	r24, r22
    4852:	bc 01       	movw	r22, r24
    4854:	cd 01       	movw	r24, r26
    4856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	9e 83       	std	Y+6, r25	; 0x06
    4860:	8d 83       	std	Y+5, r24	; 0x05
    4862:	0f c0       	rjmp	.+30     	; 0x4882 <main+0xe9e>
    4864:	88 ec       	ldi	r24, 0xC8	; 200
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	9c 83       	std	Y+4, r25	; 0x04
    486a:	8b 83       	std	Y+3, r24	; 0x03
    486c:	8b 81       	ldd	r24, Y+3	; 0x03
    486e:	9c 81       	ldd	r25, Y+4	; 0x04
    4870:	01 97       	sbiw	r24, 0x01	; 1
    4872:	f1 f7       	brne	.-4      	; 0x4870 <main+0xe8c>
    4874:	9c 83       	std	Y+4, r25	; 0x04
    4876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4878:	8d 81       	ldd	r24, Y+5	; 0x05
    487a:	9e 81       	ldd	r25, Y+6	; 0x06
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	9e 83       	std	Y+6, r25	; 0x06
    4880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4882:	8d 81       	ldd	r24, Y+5	; 0x05
    4884:	9e 81       	ldd	r25, Y+6	; 0x06
    4886:	00 97       	sbiw	r24, 0x00	; 0
    4888:	69 f7       	brne	.-38     	; 0x4864 <main+0xe80>
    488a:	14 c0       	rjmp	.+40     	; 0x48b4 <main+0xed0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    488c:	6f 81       	ldd	r22, Y+7	; 0x07
    488e:	78 85       	ldd	r23, Y+8	; 0x08
    4890:	89 85       	ldd	r24, Y+9	; 0x09
    4892:	9a 85       	ldd	r25, Y+10	; 0x0a
    4894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	9e 83       	std	Y+6, r25	; 0x06
    489e:	8d 83       	std	Y+5, r24	; 0x05
    48a0:	8d 81       	ldd	r24, Y+5	; 0x05
    48a2:	9e 81       	ldd	r25, Y+6	; 0x06
    48a4:	9a 83       	std	Y+2, r25	; 0x02
    48a6:	89 83       	std	Y+1, r24	; 0x01
    48a8:	89 81       	ldd	r24, Y+1	; 0x01
    48aa:	9a 81       	ldd	r25, Y+2	; 0x02
    48ac:	01 97       	sbiw	r24, 0x01	; 1
    48ae:	f1 f7       	brne	.-4      	; 0x48ac <main+0xec8>
    48b0:	9a 83       	std	Y+2, r25	; 0x02
    48b2:	89 83       	std	Y+1, r24	; 0x01
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    48b4:	82 e0       	ldi	r24, 0x02	; 2
    48b6:	66 e0       	ldi	r22, 0x06	; 6
    48b8:	41 e0       	ldi	r20, 0x01	; 1
    48ba:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    48be:	82 e0       	ldi	r24, 0x02	; 2
    48c0:	64 e0       	ldi	r22, 0x04	; 4
    48c2:	40 e0       	ldi	r20, 0x00	; 0
    48c4:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_voidSetPinValue>
    48c8:	16 c9       	rjmp	.-3540   	; 0x3af6 <main+0x112>
								}
							}

						}

						else if (Local_u8Key=='3')
    48ca:	fe 01       	movw	r30, r28
    48cc:	e2 57       	subi	r30, 0x72	; 114
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	80 81       	ld	r24, Z
    48d2:	83 33       	cpi	r24, 0x33	; 51
    48d4:	09 f0       	breq	.+2      	; 0x48d8 <main+0xef4>
    48d6:	c0 c8       	rjmp	.-3712   	; 0x3a58 <main+0x74>
												{
													LCD_voideInit();
    48d8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_voideInit>
											        LCD_PrintString("1-0 2-90 3-180");
    48dc:	87 ea       	ldi	r24, 0xA7	; 167
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_PrintString>

													while(1){
														KPD_u8GetKeyState(&Local_u8Key);
    48e4:	ce 01       	movw	r24, r28
    48e6:	82 57       	subi	r24, 0x72	; 114
    48e8:	9f 4f       	sbci	r25, 0xFF	; 255
    48ea:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <KPD_u8GetKeyState>
														if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    48ee:	fe 01       	movw	r30, r28
    48f0:	e2 57       	subi	r30, 0x72	; 114
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	80 81       	ld	r24, Z
    48f6:	8f 3f       	cpi	r24, 0xFF	; 255
    48f8:	a9 f3       	breq	.-22     	; 0x48e4 <main+0xf00>
														if(Local_u8Key=='1'){
    48fa:	fe 01       	movw	r30, r28
    48fc:	e2 57       	subi	r30, 0x72	; 114
    48fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4900:	80 81       	ld	r24, Z
    4902:	81 33       	cpi	r24, 0x31	; 49
    4904:	21 f4       	brne	.+8      	; 0x490e <main+0xf2a>
															Servo_Angel(1300);
    4906:	84 e1       	ldi	r24, 0x14	; 20
    4908:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <Servo_Angel>
    490c:	eb cf       	rjmp	.-42     	; 0x48e4 <main+0xf00>
														}
														else if (Local_u8Key=='2'){
    490e:	fe 01       	movw	r30, r28
    4910:	e2 57       	subi	r30, 0x72	; 114
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 81       	ld	r24, Z
    4916:	82 33       	cpi	r24, 0x32	; 50
    4918:	21 f4       	brne	.+8      	; 0x4922 <main+0xf3e>
															Servo_Angel(699);
    491a:	8b eb       	ldi	r24, 0xBB	; 187
    491c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <Servo_Angel>
    4920:	e1 cf       	rjmp	.-62     	; 0x48e4 <main+0xf00>
														}
														else if (Local_u8Key=='3'){
    4922:	fe 01       	movw	r30, r28
    4924:	e2 57       	subi	r30, 0x72	; 114
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	80 81       	ld	r24, Z
    492a:	83 33       	cpi	r24, 0x33	; 51
    492c:	d9 f6       	brne	.-74     	; 0x48e4 <main+0xf00>
															Servo_Angel(507);
    492e:	8b ef       	ldi	r24, 0xFB	; 251
    4930:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <Servo_Angel>
    4934:	d7 cf       	rjmp	.-82     	; 0x48e4 <main+0xf00>

00004936 <__udivmodsi4>:
    4936:	a1 e2       	ldi	r26, 0x21	; 33
    4938:	1a 2e       	mov	r1, r26
    493a:	aa 1b       	sub	r26, r26
    493c:	bb 1b       	sub	r27, r27
    493e:	fd 01       	movw	r30, r26
    4940:	0d c0       	rjmp	.+26     	; 0x495c <__udivmodsi4_ep>

00004942 <__udivmodsi4_loop>:
    4942:	aa 1f       	adc	r26, r26
    4944:	bb 1f       	adc	r27, r27
    4946:	ee 1f       	adc	r30, r30
    4948:	ff 1f       	adc	r31, r31
    494a:	a2 17       	cp	r26, r18
    494c:	b3 07       	cpc	r27, r19
    494e:	e4 07       	cpc	r30, r20
    4950:	f5 07       	cpc	r31, r21
    4952:	20 f0       	brcs	.+8      	; 0x495c <__udivmodsi4_ep>
    4954:	a2 1b       	sub	r26, r18
    4956:	b3 0b       	sbc	r27, r19
    4958:	e4 0b       	sbc	r30, r20
    495a:	f5 0b       	sbc	r31, r21

0000495c <__udivmodsi4_ep>:
    495c:	66 1f       	adc	r22, r22
    495e:	77 1f       	adc	r23, r23
    4960:	88 1f       	adc	r24, r24
    4962:	99 1f       	adc	r25, r25
    4964:	1a 94       	dec	r1
    4966:	69 f7       	brne	.-38     	; 0x4942 <__udivmodsi4_loop>
    4968:	60 95       	com	r22
    496a:	70 95       	com	r23
    496c:	80 95       	com	r24
    496e:	90 95       	com	r25
    4970:	9b 01       	movw	r18, r22
    4972:	ac 01       	movw	r20, r24
    4974:	bd 01       	movw	r22, r26
    4976:	cf 01       	movw	r24, r30
    4978:	08 95       	ret

0000497a <__prologue_saves__>:
    497a:	2f 92       	push	r2
    497c:	3f 92       	push	r3
    497e:	4f 92       	push	r4
    4980:	5f 92       	push	r5
    4982:	6f 92       	push	r6
    4984:	7f 92       	push	r7
    4986:	8f 92       	push	r8
    4988:	9f 92       	push	r9
    498a:	af 92       	push	r10
    498c:	bf 92       	push	r11
    498e:	cf 92       	push	r12
    4990:	df 92       	push	r13
    4992:	ef 92       	push	r14
    4994:	ff 92       	push	r15
    4996:	0f 93       	push	r16
    4998:	1f 93       	push	r17
    499a:	cf 93       	push	r28
    499c:	df 93       	push	r29
    499e:	cd b7       	in	r28, 0x3d	; 61
    49a0:	de b7       	in	r29, 0x3e	; 62
    49a2:	ca 1b       	sub	r28, r26
    49a4:	db 0b       	sbc	r29, r27
    49a6:	0f b6       	in	r0, 0x3f	; 63
    49a8:	f8 94       	cli
    49aa:	de bf       	out	0x3e, r29	; 62
    49ac:	0f be       	out	0x3f, r0	; 63
    49ae:	cd bf       	out	0x3d, r28	; 61
    49b0:	09 94       	ijmp

000049b2 <__epilogue_restores__>:
    49b2:	2a 88       	ldd	r2, Y+18	; 0x12
    49b4:	39 88       	ldd	r3, Y+17	; 0x11
    49b6:	48 88       	ldd	r4, Y+16	; 0x10
    49b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    49ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    49bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    49be:	8c 84       	ldd	r8, Y+12	; 0x0c
    49c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    49c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    49c4:	b9 84       	ldd	r11, Y+9	; 0x09
    49c6:	c8 84       	ldd	r12, Y+8	; 0x08
    49c8:	df 80       	ldd	r13, Y+7	; 0x07
    49ca:	ee 80       	ldd	r14, Y+6	; 0x06
    49cc:	fd 80       	ldd	r15, Y+5	; 0x05
    49ce:	0c 81       	ldd	r16, Y+4	; 0x04
    49d0:	1b 81       	ldd	r17, Y+3	; 0x03
    49d2:	aa 81       	ldd	r26, Y+2	; 0x02
    49d4:	b9 81       	ldd	r27, Y+1	; 0x01
    49d6:	ce 0f       	add	r28, r30
    49d8:	d1 1d       	adc	r29, r1
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	f8 94       	cli
    49de:	de bf       	out	0x3e, r29	; 62
    49e0:	0f be       	out	0x3f, r0	; 63
    49e2:	cd bf       	out	0x3d, r28	; 61
    49e4:	ed 01       	movw	r28, r26
    49e6:	08 95       	ret

000049e8 <_exit>:
    49e8:	f8 94       	cli

000049ea <__stop_program>:
    49ea:	ff cf       	rjmp	.-2      	; 0x49ea <__stop_program>
