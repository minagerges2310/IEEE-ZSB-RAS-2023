
time_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003a58  00003aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800080  00800080  00003b0c  2**0
                  ALLOC
  3 .stab         00003498  00000000  00000000  00003b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000113a  00000000  00000000  00006fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000080de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000823e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000083cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b513  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c498  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c8da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_1>
       8:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__vector_2>
       c:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__vector_10>
      2c:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 1c 	call	0x398a	; 0x398a <main>
      8a:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
/*ADC busy flag*/
static u8 ADC_u8BusyFlag = 0;


void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
      2- right adjust
      3- disable autotrigger
      4- select CLk/64
      5- enable ADc
    */
   CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
   SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24

   CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

   CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

   SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
   SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
   CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24

   SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	29 97       	sbiw	r28, 0x09	; 9
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue !=NULL))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     d48:	56 c0       	rjmp	.+172    	; 0xdf6 <ADC_u8GetDigitalValueSynchNonBlocking+0xda>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     d52:	51 c0       	rjmp	.+162    	; 0xdf6 <ADC_u8GetDigitalValueSynchNonBlocking+0xda>
    {
        /*clear mux4..0*/
        ADC_u8_ADMUX_REG &= 0b11100000;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 7e       	andi	r24, 0xE0	; 224
     d60:	8c 93       	st	X, r24
        /*selct channel*/
        ADC_u8_ADMUX_REG != Copy_u8ChannelNb;
     d62:	e7 e2       	ldi	r30, 0x27	; 39
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	20 81       	ld	r18, Z
        /*start conversion*/
        SET_BIT(ADC_u8_ADCSRA_REG,6);
     d68:	a6 e2       	ldi	r26, 0x26	; 38
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e6 e2       	ldi	r30, 0x26	; 38
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	8c 93       	st	X, r24
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <ADC_u8GetDigitalValueSynchNonBlocking+0x72>
        /*wait flag=1*/
        while ((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE ))
        {
            Local_u32TimeOutCounter++;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	ab 81       	ldd	r26, Y+3	; 0x03
     d7e:	bc 81       	ldd	r27, Y+4	; 0x04
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	a1 1d       	adc	r26, r1
     d84:	b1 1d       	adc	r27, r1
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	ab 83       	std	Y+3, r26	; 0x03
     d8c:	bc 83       	std	Y+4, r27	; 0x04
        /*selct channel*/
        ADC_u8_ADMUX_REG != Copy_u8ChannelNb;
        /*start conversion*/
        SET_BIT(ADC_u8_ADCSRA_REG,6);
        /*wait flag=1*/
        while ((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE ))
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 95       	swap	r24
     d96:	8f 70       	andi	r24, 0x0F	; 15
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	61 f4       	brne	.+24     	; 0xdbc <ADC_u8GetDigitalValueSynchNonBlocking+0xa0>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	ab 81       	ldd	r26, Y+3	; 0x03
     daa:	bc 81       	ldd	r27, Y+4	; 0x04
     dac:	80 35       	cpi	r24, 0x50	; 80
     dae:	23 ec       	ldi	r18, 0xC3	; 195
     db0:	92 07       	cpc	r25, r18
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	a2 07       	cpc	r26, r18
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	b2 07       	cpc	r27, r18
     dba:	f0 f2       	brcs	.-68     	; 0xd78 <ADC_u8GetDigitalValueSynchNonBlocking+0x5c>
        {
            Local_u32TimeOutCounter++;
        }
        if(GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE )
     dbc:	e6 e2       	ldi	r30, 0x26	; 38
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	82 95       	swap	r24
     dc4:	8f 70       	andi	r24, 0x0F	; 15
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	81 f4       	brne	.+32     	; 0xdf2 <ADC_u8GetDigitalValueSynchNonBlocking+0xd6>
        {/*clear flag*/
        SET_BIT(ADC_u8_ADCSRA_REG,4);
     dd2:	a6 e2       	ldi	r26, 0x26	; 38
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 61       	ori	r24, 0x10	; 16
     dde:	8c 93       	st	X, r24
        /*reaad the digital value*/
        *Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     de0:	e4 e2       	ldi	r30, 0x24	; 36
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	ef 81       	ldd	r30, Y+7	; 0x07
     dea:	f8 85       	ldd	r31, Y+8	; 0x08
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <ADC_u8GetDigitalValueSynchNonBlocking+0xdc>
        }
        else{
            Local_u8ErrorState = STD_TYPES_NOK;
     df2:	1d 82       	std	Y+5, r1	; 0x05
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <ADC_u8GetDigitalValueSynchNonBlocking+0xdc>
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
     df6:	1d 82       	std	Y+5, r1	; 0x05
    }



    return Local_u8ErrorState;
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dfa:	29 96       	adiw	r28, 0x09	; 9
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <ADC_u8GetDigitalValueAsynch>:

u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <ADC_u8GetDigitalValueAsynch+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <ADC_u8GetDigitalValueAsynch+0x8>
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	7c 83       	std	Y+4, r23	; 0x04
     e1e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag ==0))
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	80 32       	cpi	r24, 0x20	; 32
     e28:	50 f5       	brcc	.+84     	; 0xe7e <ADC_u8GetDigitalValueAsynch+0x72>
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	31 f1       	breq	.+76     	; 0xe7e <ADC_u8GetDigitalValueAsynch+0x72>
     e32:	80 91 82 00 	lds	r24, 0x0082
     e36:	88 23       	and	r24, r24
     e38:	11 f5       	brne	.+68     	; 0xe7e <ADC_u8GetDigitalValueAsynch+0x72>
    {
        /*set flag to make ADC is busy*/
        ADC_u8BusyFlag = 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 82 00 	sts	0x0082, r24
        /*update global pointer to a function*/
        ADC_pfNotification = Copy_pfNotification;
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	90 93 81 00 	sts	0x0081, r25
     e48:	80 93 80 00 	sts	0x0080, r24
        /*enable ADC interrupt*/
        SET_BIT(ADC_u8_ADCSRA_REG,3);
     e4c:	a6 e2       	ldi	r26, 0x26	; 38
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e6 e2       	ldi	r30, 0x26	; 38
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	8c 93       	st	X, r24
        /*clear mux4..0*/
        ADC_u8_ADMUX_REG &= 0b11100000;
     e5a:	a7 e2       	ldi	r26, 0x27	; 39
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e7 e2       	ldi	r30, 0x27	; 39
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 7e       	andi	r24, 0xE0	; 224
     e66:	8c 93       	st	X, r24
        /*selct channel*/
        ADC_u8_ADMUX_REG != Copy_u8ChannelNb;
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
        /*start conversion*/
        SET_BIT(ADC_u8_ADCSRA_REG,6);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 64       	ori	r24, 0x40	; 64
     e7a:	8c 93       	st	X, r24
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <ADC_u8GetDigitalValueAsynch+0x74>


    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
     e7e:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <ADC_u8GetADCRegvalue>:

u8 ADC_u8GetADCRegvalue(u16 * Copy_pu16ADCValue)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <ADC_u8GetADCRegvalue+0x6>
     e98:	0f 92       	push	r0
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9b 83       	std	Y+3, r25	; 0x03
     ea0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_ErrorState = STD_TYPES_OK;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu16ADCValue !=NULL)
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	49 f0       	breq	.+18     	; 0xec0 <ADC_u8GetADCRegvalue+0x2e>
    {
        /*read ADC register*/
        *Copy_pu16ADCValue = ADC_u16_ADC_REG;
     eae:	e4 e2       	ldi	r30, 0x24	; 36
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	ea 81       	ldd	r30, Y+2	; 0x02
     eb8:	fb 81       	ldd	r31, Y+3	; 0x03
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	80 83       	st	Z, r24
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <ADC_u8GetADCRegvalue+0x30>

    }
    else
    {
        Local_ErrorState = STD_TYPES_NOK;
     ec0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_ErrorState;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <__vector_16>:

/*prototype for ADC ISR*/
void __vector_16(void)         __attribute__((signal));
void __vector_16(void)
{
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	4f 93       	push	r20
     ee0:	5f 93       	push	r21
     ee2:	6f 93       	push	r22
     ee4:	7f 93       	push	r23
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	af 93       	push	r26
     eec:	bf 93       	push	r27
     eee:	ef 93       	push	r30
     ef0:	ff 93       	push	r31
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pfNotification != NULL)
     efa:	80 91 80 00 	lds	r24, 0x0080
     efe:	90 91 81 00 	lds	r25, 0x0081
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	99 f0       	breq	.+38     	; 0xf2c <__vector_16+0x5c>
    {
        /*clear flag*/
        ADC_u8BusyFlag = 0;
     f06:	10 92 82 00 	sts	0x0082, r1
        /*clear PIE for ADC*/
        CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f0a:	a6 e2       	ldi	r26, 0x26	; 38
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e6 e2       	ldi	r30, 0x26	; 38
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	87 7f       	andi	r24, 0xF7	; 247
     f16:	8c 93       	st	X, r24
        /*calling notifiction function*/
        ADC_pfNotification(ADC_u16_ADC_REG);
     f18:	20 91 80 00 	lds	r18, 0x0080
     f1c:	30 91 81 00 	lds	r19, 0x0081
     f20:	e4 e2       	ldi	r30, 0x24	; 36
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	f9 01       	movw	r30, r18
     f2a:	09 95       	icall
    }

     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <DC_Motor_Init>:
#include "DC_interface.h"
#include "DC_Private.h"
#include "DC_Config.h"

void DC_Motor_Init()
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor initially
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	62 e0       	ldi	r22, 0x02	; 2
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <DC_Motor_Rotate_Clockwise>:

// Function to rotate the DC motor clockwise
void DC_Motor_Rotate_Clockwise()
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_DIR1, DIO_u8_HIGH); // Set direction pin 1 high
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_LOW);  // Set direction pin 2 low
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	62 e0       	ldi	r22, 0x02	; 2
     f8a:	41 e0       	ldi	r20, 0x01	; 1
     f8c:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <DC_Motor_Rotate_CounterClockwise>:

// Function to rotate the DC motor counter-clockwise
void DC_Motor_Rotate_CounterClockwise()
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);  // Set direction pin 1 low
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_HIGH); // Set direction pin 2 high
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	62 e0       	ldi	r22, 0x02	; 2
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <DC_Motor_Stop>:

// Function to stop the DC motor
void DC_Motor_Stop()
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	62 e0       	ldi	r22, 0x02	; 2
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_privret.h"

void DIO_voidInit(void)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
    DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,
     fe2:	ea e3       	ldi	r30, 0x3A	; 58
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8f e7       	ldi	r24, 0x7F	; 127
     fe8:	80 83       	st	Z, r24
                            DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
                            DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,
                            DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,
     fea:	e7 e3       	ldi	r30, 0x37	; 55
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8b e0       	ldi	r24, 0x0B	; 11
     ff0:	80 83       	st	Z, r24
                            DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
                            DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,
                            DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

      DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,
     ff2:	e4 e3       	ldi	r30, 0x34	; 52
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8f e7       	ldi	r24, 0x7F	; 127
     ff8:	80 83       	st	Z, r24
                            DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
                            DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,
                            DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION );

      DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	80 83       	st	Z, r24
    DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION
     ,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION );

     DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	86 ef       	ldi	r24, 0xF6	; 246
    1008:	80 83       	st	Z, r24
    DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE
     ,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE );

      DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	84 e0       	ldi	r24, 0x04	; 4
    1010:	80 83       	st	Z, r24
    DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE
     ,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE );

      DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,
    1012:	e5 e3       	ldi	r30, 0x35	; 53
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	10 82       	st	Z, r1
    DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE
     ,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE );

      DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,
    1018:	e2 e3       	ldi	r30, 0x32	; 50
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	10 82       	st	Z, r1
    DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE
     ,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE );


   
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinID, u8 Copy_u8PinDirection )
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	2e 97       	sbiw	r28, 0x0e	; 14
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	8a 83       	std	Y+2, r24	; 0x02
    103a:	6b 83       	std	Y+3, r22	; 0x03
    103c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState = STD_TYPES_OK;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8PortId <= DIO_u8_PORTD ) &&  (Copy_u8PortId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	08 f0       	brcs	.+2      	; 0x104a <DIO_voidSetPinDirection+0x26>
    1048:	0c c1       	rjmp	.+536    	; 0x1262 <DIO_voidSetPinDirection+0x23e>
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	88 30       	cpi	r24, 0x08	; 8
    104e:	08 f0       	brcs	.+2      	; 0x1052 <DIO_voidSetPinDirection+0x2e>
    1050:	08 c1       	rjmp	.+528    	; 0x1262 <DIO_voidSetPinDirection+0x23e>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	21 f0       	breq	.+8      	; 0x1060 <DIO_voidSetPinDirection+0x3c>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	88 23       	and	r24, r24
    105c:	09 f0       	breq	.+2      	; 0x1060 <DIO_voidSetPinDirection+0x3c>
    105e:	01 c1       	rjmp	.+514    	; 0x1262 <DIO_voidSetPinDirection+0x23e>
{
   switch (Copy_u8PortId)
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3e 87       	std	Y+14, r19	; 0x0e
    1068:	2d 87       	std	Y+13, r18	; 0x0d
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	9e 85       	ldd	r25, Y+14	; 0x0e
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <DIO_voidSetPinDirection+0x52>
    1074:	4f c0       	rjmp	.+158    	; 0x1114 <DIO_voidSetPinDirection+0xf0>
    1076:	2d 85       	ldd	r18, Y+13	; 0x0d
    1078:	3e 85       	ldd	r19, Y+14	; 0x0e
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <DIO_voidSetPinDirection+0x66>
    1080:	8d 85       	ldd	r24, Y+13	; 0x0d
    1082:	9e 85       	ldd	r25, Y+14	; 0x0e
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	71 f0       	breq	.+28     	; 0x10a4 <DIO_voidSetPinDirection+0x80>
    1088:	ed c0       	rjmp	.+474    	; 0x1264 <DIO_voidSetPinDirection+0x240>
    108a:	2d 85       	ldd	r18, Y+13	; 0x0d
    108c:	3e 85       	ldd	r19, Y+14	; 0x0e
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <DIO_voidSetPinDirection+0x72>
    1094:	77 c0       	rjmp	.+238    	; 0x1184 <DIO_voidSetPinDirection+0x160>
    1096:	8d 85       	ldd	r24, Y+13	; 0x0d
    1098:	9e 85       	ldd	r25, Y+14	; 0x0e
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <DIO_voidSetPinDirection+0x7e>
    10a0:	a9 c0       	rjmp	.+338    	; 0x11f4 <DIO_voidSetPinDirection+0x1d0>
    10a2:	e0 c0       	rjmp	.+448    	; 0x1264 <DIO_voidSetPinDirection+0x240>
   {
     case DIO_u8_PORTA:
        switch (Copy_u8PinDirection)
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3c 87       	std	Y+12, r19	; 0x0c
    10ac:	2b 87       	std	Y+11, r18	; 0x0b
    10ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    10b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	d1 f0       	breq	.+52     	; 0x10ea <DIO_voidSetPinDirection+0xc6>
    10b6:	2b 85       	ldd	r18, Y+11	; 0x0b
    10b8:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ba:	21 30       	cpi	r18, 0x01	; 1
    10bc:	31 05       	cpc	r19, r1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <DIO_voidSetPinDirection+0x9e>
    10c0:	d1 c0       	rjmp	.+418    	; 0x1264 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
    10c2:	aa e3       	ldi	r26, 0x3A	; 58
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ea e3       	ldi	r30, 0x3A	; 58
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_voidSetPinDirection+0xbc>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_voidSetPinDirection+0xb8>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	bd c0       	rjmp	.+378    	; 0x1264 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
    10ea:	aa e3       	ldi	r26, 0x3A	; 58
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ea e3       	ldi	r30, 0x3A	; 58
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_voidSetPinDirection+0xe4>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_voidSetPinDirection+0xe0>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	a8 c0       	rjmp	.+336    	; 0x1264 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinDirection)
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	3a 87       	std	Y+10, r19	; 0x0a
    111c:	29 87       	std	Y+9, r18	; 0x09
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	d1 f0       	breq	.+52     	; 0x115a <DIO_voidSetPinDirection+0x136>
    1126:	29 85       	ldd	r18, Y+9	; 0x09
    1128:	3a 85       	ldd	r19, Y+10	; 0x0a
    112a:	21 30       	cpi	r18, 0x01	; 1
    112c:	31 05       	cpc	r19, r1
    112e:	09 f0       	breq	.+2      	; 0x1132 <DIO_voidSetPinDirection+0x10e>
    1130:	99 c0       	rjmp	.+306    	; 0x1264 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
    1132:	a7 e3       	ldi	r26, 0x37	; 55
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e7 e3       	ldi	r30, 0x37	; 55
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_voidSetPinDirection+0x12c>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_voidSetPinDirection+0x128>
    1154:	84 2b       	or	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	85 c0       	rjmp	.+266    	; 0x1264 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
    115a:	a7 e3       	ldi	r26, 0x37	; 55
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e7 e3       	ldi	r30, 0x37	; 55
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_voidSetPinDirection+0x154>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_voidSetPinDirection+0x150>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	70 c0       	rjmp	.+224    	; 0x1264 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTC:
        switch (Copy_u8PinDirection)
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	38 87       	std	Y+8, r19	; 0x08
    118c:	2f 83       	std	Y+7, r18	; 0x07
    118e:	8f 81       	ldd	r24, Y+7	; 0x07
    1190:	98 85       	ldd	r25, Y+8	; 0x08
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	d1 f0       	breq	.+52     	; 0x11ca <DIO_voidSetPinDirection+0x1a6>
    1196:	2f 81       	ldd	r18, Y+7	; 0x07
    1198:	38 85       	ldd	r19, Y+8	; 0x08
    119a:	21 30       	cpi	r18, 0x01	; 1
    119c:	31 05       	cpc	r19, r1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <DIO_voidSetPinDirection+0x17e>
    11a0:	61 c0       	rjmp	.+194    	; 0x1264 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
    11a2:	a4 e3       	ldi	r26, 0x34	; 52
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_voidSetPinDirection+0x19c>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_voidSetPinDirection+0x198>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	4d c0       	rjmp	.+154    	; 0x1264 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
    11ca:	a4 e3       	ldi	r26, 0x34	; 52
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e4 e3       	ldi	r30, 0x34	; 52
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_voidSetPinDirection+0x1c4>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_voidSetPinDirection+0x1c0>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	38 c0       	rjmp	.+112    	; 0x1264 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTD:
        switch (Copy_u8PinDirection)
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3e 83       	std	Y+6, r19	; 0x06
    11fc:	2d 83       	std	Y+5, r18	; 0x05
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	c9 f0       	breq	.+50     	; 0x1238 <DIO_voidSetPinDirection+0x214>
    1206:	2d 81       	ldd	r18, Y+5	; 0x05
    1208:	3e 81       	ldd	r19, Y+6	; 0x06
    120a:	21 30       	cpi	r18, 0x01	; 1
    120c:	31 05       	cpc	r19, r1
    120e:	51 f5       	brne	.+84     	; 0x1264 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
    1210:	a1 e3       	ldi	r26, 0x31	; 49
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e1 e3       	ldi	r30, 0x31	; 49
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_voidSetPinDirection+0x20a>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_voidSetPinDirection+0x206>
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	16 c0       	rjmp	.+44     	; 0x1264 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
    1238:	a1 e3       	ldi	r26, 0x31	; 49
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e1 e3       	ldi	r30, 0x31	; 49
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_voidSetPinDirection+0x232>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_voidSetPinDirection+0x22e>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <DIO_voidSetPinDirection+0x240>

   }
}
else
{
    Local_u8ErrorState = STD_TYPES_NOK;
    1262:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8ErrorState;
    1264:	89 81       	ldd	r24, Y+1	; 0x01

}
    1266:	2e 96       	adiw	r28, 0x0e	; 14
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue     (u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	2e 97       	sbiw	r28, 0x0e	; 14
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	6b 83       	std	Y+3, r22	; 0x03
    1290:	4c 83       	std	Y+4, r20	; 0x04
    u8 local_u8ErrorState = STD_TYPES_OK;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_PinID <= DIO_u8_PIN7)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 30       	cpi	r24, 0x08	; 8
    129a:	08 f0       	brcs	.+2      	; 0x129e <DIO_voidSetPinValue+0x26>
    129c:	08 c1       	rjmp	.+528    	; 0x14ae <DIO_voidSetPinValue+0x236>
    {
        
    switch (Copy_u8PortId)
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3e 87       	std	Y+14, r19	; 0x0e
    12a6:	2d 87       	std	Y+13, r18	; 0x0d
    12a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <DIO_voidSetPinValue+0x3c>
    12b2:	50 c0       	rjmp	.+160    	; 0x1354 <DIO_voidSetPinValue+0xdc>
    12b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    12b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <DIO_voidSetPinValue+0x50>
    12be:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <DIO_voidSetPinValue+0x6a>
    12c6:	f1 c0       	rjmp	.+482    	; 0x14aa <DIO_voidSetPinValue+0x232>
    12c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    12ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <DIO_voidSetPinValue+0x5c>
    12d2:	79 c0       	rjmp	.+242    	; 0x13c6 <DIO_voidSetPinValue+0x14e>
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <DIO_voidSetPinValue+0x68>
    12de:	ac c0       	rjmp	.+344    	; 0x1438 <DIO_voidSetPinValue+0x1c0>
    12e0:	e4 c0       	rjmp	.+456    	; 0x14aa <DIO_voidSetPinValue+0x232>
    {
    case DIO_u8_PORTA:
        switch (Copy_u8PinValue)
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3c 87       	std	Y+12, r19	; 0x0c
    12ea:	2b 87       	std	Y+11, r18	; 0x0b
    12ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	c9 f0       	breq	.+50     	; 0x1326 <DIO_voidSetPinValue+0xae>
    12f4:	2b 85       	ldd	r18, Y+11	; 0x0b
    12f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	49 f5       	brne	.+82     	; 0x1350 <DIO_voidSetPinValue+0xd8>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    12fe:	ab e3       	ldi	r26, 0x3B	; 59
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	eb e3       	ldi	r30, 0x3B	; 59
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_voidSetPinValue+0xa4>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_voidSetPinValue+0xa0>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	c5 c0       	rjmp	.+394    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    1326:	ab e3       	ldi	r26, 0x3B	; 59
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	eb e3       	ldi	r30, 0x3B	; 59
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_voidSetPinValue+0xcc>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_voidSetPinValue+0xc8>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	b0 c0       	rjmp	.+352    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	ae c0       	rjmp	.+348    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinValue)
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3a 87       	std	Y+10, r19	; 0x0a
    135c:	29 87       	std	Y+9, r18	; 0x09
    135e:	89 85       	ldd	r24, Y+9	; 0x09
    1360:	9a 85       	ldd	r25, Y+10	; 0x0a
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	c9 f0       	breq	.+50     	; 0x1398 <DIO_voidSetPinValue+0x120>
    1366:	29 85       	ldd	r18, Y+9	; 0x09
    1368:	3a 85       	ldd	r19, Y+10	; 0x0a
    136a:	21 30       	cpi	r18, 0x01	; 1
    136c:	31 05       	cpc	r19, r1
    136e:	49 f5       	brne	.+82     	; 0x13c2 <DIO_voidSetPinValue+0x14a>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_voidSetPinValue+0x116>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_voidSetPinValue+0x112>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	8c c0       	rjmp	.+280    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_voidSetPinValue+0x13e>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_voidSetPinValue+0x13a>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	77 c0       	rjmp	.+238    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    13c2:	19 82       	std	Y+1, r1	; 0x01
    13c4:	75 c0       	rjmp	.+234    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTC:
         switch (Copy_u8PinValue)
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	38 87       	std	Y+8, r19	; 0x08
    13ce:	2f 83       	std	Y+7, r18	; 0x07
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	c9 f0       	breq	.+50     	; 0x140a <DIO_voidSetPinValue+0x192>
    13d8:	2f 81       	ldd	r18, Y+7	; 0x07
    13da:	38 85       	ldd	r19, Y+8	; 0x08
    13dc:	21 30       	cpi	r18, 0x01	; 1
    13de:	31 05       	cpc	r19, r1
    13e0:	49 f5       	brne	.+82     	; 0x1434 <DIO_voidSetPinValue+0x1bc>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    13e2:	a5 e3       	ldi	r26, 0x35	; 53
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e5 e3       	ldi	r30, 0x35	; 53
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_voidSetPinValue+0x188>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_voidSetPinValue+0x184>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	53 c0       	rjmp	.+166    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    140a:	a5 e3       	ldi	r26, 0x35	; 53
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_voidSetPinValue+0x1b0>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_voidSetPinValue+0x1ac>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	3e c0       	rjmp	.+124    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	3c c0       	rjmp	.+120    	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTD:
         switch (Copy_u8PinValue)
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3e 83       	std	Y+6, r19	; 0x06
    1440:	2d 83       	std	Y+5, r18	; 0x05
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	c9 f0       	breq	.+50     	; 0x147c <DIO_voidSetPinValue+0x204>
    144a:	2d 81       	ldd	r18, Y+5	; 0x05
    144c:	3e 81       	ldd	r19, Y+6	; 0x06
    144e:	21 30       	cpi	r18, 0x01	; 1
    1450:	31 05       	cpc	r19, r1
    1452:	49 f5       	brne	.+82     	; 0x14a6 <DIO_voidSetPinValue+0x22e>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    1454:	a2 e3       	ldi	r26, 0x32	; 50
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e2 e3       	ldi	r30, 0x32	; 50
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_voidSetPinValue+0x1fa>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_voidSetPinValue+0x1f6>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	1a c0       	rjmp	.+52     	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    147c:	a2 e3       	ldi	r26, 0x32	; 50
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e2 e3       	ldi	r30, 0x32	; 50
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_voidSetPinValue+0x222>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_voidSetPinValue+0x21e>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    default: local_u8ErrorState = STD_TYPES_NOK;
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <DIO_voidSetPinValue+0x238>
        
    }
    }
    else{
        local_u8ErrorState = STD_TYPES_NOK;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b2:	2e 96       	adiw	r28, 0x0e	; 14
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_PinID, u8  *Copy_pu8PinValue)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	28 97       	sbiw	r28, 0x08	; 8
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	8b 83       	std	Y+3, r24	; 0x03
    14da:	6c 83       	std	Y+4, r22	; 0x04
    14dc:	5e 83       	std	Y+6, r21	; 0x06
    14de:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ErrorState = STD_TYPES_OK;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue;
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL))
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <DIO_u8GetPinValue+0x28>
    14ea:	9f c0       	rjmp	.+318    	; 0x162a <DIO_u8GetPinValue+0x166>
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <DIO_u8GetPinValue+0x30>
    14f2:	9b c0       	rjmp	.+310    	; 0x162a <DIO_u8GetPinValue+0x166>
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	09 f4       	brne	.+2      	; 0x14fe <DIO_u8GetPinValue+0x3a>
    14fc:	96 c0       	rjmp	.+300    	; 0x162a <DIO_u8GetPinValue+0x166>
    {
       switch (Copy_u8PortId)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	38 87       	std	Y+8, r19	; 0x08
    1506:	2f 83       	std	Y+7, r18	; 0x07
    1508:	4f 81       	ldd	r20, Y+7	; 0x07
    150a:	58 85       	ldd	r21, Y+8	; 0x08
    150c:	41 30       	cpi	r20, 0x01	; 1
    150e:	51 05       	cpc	r21, r1
    1510:	a9 f1       	breq	.+106    	; 0x157c <DIO_u8GetPinValue+0xb8>
    1512:	8f 81       	ldd	r24, Y+7	; 0x07
    1514:	98 85       	ldd	r25, Y+8	; 0x08
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	34 f4       	brge	.+12     	; 0x1528 <DIO_u8GetPinValue+0x64>
    151c:	2f 81       	ldd	r18, Y+7	; 0x07
    151e:	38 85       	ldd	r19, Y+8	; 0x08
    1520:	21 15       	cp	r18, r1
    1522:	31 05       	cpc	r19, r1
    1524:	71 f0       	breq	.+28     	; 0x1542 <DIO_u8GetPinValue+0x7e>
    1526:	82 c0       	rjmp	.+260    	; 0x162c <DIO_u8GetPinValue+0x168>
    1528:	4f 81       	ldd	r20, Y+7	; 0x07
    152a:	58 85       	ldd	r21, Y+8	; 0x08
    152c:	42 30       	cpi	r20, 0x02	; 2
    152e:	51 05       	cpc	r21, r1
    1530:	09 f4       	brne	.+2      	; 0x1534 <DIO_u8GetPinValue+0x70>
    1532:	41 c0       	rjmp	.+130    	; 0x15b6 <DIO_u8GetPinValue+0xf2>
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <DIO_u8GetPinValue+0x7c>
    153e:	58 c0       	rjmp	.+176    	; 0x15f0 <DIO_u8GetPinValue+0x12c>
    1540:	75 c0       	rjmp	.+234    	; 0x162c <DIO_u8GetPinValue+0x168>
       {
       case DIO_u8_PORTA:
        Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_PinID);
    1542:	e9 e3       	ldi	r30, 0x39	; 57
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_u8GetPinValue+0x96>
    1556:	55 95       	asr	r21
    1558:	47 95       	ror	r20
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_u8GetPinValue+0x92>
    155e:	ca 01       	movw	r24, r20
    1560:	81 70       	andi	r24, 0x01	; 1
    1562:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	88 23       	and	r24, r24
    1568:	21 f4       	brne	.+8      	; 0x1572 <DIO_u8GetPinValue+0xae>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    156a:	ed 81       	ldd	r30, Y+5	; 0x05
    156c:	fe 81       	ldd	r31, Y+6	; 0x06
    156e:	10 82       	st	Z, r1
    1570:	5d c0       	rjmp	.+186    	; 0x162c <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    1572:	ed 81       	ldd	r30, Y+5	; 0x05
    1574:	fe 81       	ldd	r31, Y+6	; 0x06
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	80 83       	st	Z, r24
    157a:	58 c0       	rjmp	.+176    	; 0x162c <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTB:
        Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_PinID);
    157c:	e6 e3       	ldi	r30, 0x36	; 54
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a9 01       	movw	r20, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_u8GetPinValue+0xd0>
    1590:	55 95       	asr	r21
    1592:	47 95       	ror	r20
    1594:	8a 95       	dec	r24
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_u8GetPinValue+0xcc>
    1598:	ca 01       	movw	r24, r20
    159a:	81 70       	andi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	88 23       	and	r24, r24
    15a2:	21 f4       	brne	.+8      	; 0x15ac <DIO_u8GetPinValue+0xe8>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    15a4:	ed 81       	ldd	r30, Y+5	; 0x05
    15a6:	fe 81       	ldd	r31, Y+6	; 0x06
    15a8:	10 82       	st	Z, r1
    15aa:	40 c0       	rjmp	.+128    	; 0x162c <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    15ac:	ed 81       	ldd	r30, Y+5	; 0x05
    15ae:	fe 81       	ldd	r31, Y+6	; 0x06
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 83       	st	Z, r24
    15b4:	3b c0       	rjmp	.+118    	; 0x162c <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTC:
        Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_PinID);
    15b6:	e3 e3       	ldi	r30, 0x33	; 51
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a9 01       	movw	r20, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_u8GetPinValue+0x10a>
    15ca:	55 95       	asr	r21
    15cc:	47 95       	ror	r20
    15ce:	8a 95       	dec	r24
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <DIO_u8GetPinValue+0x106>
    15d2:	ca 01       	movw	r24, r20
    15d4:	81 70       	andi	r24, 0x01	; 1
    15d6:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	88 23       	and	r24, r24
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <DIO_u8GetPinValue+0x122>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    15de:	ed 81       	ldd	r30, Y+5	; 0x05
    15e0:	fe 81       	ldd	r31, Y+6	; 0x06
    15e2:	10 82       	st	Z, r1
    15e4:	23 c0       	rjmp	.+70     	; 0x162c <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    15e6:	ed 81       	ldd	r30, Y+5	; 0x05
    15e8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 83       	st	Z, r24
    15ee:	1e c0       	rjmp	.+60     	; 0x162c <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTD:
        Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_PinID);
    15f0:	e0 e3       	ldi	r30, 0x30	; 48
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_u8GetPinValue+0x144>
    1604:	55 95       	asr	r21
    1606:	47 95       	ror	r20
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_u8GetPinValue+0x140>
    160c:	ca 01       	movw	r24, r20
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	88 23       	and	r24, r24
    1616:	21 f4       	brne	.+8      	; 0x1620 <DIO_u8GetPinValue+0x15c>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    1618:	ed 81       	ldd	r30, Y+5	; 0x05
    161a:	fe 81       	ldd	r31, Y+6	; 0x06
    161c:	10 82       	st	Z, r1
    161e:	06 c0       	rjmp	.+12     	; 0x162c <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    1620:	ed 81       	ldd	r30, Y+5	; 0x05
    1622:	fe 81       	ldd	r31, Y+6	; 0x06
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
    1628:	01 c0       	rjmp	.+2      	; 0x162c <DIO_u8GetPinValue+0x168>
       
       }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    162a:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ErrorState;
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
} 
    162e:	28 96       	adiw	r28, 0x08	; 8
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortID, u8 Copy_u8PortDirection)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	2d 97       	sbiw	r28, 0x0d	; 13
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	21 f0       	breq	.+8      	; 0x166a <DIO_u8SetPortDirection+0x2a>
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 23       	and	r24, r24
    1666:	09 f0       	breq	.+2      	; 0x166a <DIO_u8SetPortDirection+0x2a>
    1668:	7f c0       	rjmp	.+254    	; 0x1768 <DIO_u8SetPortDirection+0x128>
    {
        switch (Copy_u8PortID)
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3d 87       	std	Y+13, r19	; 0x0d
    1672:	2c 87       	std	Y+12, r18	; 0x0c
    1674:	8c 85       	ldd	r24, Y+12	; 0x0c
    1676:	9d 85       	ldd	r25, Y+13	; 0x0d
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	71 f1       	breq	.+92     	; 0x16da <DIO_u8SetPortDirection+0x9a>
    167e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1680:	3d 85       	ldd	r19, Y+13	; 0x0d
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <DIO_u8SetPortDirection+0x52>
    1688:	8c 85       	ldd	r24, Y+12	; 0x0c
    168a:	9d 85       	ldd	r25, Y+13	; 0x0d
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f0       	breq	.+26     	; 0x16aa <DIO_u8SetPortDirection+0x6a>
    1690:	69 c0       	rjmp	.+210    	; 0x1764 <DIO_u8SetPortDirection+0x124>
    1692:	2c 85       	ldd	r18, Y+12	; 0x0c
    1694:	3d 85       	ldd	r19, Y+13	; 0x0d
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	b1 f1       	breq	.+108    	; 0x1708 <DIO_u8SetPortDirection+0xc8>
    169c:	8c 85       	ldd	r24, Y+12	; 0x0c
    169e:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <DIO_u8SetPortDirection+0x68>
    16a6:	47 c0       	rjmp	.+142    	; 0x1736 <DIO_u8SetPortDirection+0xf6>
    16a8:	5d c0       	rjmp	.+186    	; 0x1764 <DIO_u8SetPortDirection+0x124>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PortDirection)
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3b 87       	std	Y+11, r19	; 0x0b
    16b2:	2a 87       	std	Y+10, r18	; 0x0a
    16b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	59 f0       	breq	.+22     	; 0x16d2 <DIO_u8SetPortDirection+0x92>
    16bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    16be:	3b 85       	ldd	r19, Y+11	; 0x0b
    16c0:	21 30       	cpi	r18, 0x01	; 1
    16c2:	31 05       	cpc	r19, r1
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <DIO_u8SetPortDirection+0x88>
    16c6:	51 c0       	rjmp	.+162    	; 0x176a <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRA_REG = 0xff;
    16c8:	ea e3       	ldi	r30, 0x3A	; 58
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	80 83       	st	Z, r24
    16d0:	4c c0       	rjmp	.+152    	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRA_REG = 0x00;
    16d2:	ea e3       	ldi	r30, 0x3A	; 58
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	10 82       	st	Z, r1
    16d8:	48 c0       	rjmp	.+144    	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTB:
            switch (Copy_u8PortDirection)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	39 87       	std	Y+9, r19	; 0x09
    16e2:	28 87       	std	Y+8, r18	; 0x08
    16e4:	88 85       	ldd	r24, Y+8	; 0x08
    16e6:	99 85       	ldd	r25, Y+9	; 0x09
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	51 f0       	breq	.+20     	; 0x1700 <DIO_u8SetPortDirection+0xc0>
    16ec:	28 85       	ldd	r18, Y+8	; 0x08
    16ee:	39 85       	ldd	r19, Y+9	; 0x09
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	31 05       	cpc	r19, r1
    16f4:	d1 f5       	brne	.+116    	; 0x176a <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRB_REG = 0xff;
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	80 83       	st	Z, r24
    16fe:	35 c0       	rjmp	.+106    	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRB_REG = 0x00;
    1700:	e7 e3       	ldi	r30, 0x37	; 55
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	10 82       	st	Z, r1
    1706:	31 c0       	rjmp	.+98     	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTC:
            switch (Copy_u8PortDirection)
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3f 83       	std	Y+7, r19	; 0x07
    1710:	2e 83       	std	Y+6, r18	; 0x06
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	9f 81       	ldd	r25, Y+7	; 0x07
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	51 f0       	breq	.+20     	; 0x172e <DIO_u8SetPortDirection+0xee>
    171a:	2e 81       	ldd	r18, Y+6	; 0x06
    171c:	3f 81       	ldd	r19, Y+7	; 0x07
    171e:	21 30       	cpi	r18, 0x01	; 1
    1720:	31 05       	cpc	r19, r1
    1722:	19 f5       	brne	.+70     	; 0x176a <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRC_REG = 0xff;
    1724:	e4 e3       	ldi	r30, 0x34	; 52
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	80 83       	st	Z, r24
    172c:	1e c0       	rjmp	.+60     	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRC_REG = 0x00;
    172e:	e4 e3       	ldi	r30, 0x34	; 52
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	10 82       	st	Z, r1
    1734:	1a c0       	rjmp	.+52     	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTD:
            switch (Copy_u8PortDirection)
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3d 83       	std	Y+5, r19	; 0x05
    173e:	2c 83       	std	Y+4, r18	; 0x04
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	51 f0       	breq	.+20     	; 0x175c <DIO_u8SetPortDirection+0x11c>
    1748:	2c 81       	ldd	r18, Y+4	; 0x04
    174a:	3d 81       	ldd	r19, Y+5	; 0x05
    174c:	21 30       	cpi	r18, 0x01	; 1
    174e:	31 05       	cpc	r19, r1
    1750:	61 f4       	brne	.+24     	; 0x176a <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRD_REG = 0xff;
    1752:	e1 e3       	ldi	r30, 0x31	; 49
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	80 83       	st	Z, r24
    175a:	07 c0       	rjmp	.+14     	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRD_REG = 0x00;
    175c:	e1 e3       	ldi	r30, 0x31	; 49
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	10 82       	st	Z, r1
    1762:	03 c0       	rjmp	.+6      	; 0x176a <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
            default: Local_u8ErrorState =STD_TYPES_NOK;
    1764:	19 82       	std	Y+1, r1	; 0x01
    1766:	01 c0       	rjmp	.+2      	; 0x176a <DIO_u8SetPortDirection+0x12a>
      
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1768:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    176a:	89 81       	ldd	r24, Y+1	; 0x01
}
    176c:	2d 96       	adiw	r28, 0x0d	; 13
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue      (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <DIO_u8SetPortValue+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <DIO_u8SetPortValue+0x8>
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	8a 83       	std	Y+2, r24	; 0x02
    178e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortID)
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	3d 83       	std	Y+5, r19	; 0x05
    179c:	2c 83       	std	Y+4, r18	; 0x04
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	91 05       	cpc	r25, r1
    17a6:	d1 f0       	breq	.+52     	; 0x17dc <DIO_u8SetPortValue+0x5e>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	2c f4       	brge	.+10     	; 0x17bc <DIO_u8SetPortValue+0x3e>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	61 f0       	breq	.+24     	; 0x17d2 <DIO_u8SetPortValue+0x54>
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <DIO_u8SetPortValue+0x7c>
    17bc:	2c 81       	ldd	r18, Y+4	; 0x04
    17be:	3d 81       	ldd	r19, Y+5	; 0x05
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	81 f0       	breq	.+32     	; 0x17e6 <DIO_u8SetPortValue+0x68>
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ca:	83 30       	cpi	r24, 0x03	; 3
    17cc:	91 05       	cpc	r25, r1
    17ce:	81 f0       	breq	.+32     	; 0x17f0 <DIO_u8SetPortValue+0x72>
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <DIO_u8SetPortValue+0x7c>
    {
    case DIO_u8_PORTA:
        DIO_u8_PORTA_REG =Copy_u8PortValue;
    17d2:	eb e3       	ldi	r30, 0x3B	; 59
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	80 83       	st	Z, r24
    17da:	10 c0       	rjmp	.+32     	; 0x17fc <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTB:
        DIO_u8_PORTB_REG =Copy_u8PortValue;
    17dc:	e8 e3       	ldi	r30, 0x38	; 56
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	80 83       	st	Z, r24
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTC:
        DIO_u8_PORTC_REG =Copy_u8PortValue;
    17e6:	e5 e3       	ldi	r30, 0x35	; 53
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	80 83       	st	Z, r24
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTD:
        DIO_u8_PORTD_REG =Copy_u8PortValue;
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	80 83       	st	Z, r24
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <DIO_u8SetPortValue+0x7e>
        break;
    
    default: Local_u8ErrorState =STD_TYPES_NOK;
    17fa:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8ErrorState;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue      (u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <DIO_u8GetPortValue+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DIO_u8GetPortValue+0x8>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <DIO_u8GetPortValue+0xa>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	7c 83       	std	Y+4, r23	; 0x04
    1820:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8ReturnedPortValue != NULL)
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	e9 f1       	breq	.+122    	; 0x18a8 <DIO_u8GetPortValue+0x9a>
    {
        switch (Copy_u8PortId)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3e 83       	std	Y+6, r19	; 0x06
    1836:	2d 83       	std	Y+5, r18	; 0x05
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	e1 f0       	breq	.+56     	; 0x187a <DIO_u8GetPortValue+0x6c>
    1842:	2d 81       	ldd	r18, Y+5	; 0x05
    1844:	3e 81       	ldd	r19, Y+6	; 0x06
    1846:	22 30       	cpi	r18, 0x02	; 2
    1848:	31 05       	cpc	r19, r1
    184a:	2c f4       	brge	.+10     	; 0x1856 <DIO_u8GetPortValue+0x48>
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	61 f0       	breq	.+24     	; 0x186c <DIO_u8GetPortValue+0x5e>
    1854:	27 c0       	rjmp	.+78     	; 0x18a4 <DIO_u8GetPortValue+0x96>
    1856:	2d 81       	ldd	r18, Y+5	; 0x05
    1858:	3e 81       	ldd	r19, Y+6	; 0x06
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	a1 f0       	breq	.+40     	; 0x1888 <DIO_u8GetPortValue+0x7a>
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	b1 f0       	breq	.+44     	; 0x1896 <DIO_u8GetPortValue+0x88>
    186a:	1c c0       	rjmp	.+56     	; 0x18a4 <DIO_u8GetPortValue+0x96>
        {
        case DIO_u8_PORTA:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINA_REG;
    186c:	e9 e3       	ldi	r30, 0x39	; 57
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	eb 81       	ldd	r30, Y+3	; 0x03
    1874:	fc 81       	ldd	r31, Y+4	; 0x04
    1876:	80 83       	st	Z, r24
    1878:	18 c0       	rjmp	.+48     	; 0x18aa <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTB:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINB_REG;
    187a:	e6 e3       	ldi	r30, 0x36	; 54
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	eb 81       	ldd	r30, Y+3	; 0x03
    1882:	fc 81       	ldd	r31, Y+4	; 0x04
    1884:	80 83       	st	Z, r24
    1886:	11 c0       	rjmp	.+34     	; 0x18aa <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTC:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINC_REG;
    1888:	e3 e3       	ldi	r30, 0x33	; 51
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	eb 81       	ldd	r30, Y+3	; 0x03
    1890:	fc 81       	ldd	r31, Y+4	; 0x04
    1892:	80 83       	st	Z, r24
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTD:
           *Copy_pu8ReturnedPortValue =DIO_u8_PIND_REG;
    1896:	e0 e3       	ldi	r30, 0x30	; 48
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	eb 81       	ldd	r30, Y+3	; 0x03
    189e:	fc 81       	ldd	r31, Y+4	; 0x04
    18a0:	80 83       	st	Z, r24
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <DIO_u8GetPortValue+0x9c>
            break;
        
        default: Local_u8ErrorState =STD_TYPES_NOK;
    18a4:	19 82       	std	Y+1, r1	; 0x01
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <DIO_u8GetPortValue+0x9c>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    18a8:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ac:	26 96       	adiw	r28, 0x06	; 6
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <EXTI_EXTIEnable>:

/* global pointer to a  function */
static void (*EXTI_ApfExti[3]) (void) = {NULL,NULL,NULL};

u8 EXTI_EXTIEnable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	2b 97       	sbiw	r28, 0x0b	; 11
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3b 87       	std	Y+11, r19	; 0x0b
    18e2:	2a 87       	std	Y+10, r18	; 0x0a
    18e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <EXTI_EXTIEnable+0x32>
    18ee:	85 c0       	rjmp	.+266    	; 0x19fa <EXTI_EXTIEnable+0x13c>
    18f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    18f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	09 f4       	brne	.+2      	; 0x18fc <EXTI_EXTIEnable+0x3e>
    18fa:	f9 c0       	rjmp	.+498    	; 0x1aee <EXTI_EXTIEnable+0x230>
    18fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	09 f0       	breq	.+2      	; 0x1906 <EXTI_EXTIEnable+0x48>
    1904:	23 c1       	rjmp	.+582    	; 0x1b4c <EXTI_EXTIEnable+0x28e>
    {
    case EXTI_u8_INT0:
       switch (Copy_u8EdgeIndex)
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	39 87       	std	Y+9, r19	; 0x09
    190e:	28 87       	std	Y+8, r18	; 0x08
    1910:	88 85       	ldd	r24, Y+8	; 0x08
    1912:	99 85       	ldd	r25, Y+9	; 0x09
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	61 f1       	breq	.+88     	; 0x1972 <EXTI_EXTIEnable+0xb4>
    191a:	28 85       	ldd	r18, Y+8	; 0x08
    191c:	39 85       	ldd	r19, Y+9	; 0x09
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	2c f4       	brge	.+10     	; 0x192e <EXTI_EXTIEnable+0x70>
    1924:	88 85       	ldd	r24, Y+8	; 0x08
    1926:	99 85       	ldd	r25, Y+9	; 0x09
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f0       	breq	.+26     	; 0x1946 <EXTI_EXTIEnable+0x88>
    192c:	64 c0       	rjmp	.+200    	; 0x19f6 <EXTI_EXTIEnable+0x138>
    192e:	28 85       	ldd	r18, Y+8	; 0x08
    1930:	39 85       	ldd	r19, Y+9	; 0x09
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	99 f1       	breq	.+102    	; 0x199e <EXTI_EXTIEnable+0xe0>
    1938:	88 85       	ldd	r24, Y+8	; 0x08
    193a:	99 85       	ldd	r25, Y+9	; 0x09
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <EXTI_EXTIEnable+0x86>
    1942:	43 c0       	rjmp	.+134    	; 0x19ca <EXTI_EXTIEnable+0x10c>
    1944:	58 c0       	rjmp	.+176    	; 0x19f6 <EXTI_EXTIEnable+0x138>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,1);
    1946:	a5 e5       	ldi	r26, 0x55	; 85
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e5 e5       	ldi	r30, 0x55	; 85
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	82 60       	ori	r24, 0x02	; 2
    1952:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,0);
    1954:	a5 e5       	ldi	r26, 0x55	; 85
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e5 e5       	ldi	r30, 0x55	; 85
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	81 60       	ori	r24, 0x01	; 1
    1960:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    1962:	ab e5       	ldi	r26, 0x5B	; 91
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	eb e5       	ldi	r30, 0x5B	; 91
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 64       	ori	r24, 0x40	; 64
    196e:	8c 93       	st	X, r24
    1970:	ee c0       	rjmp	.+476    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,1);
    1972:	a5 e5       	ldi	r26, 0x55	; 85
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e5 e5       	ldi	r30, 0x55	; 85
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	82 60       	ori	r24, 0x02	; 2
    197e:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,0);
    1980:	a5 e5       	ldi	r26, 0x55	; 85
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e5       	ldi	r30, 0x55	; 85
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8e 7f       	andi	r24, 0xFE	; 254
    198c:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    198e:	ab e5       	ldi	r26, 0x5B	; 91
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e5       	ldi	r30, 0x5B	; 91
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 64       	ori	r24, 0x40	; 64
    199a:	8c 93       	st	X, r24
    199c:	d8 c0       	rjmp	.+432    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_ANY_LOGICAL_CHANGE:
        CLR_BIT(EXTI_U8_MCUCR,1);
    199e:	a5 e5       	ldi	r26, 0x55	; 85
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e5 e5       	ldi	r30, 0x55	; 85
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8d 7f       	andi	r24, 0xFD	; 253
    19aa:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,0);
    19ac:	a5 e5       	ldi	r26, 0x55	; 85
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e5 e5       	ldi	r30, 0x55	; 85
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	81 60       	ori	r24, 0x01	; 1
    19b8:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    19ba:	ab e5       	ldi	r26, 0x5B	; 91
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	eb e5       	ldi	r30, 0x5B	; 91
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	80 64       	ori	r24, 0x40	; 64
    19c6:	8c 93       	st	X, r24
    19c8:	c2 c0       	rjmp	.+388    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_LOW_LEVEL:
        CLR_BIT(EXTI_U8_MCUCR,1);
    19ca:	a5 e5       	ldi	r26, 0x55	; 85
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e5 e5       	ldi	r30, 0x55	; 85
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8d 7f       	andi	r24, 0xFD	; 253
    19d6:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,0);
    19d8:	a5 e5       	ldi	r26, 0x55	; 85
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e5       	ldi	r30, 0x55	; 85
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8e 7f       	andi	r24, 0xFE	; 254
    19e4:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    19e6:	ab e5       	ldi	r26, 0x5B	; 91
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	eb e5       	ldi	r30, 0x5B	; 91
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 64       	ori	r24, 0x40	; 64
    19f2:	8c 93       	st	X, r24
    19f4:	ac c0       	rjmp	.+344    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    19f6:	19 82       	std	Y+1, r1	; 0x01
    19f8:	aa c0       	rjmp	.+340    	; 0x1b4e <EXTI_EXTIEnable+0x290>
       }
        break;

        case EXTI_u8_INT1:
       switch (Copy_u8EdgeIndex)
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3f 83       	std	Y+7, r19	; 0x07
    1a02:	2e 83       	std	Y+6, r18	; 0x06
    1a04:	8e 81       	ldd	r24, Y+6	; 0x06
    1a06:	9f 81       	ldd	r25, Y+7	; 0x07
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	61 f1       	breq	.+88     	; 0x1a66 <EXTI_EXTIEnable+0x1a8>
    1a0e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a10:	3f 81       	ldd	r19, Y+7	; 0x07
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <EXTI_EXTIEnable+0x164>
    1a18:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f0       	breq	.+26     	; 0x1a3a <EXTI_EXTIEnable+0x17c>
    1a20:	64 c0       	rjmp	.+200    	; 0x1aea <EXTI_EXTIEnable+0x22c>
    1a22:	2e 81       	ldd	r18, Y+6	; 0x06
    1a24:	3f 81       	ldd	r19, Y+7	; 0x07
    1a26:	22 30       	cpi	r18, 0x02	; 2
    1a28:	31 05       	cpc	r19, r1
    1a2a:	99 f1       	breq	.+102    	; 0x1a92 <EXTI_EXTIEnable+0x1d4>
    1a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a30:	83 30       	cpi	r24, 0x03	; 3
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <EXTI_EXTIEnable+0x17a>
    1a36:	43 c0       	rjmp	.+134    	; 0x1abe <EXTI_EXTIEnable+0x200>
    1a38:	58 c0       	rjmp	.+176    	; 0x1aea <EXTI_EXTIEnable+0x22c>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,3);
    1a3a:	a5 e5       	ldi	r26, 0x55	; 85
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e5 e5       	ldi	r30, 0x55	; 85
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	88 60       	ori	r24, 0x08	; 8
    1a46:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,2);
    1a48:	a5 e5       	ldi	r26, 0x55	; 85
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e5 e5       	ldi	r30, 0x55	; 85
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	84 60       	ori	r24, 0x04	; 4
    1a54:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1a56:	ab e5       	ldi	r26, 0x5B	; 91
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	eb e5       	ldi	r30, 0x5B	; 91
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	8c 93       	st	X, r24
    1a64:	74 c0       	rjmp	.+232    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,3);
    1a66:	a5 e5       	ldi	r26, 0x55	; 85
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e5 e5       	ldi	r30, 0x55	; 85
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	88 60       	ori	r24, 0x08	; 8
    1a72:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,2);
    1a74:	a5 e5       	ldi	r26, 0x55	; 85
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e5 e5       	ldi	r30, 0x55	; 85
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8b 7f       	andi	r24, 0xFB	; 251
    1a80:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1a82:	ab e5       	ldi	r26, 0x5B	; 91
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	eb e5       	ldi	r30, 0x5B	; 91
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 68       	ori	r24, 0x80	; 128
    1a8e:	8c 93       	st	X, r24
    1a90:	5e c0       	rjmp	.+188    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_ANY_LOGICAL_CHANGE:
        CLR_BIT(EXTI_U8_MCUCR,3);
    1a92:	a5 e5       	ldi	r26, 0x55	; 85
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e5 e5       	ldi	r30, 0x55	; 85
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	87 7f       	andi	r24, 0xF7	; 247
    1a9e:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,2);
    1aa0:	a5 e5       	ldi	r26, 0x55	; 85
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e5 e5       	ldi	r30, 0x55	; 85
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	84 60       	ori	r24, 0x04	; 4
    1aac:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1aae:	ab e5       	ldi	r26, 0x5B	; 91
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	eb e5       	ldi	r30, 0x5B	; 91
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 68       	ori	r24, 0x80	; 128
    1aba:	8c 93       	st	X, r24
    1abc:	48 c0       	rjmp	.+144    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_LOW_LEVEL:
        CLR_BIT(EXTI_U8_MCUCR,3);
    1abe:	a5 e5       	ldi	r26, 0x55	; 85
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e5       	ldi	r30, 0x55	; 85
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	87 7f       	andi	r24, 0xF7	; 247
    1aca:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,2);
    1acc:	a5 e5       	ldi	r26, 0x55	; 85
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e5 e5       	ldi	r30, 0x55	; 85
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8b 7f       	andi	r24, 0xFB	; 251
    1ad8:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1ada:	ab e5       	ldi	r26, 0x5B	; 91
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	eb e5       	ldi	r30, 0x5B	; 91
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 68       	ori	r24, 0x80	; 128
    1ae6:	8c 93       	st	X, r24
    1ae8:	32 c0       	rjmp	.+100    	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	30 c0       	rjmp	.+96     	; 0x1b4e <EXTI_EXTIEnable+0x290>
       }
        break;

        case EXTI_u8_INT2:
       switch (Copy_u8EdgeIndex)
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3d 83       	std	Y+5, r19	; 0x05
    1af6:	2c 83       	std	Y+4, r18	; 0x04
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	31 f0       	breq	.+12     	; 0x1b0c <EXTI_EXTIEnable+0x24e>
    1b00:	2c 81       	ldd	r18, Y+4	; 0x04
    1b02:	3d 81       	ldd	r19, Y+5	; 0x05
    1b04:	21 30       	cpi	r18, 0x01	; 1
    1b06:	31 05       	cpc	r19, r1
    1b08:	81 f0       	breq	.+32     	; 0x1b2a <EXTI_EXTIEnable+0x26c>
    1b0a:	1e c0       	rjmp	.+60     	; 0x1b48 <EXTI_EXTIEnable+0x28a>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,6);
    1b0c:	a5 e5       	ldi	r26, 0x55	; 85
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e5 e5       	ldi	r30, 0x55	; 85
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 64       	ori	r24, 0x40	; 64
    1b18:	8c 93       	st	X, r24
        /*enable EXTI2*/
        SET_BIT(EXTI_U8_GICR,5);
    1b1a:	ab e5       	ldi	r26, 0x5B	; 91
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	eb e5       	ldi	r30, 0x5B	; 91
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	80 62       	ori	r24, 0x20	; 32
    1b26:	8c 93       	st	X, r24
    1b28:	12 c0       	rjmp	.+36     	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        CLR_BIT(EXTI_U8_MCUCR,6);
    1b2a:	a5 e5       	ldi	r26, 0x55	; 85
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e5       	ldi	r30, 0x55	; 85
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	8f 7b       	andi	r24, 0xBF	; 191
    1b36:	8c 93       	st	X, r24
        /*enable EXTI2*/
        SET_BIT(EXTI_U8_GICR,5);
    1b38:	ab e5       	ldi	r26, 0x5B	; 91
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	eb e5       	ldi	r30, 0x5B	; 91
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	80 62       	ori	r24, 0x20	; 32
    1b44:	8c 93       	st	X, r24
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    1b48:	19 82       	std	Y+1, r1	; 0x01
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <EXTI_EXTIEnable+0x290>
       }
        break;
        default: Local_u8ErrorState = STD_TYPES_NOK;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b50:	2b 96       	adiw	r28, 0x0b	; 11
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <EXTI_u8EXTIDisable>:

u8 EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <EXTI_u8EXTIDisable+0x6>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <EXTI_u8EXTIDisable+0x8>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_ErrorState = STD_TYPES_OK;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3c 83       	std	Y+4, r19	; 0x04
    1b7c:	2b 83       	std	Y+3, r18	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	89 f0       	breq	.+34     	; 0x1baa <EXTI_u8EXTIDisable+0x48>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	a1 f0       	breq	.+40     	; 0x1bba <EXTI_u8EXTIDisable+0x58>
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	c1 f4       	brne	.+48     	; 0x1bca <EXTI_u8EXTIDisable+0x68>
    {
    case EXTI_u8_INT0:
        /* disable EXTI0 */
        CLR_BIT(EXTI_U8_GICR,6);
    1b9a:	ab e5       	ldi	r26, 0x5B	; 91
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	eb e5       	ldi	r30, 0x5B	; 91
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8f 7b       	andi	r24, 0xBF	; 191
    1ba6:	8c 93       	st	X, r24
    1ba8:	11 c0       	rjmp	.+34     	; 0x1bcc <EXTI_u8EXTIDisable+0x6a>
        break;

        case EXTI_u8_INT1:
        /* disable EXTI1 */
        CLR_BIT(EXTI_U8_GICR,7);
    1baa:	ab e5       	ldi	r26, 0x5B	; 91
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e5       	ldi	r30, 0x5B	; 91
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8f 77       	andi	r24, 0x7F	; 127
    1bb6:	8c 93       	st	X, r24
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <EXTI_u8EXTIDisable+0x6a>
        break;
    
    case EXTI_u8_INT2:
        /* disable EXTI2 */
        CLR_BIT(EXTI_U8_GICR,5);
    1bba:	ab e5       	ldi	r26, 0x5B	; 91
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	eb e5       	ldi	r30, 0x5B	; 91
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 7d       	andi	r24, 0xDF	; 223
    1bc6:	8c 93       	st	X, r24
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <EXTI_u8EXTIDisable+0x6a>
        break;
    default: Local_ErrorState = STD_TYPES_NOK;
    1bca:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_ErrorState;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <EXTI_u8EXTISetCallBack>:

u8 EXTI_u8EXTISetCallBack(u8 Copy_uEXTIIndex, void(*Copy_pf) (void))
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <EXTI_u8EXTISetCallBack+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <EXTI_u8EXTISetCallBack+0x8>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	8a 83       	std	Y+2, r24	; 0x02
    1bea:	7c 83       	std	Y+4, r23	; 0x04
    1bec:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_uEXTIIndex <= EXTI_u8_INT2) && (Copy_pf != NULL))
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	88 f4       	brcc	.+34     	; 0x1c1a <EXTI_u8EXTISetCallBack+0x3e>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	69 f0       	breq	.+26     	; 0x1c1a <EXTI_u8EXTISetCallBack+0x3e>
    {
        EXTI_ApfExti[Copy_uEXTIIndex] = Copy_pf;
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	ed 57       	subi	r30, 0x7D	; 125
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <EXTI_u8EXTISetCallBack+0x40>
    }
    else 
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    }


    return Local_u8ErrorState;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <__vector_1>:

/* prototype for ISR of EXTI0 */
void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	4f 93       	push	r20
    1c3c:	5f 93       	push	r21
    1c3e:	6f 93       	push	r22
    1c40:	7f 93       	push	r23
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	af 93       	push	r26
    1c48:	bf 93       	push	r27
    1c4a:	ef 93       	push	r30
    1c4c:	ff 93       	push	r31
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT0] != NULL){
    1c56:	80 91 83 00 	lds	r24, 0x0083
    1c5a:	90 91 84 00 	lds	r25, 0x0084
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	29 f0       	breq	.+10     	; 0x1c6c <__vector_1+0x40>

        EXTI_ApfExti[EXTI_u8_INT0]();
    1c62:	e0 91 83 00 	lds	r30, 0x0083
    1c66:	f0 91 84 00 	lds	r31, 0x0084
    1c6a:	09 95       	icall
    }
    
}
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	ff 91       	pop	r31
    1c72:	ef 91       	pop	r30
    1c74:	bf 91       	pop	r27
    1c76:	af 91       	pop	r26
    1c78:	9f 91       	pop	r25
    1c7a:	8f 91       	pop	r24
    1c7c:	7f 91       	pop	r23
    1c7e:	6f 91       	pop	r22
    1c80:	5f 91       	pop	r21
    1c82:	4f 91       	pop	r20
    1c84:	3f 91       	pop	r19
    1c86:	2f 91       	pop	r18
    1c88:	0f 90       	pop	r0
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	0f 90       	pop	r0
    1c8e:	1f 90       	pop	r1
    1c90:	18 95       	reti

00001c92 <__vector_2>:

/* prototype for ISR of EXTI1 */
void __vector_2(void)      __attribute__((signal));
void __vector_2(void)
{
    1c92:	1f 92       	push	r1
    1c94:	0f 92       	push	r0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	0f 92       	push	r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	2f 93       	push	r18
    1c9e:	3f 93       	push	r19
    1ca0:	4f 93       	push	r20
    1ca2:	5f 93       	push	r21
    1ca4:	6f 93       	push	r22
    1ca6:	7f 93       	push	r23
    1ca8:	8f 93       	push	r24
    1caa:	9f 93       	push	r25
    1cac:	af 93       	push	r26
    1cae:	bf 93       	push	r27
    1cb0:	ef 93       	push	r30
    1cb2:	ff 93       	push	r31
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT1] != NULL){
    1cbc:	80 91 85 00 	lds	r24, 0x0085
    1cc0:	90 91 86 00 	lds	r25, 0x0086
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	29 f0       	breq	.+10     	; 0x1cd2 <__vector_2+0x40>

        EXTI_ApfExti[EXTI_u8_INT1]();
    1cc8:	e0 91 85 00 	lds	r30, 0x0085
    1ccc:	f0 91 86 00 	lds	r31, 0x0086
    1cd0:	09 95       	icall
    }
}
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	bf 91       	pop	r27
    1cdc:	af 91       	pop	r26
    1cde:	9f 91       	pop	r25
    1ce0:	8f 91       	pop	r24
    1ce2:	7f 91       	pop	r23
    1ce4:	6f 91       	pop	r22
    1ce6:	5f 91       	pop	r21
    1ce8:	4f 91       	pop	r20
    1cea:	3f 91       	pop	r19
    1cec:	2f 91       	pop	r18
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <__vector_3>:

/* prototype for ISR of EXTI2 */
void __vector_3(void)      __attribute__((signal));
void __vector_3(void)
{
    1cf8:	1f 92       	push	r1
    1cfa:	0f 92       	push	r0
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	0f 92       	push	r0
    1d00:	11 24       	eor	r1, r1
    1d02:	2f 93       	push	r18
    1d04:	3f 93       	push	r19
    1d06:	4f 93       	push	r20
    1d08:	5f 93       	push	r21
    1d0a:	6f 93       	push	r22
    1d0c:	7f 93       	push	r23
    1d0e:	8f 93       	push	r24
    1d10:	9f 93       	push	r25
    1d12:	af 93       	push	r26
    1d14:	bf 93       	push	r27
    1d16:	ef 93       	push	r30
    1d18:	ff 93       	push	r31
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT2] != NULL){
    1d22:	80 91 87 00 	lds	r24, 0x0087
    1d26:	90 91 88 00 	lds	r25, 0x0088
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	29 f0       	breq	.+10     	; 0x1d38 <__vector_3+0x40>

        EXTI_ApfExti[EXTI_u8_INT2]();
    1d2e:	e0 91 87 00 	lds	r30, 0x0087
    1d32:	f0 91 88 00 	lds	r31, 0x0088
    1d36:	09 95       	icall
    }
}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	ff 91       	pop	r31
    1d3e:	ef 91       	pop	r30
    1d40:	bf 91       	pop	r27
    1d42:	af 91       	pop	r26
    1d44:	9f 91       	pop	r25
    1d46:	8f 91       	pop	r24
    1d48:	7f 91       	pop	r23
    1d4a:	6f 91       	pop	r22
    1d4c:	5f 91       	pop	r21
    1d4e:	4f 91       	pop	r20
    1d50:	3f 91       	pop	r19
    1d52:	2f 91       	pop	r18
    1d54:	0f 90       	pop	r0
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	0f 90       	pop	r0
    1d5a:	1f 90       	pop	r1
    1d5c:	18 95       	reti

00001d5e <GI_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_Math.h"
#include "GI_interface.h"
#define SREG   *((volatile u8*)0x5f)

void GI_voidEnable(void){
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,7);
    1d66:	af e5       	ldi	r26, 0x5F	; 95
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ef e5       	ldi	r30, 0x5F	; 95
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 68       	ori	r24, 0x80	; 128
    1d72:	8c 93       	st	X, r24
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <GI_voidDisable>:


void GI_voidDisable(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
    1d82:	af e5       	ldi	r26, 0x5F	; 95
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ef e5       	ldi	r30, 0x5F	; 95
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8f 77       	andi	r24, 0x7F	; 127
    1d8e:	8c 93       	st	X, r24
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <KPD_u8GetKeyState>:
u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
u8 KPD_Au8ColsPins[4]={KPD_u8_c1_PIN,KPD_u8_c2_PIN,KPD_u8_c3_PIN,KPD_u8_c4_PIN};


u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	65 97       	sbiw	r28, 0x15	; 21
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	9d 8b       	std	Y+21, r25	; 0x15
    1dac:	8c 8b       	std	Y+20, r24	; 0x14

    u8 Local_u8ErrorState = STD_TYPES_OK;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
    1db2:	1f 86       	std	Y+15, r1	; 0x0f
if(Copy_pu8ReturnedKey != NULL)
    1db4:	8c 89       	ldd	r24, Y+20	; 0x14
    1db6:	9d 89       	ldd	r25, Y+21	; 0x15
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <KPD_u8GetKeyState+0x28>
    1dbc:	f0 c0       	rjmp	.+480    	; 0x1f9e <KPD_u8GetKeyState+0x208>
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1dbe:	ec 89       	ldd	r30, Y+20	; 0x14
    1dc0:	fd 89       	ldd	r31, Y+21	; 0x15
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	80 83       	st	Z, r24
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1dc6:	19 8a       	std	Y+17, r1	; 0x11
    1dc8:	e5 c0       	rjmp	.+458    	; 0x1f94 <KPD_u8GetKeyState+0x1fe>
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    1dca:	89 89       	ldd	r24, Y+17	; 0x11
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	e8 58       	subi	r30, 0x88	; 136
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	90 81       	ld	r25, Z
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	69 2f       	mov	r22, r25
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    1de2:	18 8a       	std	Y+16, r1	; 0x10
    1de4:	c1 c0       	rjmp	.+386    	; 0x1f68 <KPD_u8GetKeyState+0x1d2>
        {
            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1de6:	88 89       	ldd	r24, Y+16	; 0x10
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	fc 01       	movw	r30, r24
    1dee:	e4 58       	subi	r30, 0x84	; 132
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	90 81       	ld	r25, Z
    1df4:	9e 01       	movw	r18, r28
    1df6:	2d 5e       	subi	r18, 0xED	; 237
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	69 2f       	mov	r22, r25
    1dfe:	a9 01       	movw	r20, r18
    1e00:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8GetPinValue>
            if(Local_u8PinValue == DIO_u8_LOW)
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <KPD_u8GetKeyState+0x76>
    1e0a:	ab c0       	rjmp	.+342    	; 0x1f62 <KPD_u8GetKeyState+0x1cc>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 ea       	ldi	r26, 0xA0	; 160
    1e12:	b1 e4       	ldi	r27, 0x41	; 65
    1e14:	8b 87       	std	Y+11, r24	; 0x0b
    1e16:	9c 87       	std	Y+12, r25	; 0x0c
    1e18:	ad 87       	std	Y+13, r26	; 0x0d
    1e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a e7       	ldi	r20, 0x7A	; 122
    1e2a:	53 e4       	ldi	r21, 0x43	; 67
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8f 83       	std	Y+7, r24	; 0x07
    1e36:	98 87       	std	Y+8, r25	; 0x08
    1e38:	a9 87       	std	Y+9, r26	; 0x09
    1e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e8       	ldi	r20, 0x80	; 128
    1e4a:	5f e3       	ldi	r21, 0x3F	; 63
    1e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e50:	88 23       	and	r24, r24
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
    1e5c:	3f c0       	rjmp	.+126    	; 0x1edc <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	4c f5       	brge	.+82     	; 0x1ec8 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e2       	ldi	r20, 0x20	; 32
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <KPD_u8GetKeyState+0x128>
    1ea0:	89 e1       	ldi	r24, 0x19	; 25
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <KPD_u8GetKeyState+0x116>
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	69 f7       	brne	.-38     	; 0x1ea0 <KPD_u8GetKeyState+0x10a>
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <KPD_u8GetKeyState+0x152>
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
            {
                //debouncing//
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1ef0:	88 89       	ldd	r24, Y+16	; 0x10
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	e4 58       	subi	r30, 0x84	; 132
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	90 81       	ld	r25, Z
    1efe:	9e 01       	movw	r18, r28
    1f00:	2d 5e       	subi	r18, 0xED	; 237
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	69 2f       	mov	r22, r25
    1f08:	a9 01       	movw	r20, r18
    1f0a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8GetPinValue>
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <KPD_u8GetKeyState+0x198>


                while (Local_u8PinValue == DIO_u8_LOW)
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1f10:	88 89       	ldd	r24, Y+16	; 0x10
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	fc 01       	movw	r30, r24
    1f18:	e4 58       	subi	r30, 0x84	; 132
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	90 81       	ld	r25, Z
    1f1e:	9e 01       	movw	r18, r28
    1f20:	2d 5e       	subi	r18, 0xED	; 237
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	69 2f       	mov	r22, r25
    1f28:	a9 01       	movw	r20, r18
    1f2a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8GetPinValue>
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);


                while (Local_u8PinValue == DIO_u8_LOW)
    1f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f30:	88 23       	and	r24, r24
    1f32:	71 f3       	breq	.-36     	; 0x1f10 <KPD_u8GetKeyState+0x17a>
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);

                }
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1f34:	89 89       	ldd	r24, Y+17	; 0x11
    1f36:	48 2f       	mov	r20, r24
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	88 89       	ldd	r24, Y+16	; 0x10
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	ca 01       	movw	r24, r20
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	82 0f       	add	r24, r18
    1f4c:	93 1f       	adc	r25, r19
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e8 59       	subi	r30, 0x98	; 152
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	ec 89       	ldd	r30, Y+20	; 0x14
    1f58:	fd 89       	ldd	r31, Y+21	; 0x15
    1f5a:	80 83       	st	Z, r24
                Local_u8Flag =1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	8f 87       	std	Y+15, r24	; 0x0f
    1f60:	07 c0       	rjmp	.+14     	; 0x1f70 <KPD_u8GetKeyState+0x1da>
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    1f62:	88 89       	ldd	r24, Y+16	; 0x10
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	88 8b       	std	Y+16, r24	; 0x10
    1f68:	88 89       	ldd	r24, Y+16	; 0x10
    1f6a:	84 30       	cpi	r24, 0x04	; 4
    1f6c:	08 f4       	brcc	.+2      	; 0x1f70 <KPD_u8GetKeyState+0x1da>
    1f6e:	3b cf       	rjmp	.-394    	; 0x1de6 <KPD_u8GetKeyState+0x50>
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
                Local_u8Flag =1;
                break;
            }
        }
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    1f70:	89 89       	ldd	r24, Y+17	; 0x11
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	fc 01       	movw	r30, r24
    1f78:	e8 58       	subi	r30, 0x88	; 136
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	90 81       	ld	r25, Z
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	69 2f       	mov	r22, r25
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
        if(Local_u8Flag == 1)
    1f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	49 f0       	breq	.+18     	; 0x1fa0 <KPD_u8GetKeyState+0x20a>
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
if(Copy_pu8ReturnedKey != NULL)
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1f8e:	89 89       	ldd	r24, Y+17	; 0x11
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	89 8b       	std	Y+17, r24	; 0x11
    1f94:	89 89       	ldd	r24, Y+17	; 0x11
    1f96:	84 30       	cpi	r24, 0x04	; 4
    1f98:	08 f4       	brcc	.+2      	; 0x1f9c <KPD_u8GetKeyState+0x206>
    1f9a:	17 cf       	rjmp	.-466    	; 0x1dca <KPD_u8GetKeyState+0x34>
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <KPD_u8GetKeyState+0x20a>

     }

}
else{
    Local_u8ErrorState = STD_TYPES_NOK;
    1f9e:	1a 8a       	std	Y+18, r1	; 0x12
}

   return Local_u8ErrorState;
    1fa0:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1fa2:	65 96       	adiw	r28, 0x15	; 21
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <LCD_voideInit>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_voideInit(void)
{
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	cc 54       	subi	r28, 0x4C	; 76
    1fc2:	d0 40       	sbci	r29, 0x00	; 0
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e7 5b       	subi	r30, 0xB7	; 183
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	ac e0       	ldi	r26, 0x0C	; 12
    1fda:	b2 e4       	ldi	r27, 0x42	; 66
    1fdc:	80 83       	st	Z, r24
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	a2 83       	std	Z+2, r26	; 0x02
    1fe2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	8e 01       	movw	r16, r28
    1fe6:	0b 5b       	subi	r16, 0xBB	; 187
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e7 5b       	subi	r30, 0xB7	; 183
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a e7       	ldi	r20, 0x7A	; 122
    1ffe:	53 e4       	ldi	r21, 0x43	; 67
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	f8 01       	movw	r30, r16
    200a:	80 83       	st	Z, r24
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	a2 83       	std	Z+2, r26	; 0x02
    2010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2012:	fe 01       	movw	r30, r28
    2014:	eb 5b       	subi	r30, 0xBB	; 187
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	44 f4       	brge	.+16     	; 0x2040 <LCD_voideInit+0x8c>
		__ticks = 1;
    2030:	fe 01       	movw	r30, r28
    2032:	ed 5b       	subi	r30, 0xBD	; 189
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
    203e:	64 c0       	rjmp	.+200    	; 0x2108 <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    2040:	fe 01       	movw	r30, r28
    2042:	eb 5b       	subi	r30, 0xBB	; 187
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	3f ef       	ldi	r19, 0xFF	; 255
    2052:	4f e7       	ldi	r20, 0x7F	; 127
    2054:	57 e4       	ldi	r21, 0x47	; 71
    2056:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    205a:	18 16       	cp	r1, r24
    205c:	0c f0       	brlt	.+2      	; 0x2060 <LCD_voideInit+0xac>
    205e:	43 c0       	rjmp	.+134    	; 0x20e6 <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	fe 01       	movw	r30, r28
    2062:	e7 5b       	subi	r30, 0xB7	; 183
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8e 01       	movw	r16, r28
    2080:	0d 5b       	subi	r16, 0xBD	; 189
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	f8 01       	movw	r30, r16
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	1f c0       	rjmp	.+62     	; 0x20d6 <LCD_voideInit+0x122>
    2098:	fe 01       	movw	r30, r28
    209a:	ef 5b       	subi	r30, 0xBF	; 191
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	89 e1       	ldi	r24, 0x19	; 25
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	fe 01       	movw	r30, r28
    20a8:	ef 5b       	subi	r30, 0xBF	; 191
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_voideInit+0xfc>
    20b4:	fe 01       	movw	r30, r28
    20b6:	ef 5b       	subi	r30, 0xBF	; 191
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	de 01       	movw	r26, r28
    20c0:	ad 5b       	subi	r26, 0xBD	; 189
    20c2:	bf 4f       	sbci	r27, 0xFF	; 255
    20c4:	fe 01       	movw	r30, r28
    20c6:	ed 5b       	subi	r30, 0xBD	; 189
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	11 96       	adiw	r26, 0x01	; 1
    20d2:	9c 93       	st	X, r25
    20d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	fe 01       	movw	r30, r28
    20d8:	ed 5b       	subi	r30, 0xBD	; 189
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	d1 f6       	brne	.-76     	; 0x2098 <LCD_voideInit+0xe4>
    20e4:	24 c0       	rjmp	.+72     	; 0x212e <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	8e 01       	movw	r16, r28
    20e8:	0d 5b       	subi	r16, 0xBD	; 189
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	fe 01       	movw	r30, r28
    20ee:	eb 5b       	subi	r30, 0xBB	; 187
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	f8 01       	movw	r30, r16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	fe 01       	movw	r30, r28
    210a:	ed 5b       	subi	r30, 0xBD	; 189
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	fe 01       	movw	r30, r28
    2114:	ff 96       	adiw	r30, 0x3f	; 63
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
    211a:	fe 01       	movw	r30, r28
    211c:	ff 96       	adiw	r30, 0x3f	; 63
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_voideInit+0x16e>
    2126:	fe 01       	movw	r30, r28
    2128:	ff 96       	adiw	r30, 0x3f	; 63
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
    _delay_ms(35);
    LCD_voidSendCmnd(0b00111000);
    212e:	88 e3       	ldi	r24, 0x38	; 56
    2130:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_voidSendCmnd>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e2       	ldi	r26, 0x20	; 32
    213a:	b2 e4       	ldi	r27, 0x42	; 66
    213c:	8b af       	std	Y+59, r24	; 0x3b
    213e:	9c af       	std	Y+60, r25	; 0x3c
    2140:	ad af       	std	Y+61, r26	; 0x3d
    2142:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2144:	6b ad       	ldd	r22, Y+59	; 0x3b
    2146:	7c ad       	ldd	r23, Y+60	; 0x3c
    2148:	8d ad       	ldd	r24, Y+61	; 0x3d
    214a:	9e ad       	ldd	r25, Y+62	; 0x3e
    214c:	2b ea       	ldi	r18, 0xAB	; 171
    214e:	3a ea       	ldi	r19, 0xAA	; 170
    2150:	4a ea       	ldi	r20, 0xAA	; 170
    2152:	5e e3       	ldi	r21, 0x3E	; 62
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8f ab       	std	Y+55, r24	; 0x37
    215e:	98 af       	std	Y+56, r25	; 0x38
    2160:	a9 af       	std	Y+57, r26	; 0x39
    2162:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2164:	6f a9       	ldd	r22, Y+55	; 0x37
    2166:	78 ad       	ldd	r23, Y+56	; 0x38
    2168:	89 ad       	ldd	r24, Y+57	; 0x39
    216a:	9a ad       	ldd	r25, Y+58	; 0x3a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	1c f4       	brge	.+6      	; 0x2182 <LCD_voideInit+0x1ce>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	8e ab       	std	Y+54, r24	; 0x36
    2180:	91 c0       	rjmp	.+290    	; 0x22a4 <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    2182:	6f a9       	ldd	r22, Y+55	; 0x37
    2184:	78 ad       	ldd	r23, Y+56	; 0x38
    2186:	89 ad       	ldd	r24, Y+57	; 0x39
    2188:	9a ad       	ldd	r25, Y+58	; 0x3a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	53 e4       	ldi	r21, 0x43	; 67
    2192:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	0c f0       	brlt	.+2      	; 0x219c <LCD_voideInit+0x1e8>
    219a:	7b c0       	rjmp	.+246    	; 0x2292 <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    219c:	6b ad       	ldd	r22, Y+59	; 0x3b
    219e:	7c ad       	ldd	r23, Y+60	; 0x3c
    21a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8a ab       	std	Y+50, r24	; 0x32
    21b6:	9b ab       	std	Y+51, r25	; 0x33
    21b8:	ac ab       	std	Y+52, r26	; 0x34
    21ba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	6a a9       	ldd	r22, Y+50	; 0x32
    21be:	7b a9       	ldd	r23, Y+51	; 0x33
    21c0:	8c a9       	ldd	r24, Y+52	; 0x34
    21c2:	9d a9       	ldd	r25, Y+53	; 0x35
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a e7       	ldi	r20, 0x7A	; 122
    21ca:	53 e4       	ldi	r21, 0x43	; 67
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8e a7       	std	Y+46, r24	; 0x2e
    21d6:	9f a7       	std	Y+47, r25	; 0x2f
    21d8:	a8 ab       	std	Y+48, r26	; 0x30
    21da:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    21dc:	6e a5       	ldd	r22, Y+46	; 0x2e
    21de:	7f a5       	ldd	r23, Y+47	; 0x2f
    21e0:	88 a9       	ldd	r24, Y+48	; 0x30
    21e2:	99 a9       	ldd	r25, Y+49	; 0x31
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_voideInit+0x24a>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9d a7       	std	Y+45, r25	; 0x2d
    21fa:	8c a7       	std	Y+44, r24	; 0x2c
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    21fe:	6e a5       	ldd	r22, Y+46	; 0x2e
    2200:	7f a5       	ldd	r23, Y+47	; 0x2f
    2202:	88 a9       	ldd	r24, Y+48	; 0x30
    2204:	99 a9       	ldd	r25, Y+49	; 0x31
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	6a a9       	ldd	r22, Y+50	; 0x32
    2218:	7b a9       	ldd	r23, Y+51	; 0x33
    221a:	8c a9       	ldd	r24, Y+52	; 0x34
    221c:	9d a9       	ldd	r25, Y+53	; 0x35
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9d a7       	std	Y+45, r25	; 0x2d
    223c:	8c a7       	std	Y+44, r24	; 0x2c
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_voideInit+0x2aa>
    2240:	89 e1       	ldi	r24, 0x19	; 25
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9b a7       	std	Y+43, r25	; 0x2b
    2246:	8a a7       	std	Y+42, r24	; 0x2a
    2248:	8a a5       	ldd	r24, Y+42	; 0x2a
    224a:	9b a5       	ldd	r25, Y+43	; 0x2b
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_voideInit+0x298>
    2250:	9b a7       	std	Y+43, r25	; 0x2b
    2252:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8c a5       	ldd	r24, Y+44	; 0x2c
    2256:	9d a5       	ldd	r25, Y+45	; 0x2d
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9d a7       	std	Y+45, r25	; 0x2d
    225c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2260:	9d a5       	ldd	r25, Y+45	; 0x2d
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_voideInit+0x28c>
    2266:	24 c0       	rjmp	.+72     	; 0x22b0 <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	6e a5       	ldd	r22, Y+46	; 0x2e
    226a:	7f a5       	ldd	r23, Y+47	; 0x2f
    226c:	88 a9       	ldd	r24, Y+48	; 0x30
    226e:	99 a9       	ldd	r25, Y+49	; 0x31
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9d a7       	std	Y+45, r25	; 0x2d
    227a:	8c a7       	std	Y+44, r24	; 0x2c
    227c:	8c a5       	ldd	r24, Y+44	; 0x2c
    227e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2280:	99 a7       	std	Y+41, r25	; 0x29
    2282:	88 a7       	std	Y+40, r24	; 0x28
    2284:	88 a5       	ldd	r24, Y+40	; 0x28
    2286:	99 a5       	ldd	r25, Y+41	; 0x29
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_voideInit+0x2d4>
    228c:	99 a7       	std	Y+41, r25	; 0x29
    228e:	88 a7       	std	Y+40, r24	; 0x28
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2292:	6f a9       	ldd	r22, Y+55	; 0x37
    2294:	78 ad       	ldd	r23, Y+56	; 0x38
    2296:	89 ad       	ldd	r24, Y+57	; 0x39
    2298:	9a ad       	ldd	r25, Y+58	; 0x3a
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8e ab       	std	Y+54, r24	; 0x36
    22a4:	8e a9       	ldd	r24, Y+54	; 0x36
    22a6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a8:	8f a1       	ldd	r24, Y+39	; 0x27
    22aa:	8a 95       	dec	r24
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_voideInit+0x2f6>
    22ae:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_voidSendCmnd(0b00001111);
    22b0:	8f e0       	ldi	r24, 0x0F	; 15
    22b2:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_voidSendCmnd>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e2       	ldi	r26, 0x20	; 32
    22bc:	b2 e4       	ldi	r27, 0x42	; 66
    22be:	8b a3       	std	Y+35, r24	; 0x23
    22c0:	9c a3       	std	Y+36, r25	; 0x24
    22c2:	ad a3       	std	Y+37, r26	; 0x25
    22c4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22c6:	6b a1       	ldd	r22, Y+35	; 0x23
    22c8:	7c a1       	ldd	r23, Y+36	; 0x24
    22ca:	8d a1       	ldd	r24, Y+37	; 0x25
    22cc:	9e a1       	ldd	r25, Y+38	; 0x26
    22ce:	2b ea       	ldi	r18, 0xAB	; 171
    22d0:	3a ea       	ldi	r19, 0xAA	; 170
    22d2:	4a ea       	ldi	r20, 0xAA	; 170
    22d4:	5e e3       	ldi	r21, 0x3E	; 62
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8f 8f       	std	Y+31, r24	; 0x1f
    22e0:	98 a3       	std	Y+32, r25	; 0x20
    22e2:	a9 a3       	std	Y+33, r26	; 0x21
    22e4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22e8:	78 a1       	ldd	r23, Y+32	; 0x20
    22ea:	89 a1       	ldd	r24, Y+33	; 0x21
    22ec:	9a a1       	ldd	r25, Y+34	; 0x22
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	1c f4       	brge	.+6      	; 0x2304 <LCD_voideInit+0x350>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	8e 8f       	std	Y+30, r24	; 0x1e
    2302:	91 c0       	rjmp	.+290    	; 0x2426 <LCD_voideInit+0x472>
	else if (__tmp > 255)
    2304:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2306:	78 a1       	ldd	r23, Y+32	; 0x20
    2308:	89 a1       	ldd	r24, Y+33	; 0x21
    230a:	9a a1       	ldd	r25, Y+34	; 0x22
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4f e7       	ldi	r20, 0x7F	; 127
    2312:	53 e4       	ldi	r21, 0x43	; 67
    2314:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2318:	18 16       	cp	r1, r24
    231a:	0c f0       	brlt	.+2      	; 0x231e <LCD_voideInit+0x36a>
    231c:	7b c0       	rjmp	.+246    	; 0x2414 <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    231e:	6b a1       	ldd	r22, Y+35	; 0x23
    2320:	7c a1       	ldd	r23, Y+36	; 0x24
    2322:	8d a1       	ldd	r24, Y+37	; 0x25
    2324:	9e a1       	ldd	r25, Y+38	; 0x26
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a e7       	ldi	r20, 0x7A	; 122
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8a 8f       	std	Y+26, r24	; 0x1a
    2338:	9b 8f       	std	Y+27, r25	; 0x1b
    233a:	ac 8f       	std	Y+28, r26	; 0x1c
    233c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2340:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2342:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2344:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	4a e7       	ldi	r20, 0x7A	; 122
    234c:	53 e4       	ldi	r21, 0x43	; 67
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	8e 8b       	std	Y+22, r24	; 0x16
    2358:	9f 8b       	std	Y+23, r25	; 0x17
    235a:	a8 8f       	std	Y+24, r26	; 0x18
    235c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    235e:	6e 89       	ldd	r22, Y+22	; 0x16
    2360:	7f 89       	ldd	r23, Y+23	; 0x17
    2362:	88 8d       	ldd	r24, Y+24	; 0x18
    2364:	99 8d       	ldd	r25, Y+25	; 0x19
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	2c f4       	brge	.+10     	; 0x2380 <LCD_voideInit+0x3cc>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9d 8b       	std	Y+21, r25	; 0x15
    237c:	8c 8b       	std	Y+20, r24	; 0x14
    237e:	3f c0       	rjmp	.+126    	; 0x23fe <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    2380:	6e 89       	ldd	r22, Y+22	; 0x16
    2382:	7f 89       	ldd	r23, Y+23	; 0x17
    2384:	88 8d       	ldd	r24, Y+24	; 0x18
    2386:	99 8d       	ldd	r25, Y+25	; 0x19
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	4c f5       	brge	.+82     	; 0x23ea <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2398:	6a 8d       	ldd	r22, Y+26	; 0x1a
    239a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    239c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    239e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9d 8b       	std	Y+21, r25	; 0x15
    23be:	8c 8b       	std	Y+20, r24	; 0x14
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <LCD_voideInit+0x42c>
    23c2:	89 e1       	ldi	r24, 0x19	; 25
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9b 8b       	std	Y+19, r25	; 0x13
    23c8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ca:	8a 89       	ldd	r24, Y+18	; 0x12
    23cc:	9b 89       	ldd	r25, Y+19	; 0x13
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_voideInit+0x41a>
    23d2:	9b 8b       	std	Y+19, r25	; 0x13
    23d4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	8c 89       	ldd	r24, Y+20	; 0x14
    23d8:	9d 89       	ldd	r25, Y+21	; 0x15
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	9d 8b       	std	Y+21, r25	; 0x15
    23de:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	8c 89       	ldd	r24, Y+20	; 0x14
    23e2:	9d 89       	ldd	r25, Y+21	; 0x15
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <LCD_voideInit+0x40e>
    23e8:	24 c0       	rjmp	.+72     	; 0x2432 <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	6e 89       	ldd	r22, Y+22	; 0x16
    23ec:	7f 89       	ldd	r23, Y+23	; 0x17
    23ee:	88 8d       	ldd	r24, Y+24	; 0x18
    23f0:	99 8d       	ldd	r25, Y+25	; 0x19
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9d 8b       	std	Y+21, r25	; 0x15
    23fc:	8c 8b       	std	Y+20, r24	; 0x14
    23fe:	8c 89       	ldd	r24, Y+20	; 0x14
    2400:	9d 89       	ldd	r25, Y+21	; 0x15
    2402:	99 8b       	std	Y+17, r25	; 0x11
    2404:	88 8b       	std	Y+16, r24	; 0x10
    2406:	88 89       	ldd	r24, Y+16	; 0x10
    2408:	99 89       	ldd	r25, Y+17	; 0x11
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_voideInit+0x456>
    240e:	99 8b       	std	Y+17, r25	; 0x11
    2410:	88 8b       	std	Y+16, r24	; 0x10
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2414:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2416:	78 a1       	ldd	r23, Y+32	; 0x20
    2418:	89 a1       	ldd	r24, Y+33	; 0x21
    241a:	9a a1       	ldd	r25, Y+34	; 0x22
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8e 8f       	std	Y+30, r24	; 0x1e
    2426:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2428:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    242a:	8f 85       	ldd	r24, Y+15	; 0x0f
    242c:	8a 95       	dec	r24
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_voideInit+0x478>
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_voidSendCmnd(0x01);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_voidSendCmnd>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 ea       	ldi	r26, 0xA0	; 160
    243e:	b0 e4       	ldi	r27, 0x40	; 64
    2440:	8b 87       	std	Y+11, r24	; 0x0b
    2442:	9c 87       	std	Y+12, r25	; 0x0c
    2444:	ad 87       	std	Y+13, r26	; 0x0d
    2446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a e7       	ldi	r20, 0x7A	; 122
    2456:	53 e4       	ldi	r21, 0x43	; 67
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8f 83       	std	Y+7, r24	; 0x07
    2462:	98 87       	std	Y+8, r25	; 0x08
    2464:	a9 87       	std	Y+9, r26	; 0x09
    2466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_voideInit+0x4d6>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_voideInit+0x536>
    24cc:	89 e1       	ldi	r24, 0x19	; 25
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_voideInit+0x524>
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_voideInit+0x518>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_voideInit+0x560>
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidSendCmnd(0b00000110);
    251c:	86 e0       	ldi	r24, 0x06	; 6
    251e:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_voidSendCmnd>
}
    2522:	c4 5b       	subi	r28, 0xB4	; 180
    2524:	df 4f       	sbci	r29, 0xFF	; 255
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	1f 91       	pop	r17
    2536:	0f 91       	pop	r16
    2538:	08 95       	ret

0000253a <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	69 97       	sbiw	r28, 0x19	; 25
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
    /* Rs = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_LOW);
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD, Copy_u8Cmnd);
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	69 8d       	ldd	r22, Y+25	; 0x19
    2568:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	62 e0       	ldi	r22, 0x02	; 2
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e8       	ldi	r26, 0x80	; 128
    257c:	bf e3       	ldi	r27, 0x3F	; 63
    257e:	8d 8b       	std	Y+21, r24	; 0x15
    2580:	9e 8b       	std	Y+22, r25	; 0x16
    2582:	af 8b       	std	Y+23, r26	; 0x17
    2584:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2586:	6d 89       	ldd	r22, Y+21	; 0x15
    2588:	7e 89       	ldd	r23, Y+22	; 0x16
    258a:	8f 89       	ldd	r24, Y+23	; 0x17
    258c:	98 8d       	ldd	r25, Y+24	; 0x18
    258e:	2b ea       	ldi	r18, 0xAB	; 171
    2590:	3a ea       	ldi	r19, 0xAA	; 170
    2592:	4a ea       	ldi	r20, 0xAA	; 170
    2594:	5e e3       	ldi	r21, 0x3E	; 62
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	89 8b       	std	Y+17, r24	; 0x11
    25a0:	9a 8b       	std	Y+18, r25	; 0x12
    25a2:	ab 8b       	std	Y+19, r26	; 0x13
    25a4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25a6:	69 89       	ldd	r22, Y+17	; 0x11
    25a8:	7a 89       	ldd	r23, Y+18	; 0x12
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	1c f4       	brge	.+6      	; 0x25c4 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	88 8b       	std	Y+16, r24	; 0x10
    25c2:	91 c0       	rjmp	.+290    	; 0x26e6 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    25c4:	69 89       	ldd	r22, Y+17	; 0x11
    25c6:	7a 89       	ldd	r23, Y+18	; 0x12
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4f e7       	ldi	r20, 0x7F	; 127
    25d2:	53 e4       	ldi	r21, 0x43	; 67
    25d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d8:	18 16       	cp	r1, r24
    25da:	0c f0       	brlt	.+2      	; 0x25de <LCD_voidSendCmnd+0xa4>
    25dc:	7b c0       	rjmp	.+246    	; 0x26d4 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    25de:	6d 89       	ldd	r22, Y+21	; 0x15
    25e0:	7e 89       	ldd	r23, Y+22	; 0x16
    25e2:	8f 89       	ldd	r24, Y+23	; 0x17
    25e4:	98 8d       	ldd	r25, Y+24	; 0x18
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a e7       	ldi	r20, 0x7A	; 122
    25ec:	54 e4       	ldi	r21, 0x44	; 68
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8c 87       	std	Y+12, r24	; 0x0c
    25f8:	9d 87       	std	Y+13, r25	; 0x0d
    25fa:	ae 87       	std	Y+14, r26	; 0x0e
    25fc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2600:	7d 85       	ldd	r23, Y+13	; 0x0d
    2602:	8e 85       	ldd	r24, Y+14	; 0x0e
    2604:	9f 85       	ldd	r25, Y+15	; 0x0f
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a e7       	ldi	r20, 0x7A	; 122
    260c:	53 e4       	ldi	r21, 0x43	; 67
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	88 87       	std	Y+8, r24	; 0x08
    2618:	99 87       	std	Y+9, r25	; 0x09
    261a:	aa 87       	std	Y+10, r26	; 0x0a
    261c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    261e:	68 85       	ldd	r22, Y+8	; 0x08
    2620:	79 85       	ldd	r23, Y+9	; 0x09
    2622:	8a 85       	ldd	r24, Y+10	; 0x0a
    2624:	9b 85       	ldd	r25, Y+11	; 0x0b
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2632:	88 23       	and	r24, r24
    2634:	2c f4       	brge	.+10     	; 0x2640 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9f 83       	std	Y+7, r25	; 0x07
    263c:	8e 83       	std	Y+6, r24	; 0x06
    263e:	3f c0       	rjmp	.+126    	; 0x26be <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2640:	68 85       	ldd	r22, Y+8	; 0x08
    2642:	79 85       	ldd	r23, Y+9	; 0x09
    2644:	8a 85       	ldd	r24, Y+10	; 0x0a
    2646:	9b 85       	ldd	r25, Y+11	; 0x0b
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	3f ef       	ldi	r19, 0xFF	; 255
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	57 e4       	ldi	r21, 0x47	; 71
    2650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	4c f5       	brge	.+82     	; 0x26aa <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	6c 85       	ldd	r22, Y+12	; 0x0c
    265a:	7d 85       	ldd	r23, Y+13	; 0x0d
    265c:	8e 85       	ldd	r24, Y+14	; 0x0e
    265e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	9f 83       	std	Y+7, r25	; 0x07
    267e:	8e 83       	std	Y+6, r24	; 0x06
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <LCD_voidSendCmnd+0x166>
    2682:	89 e1       	ldi	r24, 0x19	; 25
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9d 83       	std	Y+5, r25	; 0x05
    2688:	8c 83       	std	Y+4, r24	; 0x04
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	9d 81       	ldd	r25, Y+5	; 0x05
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_voidSendCmnd+0x154>
    2692:	9d 83       	std	Y+5, r25	; 0x05
    2694:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9f 83       	std	Y+7, r25	; 0x07
    269e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	8e 81       	ldd	r24, Y+6	; 0x06
    26a2:	9f 81       	ldd	r25, Y+7	; 0x07
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	69 f7       	brne	.-38     	; 0x2682 <LCD_voidSendCmnd+0x148>
    26a8:	24 c0       	rjmp	.+72     	; 0x26f2 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26aa:	68 85       	ldd	r22, Y+8	; 0x08
    26ac:	79 85       	ldd	r23, Y+9	; 0x09
    26ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    26b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9f 83       	std	Y+7, r25	; 0x07
    26bc:	8e 83       	std	Y+6, r24	; 0x06
    26be:	8e 81       	ldd	r24, Y+6	; 0x06
    26c0:	9f 81       	ldd	r25, Y+7	; 0x07
    26c2:	9b 83       	std	Y+3, r25	; 0x03
    26c4:	8a 83       	std	Y+2, r24	; 0x02
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_voidSendCmnd+0x190>
    26ce:	9b 83       	std	Y+3, r25	; 0x03
    26d0:	8a 83       	std	Y+2, r24	; 0x02
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26d4:	69 89       	ldd	r22, Y+17	; 0x11
    26d6:	7a 89       	ldd	r23, Y+18	; 0x12
    26d8:	8b 89       	ldd	r24, Y+19	; 0x13
    26da:	9c 89       	ldd	r25, Y+20	; 0x14
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	88 8b       	std	Y+16, r24	; 0x10
    26e6:	88 89       	ldd	r24, Y+16	; 0x10
    26e8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	8a 95       	dec	r24
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <LCD_voidSendCmnd+0x1b2>
    26f0:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	62 e0       	ldi	r22, 0x02	; 2
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>

    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    _delay_us(1);

#endif
}
    26fc:	69 96       	adiw	r28, 0x19	; 25
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	69 97       	sbiw	r28, 0x19	; 25
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
    /* Rs = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, DIO_u8_HIGH);
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD, Copy_u8Char);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	69 8d       	ldd	r22, Y+25	; 0x19
    273c:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_HIGH);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	62 e0       	ldi	r22, 0x02	; 2
    2744:	41 e0       	ldi	r20, 0x01	; 1
    2746:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e8       	ldi	r26, 0x80	; 128
    2750:	bf e3       	ldi	r27, 0x3F	; 63
    2752:	8d 8b       	std	Y+21, r24	; 0x15
    2754:	9e 8b       	std	Y+22, r25	; 0x16
    2756:	af 8b       	std	Y+23, r26	; 0x17
    2758:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	2b ea       	ldi	r18, 0xAB	; 171
    2764:	3a ea       	ldi	r19, 0xAA	; 170
    2766:	4a ea       	ldi	r20, 0xAA	; 170
    2768:	5e e3       	ldi	r21, 0x3E	; 62
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	89 8b       	std	Y+17, r24	; 0x11
    2774:	9a 8b       	std	Y+18, r25	; 0x12
    2776:	ab 8b       	std	Y+19, r26	; 0x13
    2778:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    277a:	69 89       	ldd	r22, Y+17	; 0x11
    277c:	7a 89       	ldd	r23, Y+18	; 0x12
    277e:	8b 89       	ldd	r24, Y+19	; 0x13
    2780:	9c 89       	ldd	r25, Y+20	; 0x14
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	1c f4       	brge	.+6      	; 0x2798 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	88 8b       	std	Y+16, r24	; 0x10
    2796:	91 c0       	rjmp	.+290    	; 0x28ba <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2798:	69 89       	ldd	r22, Y+17	; 0x11
    279a:	7a 89       	ldd	r23, Y+18	; 0x12
    279c:	8b 89       	ldd	r24, Y+19	; 0x13
    279e:	9c 89       	ldd	r25, Y+20	; 0x14
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	53 e4       	ldi	r21, 0x43	; 67
    27a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	0c f0       	brlt	.+2      	; 0x27b2 <LCD_voidSendChar+0xa4>
    27b0:	7b c0       	rjmp	.+246    	; 0x28a8 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    27b2:	6d 89       	ldd	r22, Y+21	; 0x15
    27b4:	7e 89       	ldd	r23, Y+22	; 0x16
    27b6:	8f 89       	ldd	r24, Y+23	; 0x17
    27b8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	4a e7       	ldi	r20, 0x7A	; 122
    27c0:	54 e4       	ldi	r21, 0x44	; 68
    27c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	8c 87       	std	Y+12, r24	; 0x0c
    27cc:	9d 87       	std	Y+13, r25	; 0x0d
    27ce:	ae 87       	std	Y+14, r26	; 0x0e
    27d0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    27d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    27d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a e7       	ldi	r20, 0x7A	; 122
    27e0:	53 e4       	ldi	r21, 0x43	; 67
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	88 87       	std	Y+8, r24	; 0x08
    27ec:	99 87       	std	Y+9, r25	; 0x09
    27ee:	aa 87       	std	Y+10, r26	; 0x0a
    27f0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27f2:	68 85       	ldd	r22, Y+8	; 0x08
    27f4:	79 85       	ldd	r23, Y+9	; 0x09
    27f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <LCD_voidSendChar+0x106>
		__ticks = 1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9f 83       	std	Y+7, r25	; 0x07
    2810:	8e 83       	std	Y+6, r24	; 0x06
    2812:	3f c0       	rjmp	.+126    	; 0x2892 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2814:	68 85       	ldd	r22, Y+8	; 0x08
    2816:	79 85       	ldd	r23, Y+9	; 0x09
    2818:	8a 85       	ldd	r24, Y+10	; 0x0a
    281a:	9b 85       	ldd	r25, Y+11	; 0x0b
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	3f ef       	ldi	r19, 0xFF	; 255
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	57 e4       	ldi	r21, 0x47	; 71
    2824:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	4c f5       	brge	.+82     	; 0x287e <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	6c 85       	ldd	r22, Y+12	; 0x0c
    282e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2830:	8e 85       	ldd	r24, Y+14	; 0x0e
    2832:	9f 85       	ldd	r25, Y+15	; 0x0f
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e2       	ldi	r20, 0x20	; 32
    283a:	51 e4       	ldi	r21, 0x41	; 65
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9f 83       	std	Y+7, r25	; 0x07
    2852:	8e 83       	std	Y+6, r24	; 0x06
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <LCD_voidSendChar+0x166>
    2856:	89 e1       	ldi	r24, 0x19	; 25
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9d 83       	std	Y+5, r25	; 0x05
    285c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    285e:	8c 81       	ldd	r24, Y+4	; 0x04
    2860:	9d 81       	ldd	r25, Y+5	; 0x05
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <LCD_voidSendChar+0x154>
    2866:	9d 83       	std	Y+5, r25	; 0x05
    2868:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	8e 81       	ldd	r24, Y+6	; 0x06
    286c:	9f 81       	ldd	r25, Y+7	; 0x07
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	9f 83       	std	Y+7, r25	; 0x07
    2872:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2874:	8e 81       	ldd	r24, Y+6	; 0x06
    2876:	9f 81       	ldd	r25, Y+7	; 0x07
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	69 f7       	brne	.-38     	; 0x2856 <LCD_voidSendChar+0x148>
    287c:	24 c0       	rjmp	.+72     	; 0x28c6 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287e:	68 85       	ldd	r22, Y+8	; 0x08
    2880:	79 85       	ldd	r23, Y+9	; 0x09
    2882:	8a 85       	ldd	r24, Y+10	; 0x0a
    2884:	9b 85       	ldd	r25, Y+11	; 0x0b
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9f 83       	std	Y+7, r25	; 0x07
    2890:	8e 83       	std	Y+6, r24	; 0x06
    2892:	8e 81       	ldd	r24, Y+6	; 0x06
    2894:	9f 81       	ldd	r25, Y+7	; 0x07
    2896:	9b 83       	std	Y+3, r25	; 0x03
    2898:	8a 83       	std	Y+2, r24	; 0x02
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <LCD_voidSendChar+0x190>
    28a2:	9b 83       	std	Y+3, r25	; 0x03
    28a4:	8a 83       	std	Y+2, r24	; 0x02
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28a8:	69 89       	ldd	r22, Y+17	; 0x11
    28aa:	7a 89       	ldd	r23, Y+18	; 0x12
    28ac:	8b 89       	ldd	r24, Y+19	; 0x13
    28ae:	9c 89       	ldd	r25, Y+20	; 0x14
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	88 8b       	std	Y+16, r24	; 0x10
    28ba:	88 89       	ldd	r24, Y+16	; 0x10
    28bc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	8a 95       	dec	r24
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_voidSendChar+0x1b2>
    28c4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	62 e0       	ldi	r22, 0x02	; 2
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW);

#endif
}
    28d0:	69 96       	adiw	r28, 0x19	; 25
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <LCD_PrintString>:

void LCD_PrintString(const char *str)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <LCD_PrintString+0x6>
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	9b 83       	std	Y+3, r25	; 0x03
    28f0:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    28f2:	19 82       	std	Y+1, r1	; 0x01
    28f4:	0e c0       	rjmp	.+28     	; 0x2912 <LCD_PrintString+0x30>
    while (str[i] != '\0')
    {
        LCD_voidSendChar(str[i]);
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	80 81       	ld	r24, Z
    2908:	0e 94 87 13 	call	0x270e	; 0x270e <LCD_voidSendChar>
        i++;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_PrintString(const char *str)
{
    u8 i = 0;
    while (str[i] != '\0')
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	80 81       	ld	r24, Z
    2924:	88 23       	and	r24, r24
    2926:	39 f7       	brne	.-50     	; 0x28f6 <LCD_PrintString+0x14>
    void LCD_voidClr()
    {
        LCD_voidSendCmnd(0x01);
        _delay_ms(2);
    }
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <LCD_voidClr.1385>:
        LCD_voidSendChar(str[i]);
        i++;
    }

    void LCD_voidClr()
    {
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	2e 97       	sbiw	r28, 0x0e	; 14
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
        LCD_voidSendCmnd(0x01);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_voidSendCmnd>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e4       	ldi	r27, 0x40	; 64
    2956:	8b 87       	std	Y+11, r24	; 0x0b
    2958:	9c 87       	std	Y+12, r25	; 0x0c
    295a:	ad 87       	std	Y+13, r26	; 0x0d
    295c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2960:	7c 85       	ldd	r23, Y+12	; 0x0c
    2962:	8d 85       	ldd	r24, Y+13	; 0x0d
    2964:	9e 85       	ldd	r25, Y+14	; 0x0e
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a e7       	ldi	r20, 0x7A	; 122
    296c:	53 e4       	ldi	r21, 0x43	; 67
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8f 83       	std	Y+7, r24	; 0x07
    2978:	98 87       	std	Y+8, r25	; 0x08
    297a:	a9 87       	std	Y+9, r26	; 0x09
    297c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	78 85       	ldd	r23, Y+8	; 0x08
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <LCD_voidClr.1385+0x6c>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <LCD_voidClr.1385+0xea>
	else if (__tmp > 65535)
    29a0:	6f 81       	ldd	r22, Y+7	; 0x07
    29a2:	78 85       	ldd	r23, Y+8	; 0x08
    29a4:	89 85       	ldd	r24, Y+9	; 0x09
    29a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <LCD_voidClr.1385+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    29bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29be:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <LCD_voidClr.1385+0xcc>
    29e2:	89 e1       	ldi	r24, 0x19	; 25
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_voidClr.1385+0xba>
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <LCD_voidClr.1385+0xae>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <LCD_voidClr.1385+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_voidClr.1385+0xf6>
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
    }
    2a32:	2e 96       	adiw	r28, 0x0e	; 14
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <LCD_u8GoToXY>:
}
u8 LCD_u8GoToXY(u8 COPY_u8LineNum, u8 Copy_u8location)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <LCD_u8GoToXY+0x6>
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <LCD_u8GoToXY+0x8>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	8a 83       	std	Y+2, r24	; 0x02
    2a54:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Errorstate = STD_TYPES_OK;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	89 83       	std	Y+1, r24	; 0x01
    if (COPY_u8LineNum <= 39)
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	88 32       	cpi	r24, 0x28	; 40
    2a5e:	e0 f4       	brcc	.+56     	; 0x2a98 <LCD_u8GoToXY+0x54>
    {
        switch (COPY_u8LineNum)
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	3d 83       	std	Y+5, r19	; 0x05
    2a68:	2c 83       	std	Y+4, r18	; 0x04
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <LCD_u8GoToXY+0x3a>
    2a72:	2c 81       	ldd	r18, Y+4	; 0x04
    2a74:	3d 81       	ldd	r19, Y+5	; 0x05
    2a76:	21 30       	cpi	r18, 0x01	; 1
    2a78:	31 05       	cpc	r19, r1
    2a7a:	31 f0       	breq	.+12     	; 0x2a88 <LCD_u8GoToXY+0x44>
    2a7c:	0a c0       	rjmp	.+20     	; 0x2a92 <LCD_u8GoToXY+0x4e>
        {
        case LCD_u8_LINE1:
            LCD_voidSendCmnd(0x80 + Copy_u8location);
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	80 58       	subi	r24, 0x80	; 128
    2a82:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_voidSendCmnd>
    2a86:	0a c0       	rjmp	.+20     	; 0x2a9c <LCD_u8GoToXY+0x58>
            break;
        case LCD_u8_LINE2:
            LCD_voidSendCmnd(0xC0 + Copy_u8location);
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	80 54       	subi	r24, 0x40	; 64
    2a8c:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_voidSendCmnd>
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <LCD_u8GoToXY+0x58>
            break;
        default:
            local_u8Errorstate = STD_TYPES_OK;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <LCD_u8GoToXY+0x58>
        }
    }
    else
    {
        local_u8Errorstate = STD_TYPES_OK;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_u8Errorstate;
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <STEPPER_MOTOR_move>:
//	DIO_voidSetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
//
//}

u8 STEPPER_MOTOR_move(u8 copy_u8direction,u8 copy_u8angle)
{
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	c9 57       	subi	r28, 0x79	; 121
    2abc:	d0 40       	sbci	r29, 0x00	; 0
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e8 58       	subi	r30, 0x88	; 136
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 83       	st	Z, r24
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e7 58       	subi	r30, 0x87	; 135
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	60 83       	st	Z, r22
    u8 LocalErrorState = STD_TYPES_OK;
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 58       	subi	r30, 0x89	; 137
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	80 83       	st	Z, r24
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e7 58       	subi	r30, 0x87	; 135
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 81       	ld	r24, Z
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	07 2e       	mov	r0, r23
    2af4:	7b e0       	ldi	r23, 0x0B	; 11
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	aa 1f       	adc	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	7a 95       	dec	r23
    2b00:	d1 f7       	brne	.-12     	; 0x2af6 <STEPPER_MOTOR_move+0x48>
    2b02:	70 2d       	mov	r23, r0
    2b04:	28 e6       	ldi	r18, 0x68	; 104
    2b06:	31 e0       	ldi	r19, 0x01	; 1
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__udivmodsi4>
    2b14:	da 01       	movw	r26, r20
    2b16:	c9 01       	movw	r24, r18
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ea 58       	subi	r30, 0x8A	; 138
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	80 83       	st	Z, r24
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    2b20:	fe 01       	movw	r30, r28
    2b22:	e8 58       	subi	r30, 0x88	; 136
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	80 81       	ld	r24, Z
    2b28:	81 30       	cpi	r24, 0x01	; 1
    2b2a:	39 f0       	breq	.+14     	; 0x2b3a <STEPPER_MOTOR_move+0x8c>
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e8 58       	subi	r30, 0x88	; 136
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	88 23       	and	r24, r24
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <STEPPER_MOTOR_move+0x8c>
    2b38:	58 c5       	rjmp	.+2736   	; 0x35ea <STEPPER_MOTOR_move+0xb3c>
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e8 58       	subi	r30, 0x88	; 136
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <STEPPER_MOTOR_move+0x9a>
    2b46:	10 c3       	rjmp	.+1568   	; 0x3168 <STEPPER_MOTOR_move+0x6ba>
            {
                for(int i=0; i>=Local_u8Steps; i++)
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ec 58       	subi	r30, 0x8C	; 140
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	11 82       	std	Z+1, r1	; 0x01
    2b50:	10 82       	st	Z, r1
    2b52:	fa c2       	rjmp	.+1524   	; 0x3148 <STEPPER_MOTOR_move+0x69a>
                {
                    
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	63 e0       	ldi	r22, 0x03	; 3
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	64 e0       	ldi	r22, 0x04	; 4
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	65 e0       	ldi	r22, 0x05	; 5
    2b6c:	41 e0       	ldi	r20, 0x01	; 1
    2b6e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	66 e0       	ldi	r22, 0x06	; 6
    2b76:	41 e0       	ldi	r20, 0x01	; 1
    2b78:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e3 59       	subi	r30, 0x93	; 147
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e2       	ldi	r26, 0x20	; 32
    2b88:	b1 e4       	ldi	r27, 0x41	; 65
    2b8a:	80 83       	st	Z, r24
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	a2 83       	std	Z+2, r26	; 0x02
    2b90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b92:	8e 01       	movw	r16, r28
    2b94:	07 59       	subi	r16, 0x97	; 151
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e3 59       	subi	r30, 0x93	; 147
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a e7       	ldi	r20, 0x7A	; 122
    2bac:	53 e4       	ldi	r21, 0x43	; 67
    2bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	80 83       	st	Z, r24
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	a2 83       	std	Z+2, r26	; 0x02
    2bbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e7 59       	subi	r30, 0x97	; 151
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5f e3       	ldi	r21, 0x3F	; 63
    2bd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bda:	88 23       	and	r24, r24
    2bdc:	44 f4       	brge	.+16     	; 0x2bee <STEPPER_MOTOR_move+0x140>
		__ticks = 1;
    2bde:	fe 01       	movw	r30, r28
    2be0:	e9 59       	subi	r30, 0x99	; 153
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	64 c0       	rjmp	.+200    	; 0x2cb6 <STEPPER_MOTOR_move+0x208>
	else if (__tmp > 65535)
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e7 59       	subi	r30, 0x97	; 151
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	60 81       	ld	r22, Z
    2bf6:	71 81       	ldd	r23, Z+1	; 0x01
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	93 81       	ldd	r25, Z+3	; 0x03
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	0c f0       	brlt	.+2      	; 0x2c0e <STEPPER_MOTOR_move+0x160>
    2c0c:	43 c0       	rjmp	.+134    	; 0x2c94 <STEPPER_MOTOR_move+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e3 59       	subi	r30, 0x93	; 147
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8e 01       	movw	r16, r28
    2c2e:	09 59       	subi	r16, 0x99	; 153
    2c30:	1f 4f       	sbci	r17, 0xFF	; 255
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	f8 01       	movw	r30, r16
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	80 83       	st	Z, r24
    2c44:	1f c0       	rjmp	.+62     	; 0x2c84 <STEPPER_MOTOR_move+0x1d6>
    2c46:	fe 01       	movw	r30, r28
    2c48:	eb 59       	subi	r30, 0x9B	; 155
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	89 e1       	ldi	r24, 0x19	; 25
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	fe 01       	movw	r30, r28
    2c56:	eb 59       	subi	r30, 0x9B	; 155
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <STEPPER_MOTOR_move+0x1b0>
    2c62:	fe 01       	movw	r30, r28
    2c64:	eb 59       	subi	r30, 0x9B	; 155
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6c:	de 01       	movw	r26, r28
    2c6e:	a9 59       	subi	r26, 0x99	; 153
    2c70:	bf 4f       	sbci	r27, 0xFF	; 255
    2c72:	fe 01       	movw	r30, r28
    2c74:	e9 59       	subi	r30, 0x99	; 153
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	80 81       	ld	r24, Z
    2c7a:	91 81       	ldd	r25, Z+1	; 0x01
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	11 96       	adiw	r26, 0x01	; 1
    2c80:	9c 93       	st	X, r25
    2c82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	fe 01       	movw	r30, r28
    2c86:	e9 59       	subi	r30, 0x99	; 153
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	d1 f6       	brne	.-76     	; 0x2c46 <STEPPER_MOTOR_move+0x198>
    2c92:	27 c0       	rjmp	.+78     	; 0x2ce2 <STEPPER_MOTOR_move+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	8e 01       	movw	r16, r28
    2c96:	09 59       	subi	r16, 0x99	; 153
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e7 59       	subi	r30, 0x97	; 151
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
    2cb6:	de 01       	movw	r26, r28
    2cb8:	ad 59       	subi	r26, 0x9D	; 157
    2cba:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e9 59       	subi	r30, 0x99	; 153
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	8d 93       	st	X+, r24
    2cc8:	9c 93       	st	X, r25
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ed 59       	subi	r30, 0x9D	; 157
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <STEPPER_MOTOR_move+0x226>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 59       	subi	r30, 0x9D	; 157
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	63 e0       	ldi	r22, 0x03	; 3
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	64 e0       	ldi	r22, 0x04	; 4
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	65 e0       	ldi	r22, 0x05	; 5
    2cfa:	41 e0       	ldi	r20, 0x01	; 1
    2cfc:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	66 e0       	ldi	r22, 0x06	; 6
    2d04:	41 e0       	ldi	r20, 0x01	; 1
    2d06:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e1 5a       	subi	r30, 0xA1	; 161
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e2       	ldi	r26, 0x20	; 32
    2d16:	b1 e4       	ldi	r27, 0x41	; 65
    2d18:	80 83       	st	Z, r24
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	a2 83       	std	Z+2, r26	; 0x02
    2d1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d20:	8e 01       	movw	r16, r28
    2d22:	05 5a       	subi	r16, 0xA5	; 165
    2d24:	1f 4f       	sbci	r17, 0xFF	; 255
    2d26:	fe 01       	movw	r30, r28
    2d28:	e1 5a       	subi	r30, 0xA1	; 161
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	4a e7       	ldi	r20, 0x7A	; 122
    2d3a:	53 e4       	ldi	r21, 0x43	; 67
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	f8 01       	movw	r30, r16
    2d46:	80 83       	st	Z, r24
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	a2 83       	std	Z+2, r26	; 0x02
    2d4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e5 5a       	subi	r30, 0xA5	; 165
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	60 81       	ld	r22, Z
    2d56:	71 81       	ldd	r23, Z+1	; 0x01
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e8       	ldi	r20, 0x80	; 128
    2d62:	5f e3       	ldi	r21, 0x3F	; 63
    2d64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d68:	88 23       	and	r24, r24
    2d6a:	44 f4       	brge	.+16     	; 0x2d7c <STEPPER_MOTOR_move+0x2ce>
		__ticks = 1;
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e7 5a       	subi	r30, 0xA7	; 167
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	80 83       	st	Z, r24
    2d7a:	64 c0       	rjmp	.+200    	; 0x2e44 <STEPPER_MOTOR_move+0x396>
	else if (__tmp > 65535)
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e5 5a       	subi	r30, 0xA5	; 165
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	0c f0       	brlt	.+2      	; 0x2d9c <STEPPER_MOTOR_move+0x2ee>
    2d9a:	43 c0       	rjmp	.+134    	; 0x2e22 <STEPPER_MOTOR_move+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e1 5a       	subi	r30, 0xA1	; 161
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	8e 01       	movw	r16, r28
    2dbc:	07 5a       	subi	r16, 0xA7	; 167
    2dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	cd 01       	movw	r24, r26
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	f8 01       	movw	r30, r16
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	80 83       	st	Z, r24
    2dd2:	1f c0       	rjmp	.+62     	; 0x2e12 <STEPPER_MOTOR_move+0x364>
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e9 5a       	subi	r30, 0xA9	; 169
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	89 e1       	ldi	r24, 0x19	; 25
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	80 83       	st	Z, r24
    2de2:	fe 01       	movw	r30, r28
    2de4:	e9 5a       	subi	r30, 0xA9	; 169
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 81       	ld	r24, Z
    2dea:	91 81       	ldd	r25, Z+1	; 0x01
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <STEPPER_MOTOR_move+0x33e>
    2df0:	fe 01       	movw	r30, r28
    2df2:	e9 5a       	subi	r30, 0xA9	; 169
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfa:	de 01       	movw	r26, r28
    2dfc:	a7 5a       	subi	r26, 0xA7	; 167
    2dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2e00:	fe 01       	movw	r30, r28
    2e02:	e7 5a       	subi	r30, 0xA7	; 167
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	80 81       	ld	r24, Z
    2e08:	91 81       	ldd	r25, Z+1	; 0x01
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	11 96       	adiw	r26, 0x01	; 1
    2e0e:	9c 93       	st	X, r25
    2e10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e12:	fe 01       	movw	r30, r28
    2e14:	e7 5a       	subi	r30, 0xA7	; 167
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	d1 f6       	brne	.-76     	; 0x2dd4 <STEPPER_MOTOR_move+0x326>
    2e20:	27 c0       	rjmp	.+78     	; 0x2e70 <STEPPER_MOTOR_move+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	8e 01       	movw	r16, r28
    2e24:	07 5a       	subi	r16, 0xA7	; 167
    2e26:	1f 4f       	sbci	r17, 0xFF	; 255
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e5 5a       	subi	r30, 0xA5	; 165
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	f8 01       	movw	r30, r16
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	80 83       	st	Z, r24
    2e44:	de 01       	movw	r26, r28
    2e46:	ab 5a       	subi	r26, 0xAB	; 171
    2e48:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e7 5a       	subi	r30, 0xA7	; 167
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	8d 93       	st	X+, r24
    2e56:	9c 93       	st	X, r25
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 5a       	subi	r30, 0xAB	; 171
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <STEPPER_MOTOR_move+0x3b4>
    2e66:	fe 01       	movw	r30, r28
    2e68:	eb 5a       	subi	r30, 0xAB	; 171
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	63 e0       	ldi	r22, 0x03	; 3
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2e7a:	82 e0       	ldi	r24, 0x02	; 2
    2e7c:	64 e0       	ldi	r22, 0x04	; 4
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    2e84:	82 e0       	ldi	r24, 0x02	; 2
    2e86:	65 e0       	ldi	r22, 0x05	; 5
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	66 e0       	ldi	r22, 0x06	; 6
    2e92:	41 e0       	ldi	r20, 0x01	; 1
    2e94:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    2e98:	fe 01       	movw	r30, r28
    2e9a:	ef 5a       	subi	r30, 0xAF	; 175
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	a0 e2       	ldi	r26, 0x20	; 32
    2ea4:	b1 e4       	ldi	r27, 0x41	; 65
    2ea6:	80 83       	st	Z, r24
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	a2 83       	std	Z+2, r26	; 0x02
    2eac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eae:	8e 01       	movw	r16, r28
    2eb0:	03 5b       	subi	r16, 0xB3	; 179
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	ef 5a       	subi	r30, 0xAF	; 175
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	4a e7       	ldi	r20, 0x7A	; 122
    2ec8:	53 e4       	ldi	r21, 0x43	; 67
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	f8 01       	movw	r30, r16
    2ed4:	80 83       	st	Z, r24
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	a2 83       	std	Z+2, r26	; 0x02
    2eda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2edc:	fe 01       	movw	r30, r28
    2ede:	e3 5b       	subi	r30, 0xB3	; 179
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e8       	ldi	r20, 0x80	; 128
    2ef0:	5f e3       	ldi	r21, 0x3F	; 63
    2ef2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ef6:	88 23       	and	r24, r24
    2ef8:	44 f4       	brge	.+16     	; 0x2f0a <STEPPER_MOTOR_move+0x45c>
		__ticks = 1;
    2efa:	fe 01       	movw	r30, r28
    2efc:	e5 5b       	subi	r30, 0xB5	; 181
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	64 c0       	rjmp	.+200    	; 0x2fd2 <STEPPER_MOTOR_move+0x524>
	else if (__tmp > 65535)
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e3 5b       	subi	r30, 0xB3	; 179
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	93 81       	ldd	r25, Z+3	; 0x03
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	3f ef       	ldi	r19, 0xFF	; 255
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	57 e4       	ldi	r21, 0x47	; 71
    2f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	0c f0       	brlt	.+2      	; 0x2f2a <STEPPER_MOTOR_move+0x47c>
    2f28:	43 c0       	rjmp	.+134    	; 0x2fb0 <STEPPER_MOTOR_move+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ef 5a       	subi	r30, 0xAF	; 175
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	60 81       	ld	r22, Z
    2f32:	71 81       	ldd	r23, Z+1	; 0x01
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e2       	ldi	r20, 0x20	; 32
    2f3e:	51 e4       	ldi	r21, 0x41	; 65
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	8e 01       	movw	r16, r28
    2f4a:	05 5b       	subi	r16, 0xB5	; 181
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	80 83       	st	Z, r24
    2f60:	1f c0       	rjmp	.+62     	; 0x2fa0 <STEPPER_MOTOR_move+0x4f2>
    2f62:	fe 01       	movw	r30, r28
    2f64:	e7 5b       	subi	r30, 0xB7	; 183
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	89 e1       	ldi	r24, 0x19	; 25
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 5b       	subi	r30, 0xB7	; 183
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <STEPPER_MOTOR_move+0x4cc>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e7 5b       	subi	r30, 0xB7	; 183
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f88:	de 01       	movw	r26, r28
    2f8a:	a5 5b       	subi	r26, 0xB5	; 181
    2f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e5 5b       	subi	r30, 0xB5	; 181
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	11 96       	adiw	r26, 0x01	; 1
    2f9c:	9c 93       	st	X, r25
    2f9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e5 5b       	subi	r30, 0xB5	; 181
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	d1 f6       	brne	.-76     	; 0x2f62 <STEPPER_MOTOR_move+0x4b4>
    2fae:	27 c0       	rjmp	.+78     	; 0x2ffe <STEPPER_MOTOR_move+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	05 5b       	subi	r16, 0xB5	; 181
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e3 5b       	subi	r30, 0xB3	; 179
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	f8 01       	movw	r30, r16
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	de 01       	movw	r26, r28
    2fd4:	a9 5b       	subi	r26, 0xB9	; 185
    2fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e5 5b       	subi	r30, 0xB5	; 181
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	8d 93       	st	X+, r24
    2fe4:	9c 93       	st	X, r25
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e9 5b       	subi	r30, 0xB9	; 185
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	80 81       	ld	r24, Z
    2fee:	91 81       	ldd	r25, Z+1	; 0x01
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <STEPPER_MOTOR_move+0x542>
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e9 5b       	subi	r30, 0xB9	; 185
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2ffe:	82 e0       	ldi	r24, 0x02	; 2
    3000:	63 e0       	ldi	r22, 0x03	; 3
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    3008:	82 e0       	ldi	r24, 0x02	; 2
    300a:	64 e0       	ldi	r22, 0x04	; 4
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	65 e0       	ldi	r22, 0x05	; 5
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    301c:	82 e0       	ldi	r24, 0x02	; 2
    301e:	66 e0       	ldi	r22, 0x06	; 6
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    3026:	fe 01       	movw	r30, r28
    3028:	ed 5b       	subi	r30, 0xBD	; 189
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 e2       	ldi	r26, 0x20	; 32
    3032:	b1 e4       	ldi	r27, 0x41	; 65
    3034:	80 83       	st	Z, r24
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	a2 83       	std	Z+2, r26	; 0x02
    303a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	8e 01       	movw	r16, r28
    303e:	01 5c       	subi	r16, 0xC1	; 193
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	fe 01       	movw	r30, r28
    3044:	ed 5b       	subi	r30, 0xBD	; 189
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a e7       	ldi	r20, 0x7A	; 122
    3056:	53 e4       	ldi	r21, 0x43	; 67
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	f8 01       	movw	r30, r16
    3062:	80 83       	st	Z, r24
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	a2 83       	std	Z+2, r26	; 0x02
    3068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306a:	fe 01       	movw	r30, r28
    306c:	ff 96       	adiw	r30, 0x3f	; 63
    306e:	60 81       	ld	r22, Z
    3070:	71 81       	ldd	r23, Z+1	; 0x01
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <STEPPER_MOTOR_move+0x5e2>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9e af       	std	Y+62, r25	; 0x3e
    308c:	8d af       	std	Y+61, r24	; 0x3d
    308e:	46 c0       	rjmp	.+140    	; 0x311c <STEPPER_MOTOR_move+0x66e>
	else if (__tmp > 65535)
    3090:	fe 01       	movw	r30, r28
    3092:	ff 96       	adiw	r30, 0x3f	; 63
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	64 f5       	brge	.+88     	; 0x3104 <STEPPER_MOTOR_move+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	fe 01       	movw	r30, r28
    30ae:	ed 5b       	subi	r30, 0xBD	; 189
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e2       	ldi	r20, 0x20	; 32
    30c0:	51 e4       	ldi	r21, 0x41	; 65
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9e af       	std	Y+62, r25	; 0x3e
    30d8:	8d af       	std	Y+61, r24	; 0x3d
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <STEPPER_MOTOR_move+0x64c>
    30dc:	89 e1       	ldi	r24, 0x19	; 25
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9c af       	std	Y+60, r25	; 0x3c
    30e2:	8b af       	std	Y+59, r24	; 0x3b
    30e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    30e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <STEPPER_MOTOR_move+0x63a>
    30ec:	9c af       	std	Y+60, r25	; 0x3c
    30ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	9e af       	std	Y+62, r25	; 0x3e
    30f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    30fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	69 f7       	brne	.-38     	; 0x30dc <STEPPER_MOTOR_move+0x62e>
    3102:	16 c0       	rjmp	.+44     	; 0x3130 <STEPPER_MOTOR_move+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3104:	fe 01       	movw	r30, r28
    3106:	ff 96       	adiw	r30, 0x3f	; 63
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9e af       	std	Y+62, r25	; 0x3e
    311a:	8d af       	std	Y+61, r24	; 0x3d
    311c:	8d ad       	ldd	r24, Y+61	; 0x3d
    311e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3120:	9a af       	std	Y+58, r25	; 0x3a
    3122:	89 af       	std	Y+57, r24	; 0x39
    3124:	89 ad       	ldd	r24, Y+57	; 0x39
    3126:	9a ad       	ldd	r25, Y+58	; 0x3a
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <STEPPER_MOTOR_move+0x67a>
    312c:	9a af       	std	Y+58, r25	; 0x3a
    312e:	89 af       	std	Y+57, r24	; 0x39
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
            {
                for(int i=0; i>=Local_u8Steps; i++)
    3130:	de 01       	movw	r26, r28
    3132:	ac 58       	subi	r26, 0x8C	; 140
    3134:	bf 4f       	sbci	r27, 0xFF	; 255
    3136:	fe 01       	movw	r30, r28
    3138:	ec 58       	subi	r30, 0x8C	; 140
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	80 81       	ld	r24, Z
    313e:	91 81       	ldd	r25, Z+1	; 0x01
    3140:	01 96       	adiw	r24, 0x01	; 1
    3142:	11 96       	adiw	r26, 0x01	; 1
    3144:	9c 93       	st	X, r25
    3146:	8e 93       	st	-X, r24
    3148:	fe 01       	movw	r30, r28
    314a:	ea 58       	subi	r30, 0x8A	; 138
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 81       	ld	r24, Z
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	fe 01       	movw	r30, r28
    3156:	ec 58       	subi	r30, 0x8C	; 140
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 81       	ld	r24, Z
    315c:	91 81       	ldd	r25, Z+1	; 0x01
    315e:	82 17       	cp	r24, r18
    3160:	93 07       	cpc	r25, r19
    3162:	0c f0       	brlt	.+2      	; 0x3166 <STEPPER_MOTOR_move+0x6b8>
    3164:	f7 cc       	rjmp	.-1554   	; 0x2b54 <STEPPER_MOTOR_move+0xa6>
    3166:	45 c2       	rjmp	.+1162   	; 0x35f2 <STEPPER_MOTOR_move+0xb44>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
    3168:	fe 01       	movw	r30, r28
    316a:	e8 58       	subi	r30, 0x88	; 136
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 81       	ld	r24, Z
    3170:	88 23       	and	r24, r24
    3172:	09 f0       	breq	.+2      	; 0x3176 <STEPPER_MOTOR_move+0x6c8>
    3174:	3e c2       	rjmp	.+1148   	; 0x35f2 <STEPPER_MOTOR_move+0xb44>
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    3176:	fe 01       	movw	r30, r28
    3178:	ee 58       	subi	r30, 0x8E	; 142
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	11 82       	std	Z+1, r1	; 0x01
    317e:	10 82       	st	Z, r1
    3180:	24 c2       	rjmp	.+1096   	; 0x35ca <STEPPER_MOTOR_move+0xb1c>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	63 e0       	ldi	r22, 0x03	; 3
    3186:	41 e0       	ldi	r20, 0x01	; 1
    3188:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    318c:	82 e0       	ldi	r24, 0x02	; 2
    318e:	64 e0       	ldi	r22, 0x04	; 4
    3190:	41 e0       	ldi	r20, 0x01	; 1
    3192:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	65 e0       	ldi	r22, 0x05	; 5
    319a:	41 e0       	ldi	r20, 0x01	; 1
    319c:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	66 e0       	ldi	r22, 0x06	; 6
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	a0 e2       	ldi	r26, 0x20	; 32
    31b0:	b1 e4       	ldi	r27, 0x41	; 65
    31b2:	8d ab       	std	Y+53, r24	; 0x35
    31b4:	9e ab       	std	Y+54, r25	; 0x36
    31b6:	af ab       	std	Y+55, r26	; 0x37
    31b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ba:	6d a9       	ldd	r22, Y+53	; 0x35
    31bc:	7e a9       	ldd	r23, Y+54	; 0x36
    31be:	8f a9       	ldd	r24, Y+55	; 0x37
    31c0:	98 ad       	ldd	r25, Y+56	; 0x38
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a e7       	ldi	r20, 0x7A	; 122
    31c8:	53 e4       	ldi	r21, 0x43	; 67
    31ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	89 ab       	std	Y+49, r24	; 0x31
    31d4:	9a ab       	std	Y+50, r25	; 0x32
    31d6:	ab ab       	std	Y+51, r26	; 0x33
    31d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31da:	69 a9       	ldd	r22, Y+49	; 0x31
    31dc:	7a a9       	ldd	r23, Y+50	; 0x32
    31de:	8b a9       	ldd	r24, Y+51	; 0x33
    31e0:	9c a9       	ldd	r25, Y+52	; 0x34
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e8       	ldi	r20, 0x80	; 128
    31e8:	5f e3       	ldi	r21, 0x3F	; 63
    31ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ee:	88 23       	and	r24, r24
    31f0:	2c f4       	brge	.+10     	; 0x31fc <STEPPER_MOTOR_move+0x74e>
		__ticks = 1;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	98 ab       	std	Y+48, r25	; 0x30
    31f8:	8f a7       	std	Y+47, r24	; 0x2f
    31fa:	3f c0       	rjmp	.+126    	; 0x327a <STEPPER_MOTOR_move+0x7cc>
	else if (__tmp > 65535)
    31fc:	69 a9       	ldd	r22, Y+49	; 0x31
    31fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3200:	8b a9       	ldd	r24, Y+51	; 0x33
    3202:	9c a9       	ldd	r25, Y+52	; 0x34
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	3f ef       	ldi	r19, 0xFF	; 255
    3208:	4f e7       	ldi	r20, 0x7F	; 127
    320a:	57 e4       	ldi	r21, 0x47	; 71
    320c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3210:	18 16       	cp	r1, r24
    3212:	4c f5       	brge	.+82     	; 0x3266 <STEPPER_MOTOR_move+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3214:	6d a9       	ldd	r22, Y+53	; 0x35
    3216:	7e a9       	ldd	r23, Y+54	; 0x36
    3218:	8f a9       	ldd	r24, Y+55	; 0x37
    321a:	98 ad       	ldd	r25, Y+56	; 0x38
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e2       	ldi	r20, 0x20	; 32
    3222:	51 e4       	ldi	r21, 0x41	; 65
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	98 ab       	std	Y+48, r25	; 0x30
    323a:	8f a7       	std	Y+47, r24	; 0x2f
    323c:	0f c0       	rjmp	.+30     	; 0x325c <STEPPER_MOTOR_move+0x7ae>
    323e:	89 e1       	ldi	r24, 0x19	; 25
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9e a7       	std	Y+46, r25	; 0x2e
    3244:	8d a7       	std	Y+45, r24	; 0x2d
    3246:	8d a5       	ldd	r24, Y+45	; 0x2d
    3248:	9e a5       	ldd	r25, Y+46	; 0x2e
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <STEPPER_MOTOR_move+0x79c>
    324e:	9e a7       	std	Y+46, r25	; 0x2e
    3250:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3252:	8f a5       	ldd	r24, Y+47	; 0x2f
    3254:	98 a9       	ldd	r25, Y+48	; 0x30
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	98 ab       	std	Y+48, r25	; 0x30
    325a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325c:	8f a5       	ldd	r24, Y+47	; 0x2f
    325e:	98 a9       	ldd	r25, Y+48	; 0x30
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	69 f7       	brne	.-38     	; 0x323e <STEPPER_MOTOR_move+0x790>
    3264:	14 c0       	rjmp	.+40     	; 0x328e <STEPPER_MOTOR_move+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3266:	69 a9       	ldd	r22, Y+49	; 0x31
    3268:	7a a9       	ldd	r23, Y+50	; 0x32
    326a:	8b a9       	ldd	r24, Y+51	; 0x33
    326c:	9c a9       	ldd	r25, Y+52	; 0x34
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	98 ab       	std	Y+48, r25	; 0x30
    3278:	8f a7       	std	Y+47, r24	; 0x2f
    327a:	8f a5       	ldd	r24, Y+47	; 0x2f
    327c:	98 a9       	ldd	r25, Y+48	; 0x30
    327e:	9c a7       	std	Y+44, r25	; 0x2c
    3280:	8b a7       	std	Y+43, r24	; 0x2b
    3282:	8b a5       	ldd	r24, Y+43	; 0x2b
    3284:	9c a5       	ldd	r25, Y+44	; 0x2c
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <STEPPER_MOTOR_move+0x7d8>
    328a:	9c a7       	std	Y+44, r25	; 0x2c
    328c:	8b a7       	std	Y+43, r24	; 0x2b
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    328e:	82 e0       	ldi	r24, 0x02	; 2
    3290:	63 e0       	ldi	r22, 0x03	; 3
    3292:	41 e0       	ldi	r20, 0x01	; 1
    3294:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    3298:	82 e0       	ldi	r24, 0x02	; 2
    329a:	64 e0       	ldi	r22, 0x04	; 4
    329c:	41 e0       	ldi	r20, 0x01	; 1
    329e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    32a2:	82 e0       	ldi	r24, 0x02	; 2
    32a4:	65 e0       	ldi	r22, 0x05	; 5
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    32ac:	82 e0       	ldi	r24, 0x02	; 2
    32ae:	66 e0       	ldi	r22, 0x06	; 6
    32b0:	41 e0       	ldi	r20, 0x01	; 1
    32b2:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	a0 e2       	ldi	r26, 0x20	; 32
    32bc:	b1 e4       	ldi	r27, 0x41	; 65
    32be:	8f a3       	std	Y+39, r24	; 0x27
    32c0:	98 a7       	std	Y+40, r25	; 0x28
    32c2:	a9 a7       	std	Y+41, r26	; 0x29
    32c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c6:	6f a1       	ldd	r22, Y+39	; 0x27
    32c8:	78 a5       	ldd	r23, Y+40	; 0x28
    32ca:	89 a5       	ldd	r24, Y+41	; 0x29
    32cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4a e7       	ldi	r20, 0x7A	; 122
    32d4:	53 e4       	ldi	r21, 0x43	; 67
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	8b a3       	std	Y+35, r24	; 0x23
    32e0:	9c a3       	std	Y+36, r25	; 0x24
    32e2:	ad a3       	std	Y+37, r26	; 0x25
    32e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32e6:	6b a1       	ldd	r22, Y+35	; 0x23
    32e8:	7c a1       	ldd	r23, Y+36	; 0x24
    32ea:	8d a1       	ldd	r24, Y+37	; 0x25
    32ec:	9e a1       	ldd	r25, Y+38	; 0x26
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e8       	ldi	r20, 0x80	; 128
    32f4:	5f e3       	ldi	r21, 0x3F	; 63
    32f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32fa:	88 23       	and	r24, r24
    32fc:	2c f4       	brge	.+10     	; 0x3308 <STEPPER_MOTOR_move+0x85a>
		__ticks = 1;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9a a3       	std	Y+34, r25	; 0x22
    3304:	89 a3       	std	Y+33, r24	; 0x21
    3306:	3f c0       	rjmp	.+126    	; 0x3386 <STEPPER_MOTOR_move+0x8d8>
	else if (__tmp > 65535)
    3308:	6b a1       	ldd	r22, Y+35	; 0x23
    330a:	7c a1       	ldd	r23, Y+36	; 0x24
    330c:	8d a1       	ldd	r24, Y+37	; 0x25
    330e:	9e a1       	ldd	r25, Y+38	; 0x26
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331c:	18 16       	cp	r1, r24
    331e:	4c f5       	brge	.+82     	; 0x3372 <STEPPER_MOTOR_move+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3320:	6f a1       	ldd	r22, Y+39	; 0x27
    3322:	78 a5       	ldd	r23, Y+40	; 0x28
    3324:	89 a5       	ldd	r24, Y+41	; 0x29
    3326:	9a a5       	ldd	r25, Y+42	; 0x2a
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	9a a3       	std	Y+34, r25	; 0x22
    3346:	89 a3       	std	Y+33, r24	; 0x21
    3348:	0f c0       	rjmp	.+30     	; 0x3368 <STEPPER_MOTOR_move+0x8ba>
    334a:	89 e1       	ldi	r24, 0x19	; 25
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	98 a3       	std	Y+32, r25	; 0x20
    3350:	8f 8f       	std	Y+31, r24	; 0x1f
    3352:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3354:	98 a1       	ldd	r25, Y+32	; 0x20
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <STEPPER_MOTOR_move+0x8a8>
    335a:	98 a3       	std	Y+32, r25	; 0x20
    335c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335e:	89 a1       	ldd	r24, Y+33	; 0x21
    3360:	9a a1       	ldd	r25, Y+34	; 0x22
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	9a a3       	std	Y+34, r25	; 0x22
    3366:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3368:	89 a1       	ldd	r24, Y+33	; 0x21
    336a:	9a a1       	ldd	r25, Y+34	; 0x22
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	69 f7       	brne	.-38     	; 0x334a <STEPPER_MOTOR_move+0x89c>
    3370:	14 c0       	rjmp	.+40     	; 0x339a <STEPPER_MOTOR_move+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3372:	6b a1       	ldd	r22, Y+35	; 0x23
    3374:	7c a1       	ldd	r23, Y+36	; 0x24
    3376:	8d a1       	ldd	r24, Y+37	; 0x25
    3378:	9e a1       	ldd	r25, Y+38	; 0x26
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9a a3       	std	Y+34, r25	; 0x22
    3384:	89 a3       	std	Y+33, r24	; 0x21
    3386:	89 a1       	ldd	r24, Y+33	; 0x21
    3388:	9a a1       	ldd	r25, Y+34	; 0x22
    338a:	9e 8f       	std	Y+30, r25	; 0x1e
    338c:	8d 8f       	std	Y+29, r24	; 0x1d
    338e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3390:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <STEPPER_MOTOR_move+0x8e4>
    3396:	9e 8f       	std	Y+30, r25	; 0x1e
    3398:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    339a:	82 e0       	ldi	r24, 0x02	; 2
    339c:	63 e0       	ldi	r22, 0x03	; 3
    339e:	41 e0       	ldi	r20, 0x01	; 1
    33a0:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    33a4:	82 e0       	ldi	r24, 0x02	; 2
    33a6:	64 e0       	ldi	r22, 0x04	; 4
    33a8:	40 e0       	ldi	r20, 0x00	; 0
    33aa:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	65 e0       	ldi	r22, 0x05	; 5
    33b2:	41 e0       	ldi	r20, 0x01	; 1
    33b4:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    33b8:	82 e0       	ldi	r24, 0x02	; 2
    33ba:	66 e0       	ldi	r22, 0x06	; 6
    33bc:	41 e0       	ldi	r20, 0x01	; 1
    33be:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	a0 e2       	ldi	r26, 0x20	; 32
    33c8:	b1 e4       	ldi	r27, 0x41	; 65
    33ca:	89 8f       	std	Y+25, r24	; 0x19
    33cc:	9a 8f       	std	Y+26, r25	; 0x1a
    33ce:	ab 8f       	std	Y+27, r26	; 0x1b
    33d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d2:	69 8d       	ldd	r22, Y+25	; 0x19
    33d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a e7       	ldi	r20, 0x7A	; 122
    33e0:	53 e4       	ldi	r21, 0x43	; 67
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8d 8b       	std	Y+21, r24	; 0x15
    33ec:	9e 8b       	std	Y+22, r25	; 0x16
    33ee:	af 8b       	std	Y+23, r26	; 0x17
    33f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f2:	6d 89       	ldd	r22, Y+21	; 0x15
    33f4:	7e 89       	ldd	r23, Y+22	; 0x16
    33f6:	8f 89       	ldd	r24, Y+23	; 0x17
    33f8:	98 8d       	ldd	r25, Y+24	; 0x18
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	2c f4       	brge	.+10     	; 0x3414 <STEPPER_MOTOR_move+0x966>
		__ticks = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	9c 8b       	std	Y+20, r25	; 0x14
    3410:	8b 8b       	std	Y+19, r24	; 0x13
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <STEPPER_MOTOR_move+0x9e4>
	else if (__tmp > 65535)
    3414:	6d 89       	ldd	r22, Y+21	; 0x15
    3416:	7e 89       	ldd	r23, Y+22	; 0x16
    3418:	8f 89       	ldd	r24, Y+23	; 0x17
    341a:	98 8d       	ldd	r25, Y+24	; 0x18
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	3f ef       	ldi	r19, 0xFF	; 255
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	57 e4       	ldi	r21, 0x47	; 71
    3424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	4c f5       	brge	.+82     	; 0x347e <STEPPER_MOTOR_move+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	69 8d       	ldd	r22, Y+25	; 0x19
    342e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e2       	ldi	r20, 0x20	; 32
    343a:	51 e4       	ldi	r21, 0x41	; 65
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9c 8b       	std	Y+20, r25	; 0x14
    3452:	8b 8b       	std	Y+19, r24	; 0x13
    3454:	0f c0       	rjmp	.+30     	; 0x3474 <STEPPER_MOTOR_move+0x9c6>
    3456:	89 e1       	ldi	r24, 0x19	; 25
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	9a 8b       	std	Y+18, r25	; 0x12
    345c:	89 8b       	std	Y+17, r24	; 0x11
    345e:	89 89       	ldd	r24, Y+17	; 0x11
    3460:	9a 89       	ldd	r25, Y+18	; 0x12
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <STEPPER_MOTOR_move+0x9b4>
    3466:	9a 8b       	std	Y+18, r25	; 0x12
    3468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346a:	8b 89       	ldd	r24, Y+19	; 0x13
    346c:	9c 89       	ldd	r25, Y+20	; 0x14
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	9c 8b       	std	Y+20, r25	; 0x14
    3472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3474:	8b 89       	ldd	r24, Y+19	; 0x13
    3476:	9c 89       	ldd	r25, Y+20	; 0x14
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	69 f7       	brne	.-38     	; 0x3456 <STEPPER_MOTOR_move+0x9a8>
    347c:	14 c0       	rjmp	.+40     	; 0x34a6 <STEPPER_MOTOR_move+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	6d 89       	ldd	r22, Y+21	; 0x15
    3480:	7e 89       	ldd	r23, Y+22	; 0x16
    3482:	8f 89       	ldd	r24, Y+23	; 0x17
    3484:	98 8d       	ldd	r25, Y+24	; 0x18
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9c 8b       	std	Y+20, r25	; 0x14
    3490:	8b 8b       	std	Y+19, r24	; 0x13
    3492:	8b 89       	ldd	r24, Y+19	; 0x13
    3494:	9c 89       	ldd	r25, Y+20	; 0x14
    3496:	98 8b       	std	Y+16, r25	; 0x10
    3498:	8f 87       	std	Y+15, r24	; 0x0f
    349a:	8f 85       	ldd	r24, Y+15	; 0x0f
    349c:	98 89       	ldd	r25, Y+16	; 0x10
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <STEPPER_MOTOR_move+0x9f0>
    34a2:	98 8b       	std	Y+16, r25	; 0x10
    34a4:	8f 87       	std	Y+15, r24	; 0x0f
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    34a6:	82 e0       	ldi	r24, 0x02	; 2
    34a8:	63 e0       	ldi	r22, 0x03	; 3
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	64 e0       	ldi	r22, 0x04	; 4
    34b4:	41 e0       	ldi	r20, 0x01	; 1
    34b6:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	65 e0       	ldi	r22, 0x05	; 5
    34be:	41 e0       	ldi	r20, 0x01	; 1
    34c0:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	66 e0       	ldi	r22, 0x06	; 6
    34c8:	41 e0       	ldi	r20, 0x01	; 1
    34ca:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidSetPinValue>
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	a0 e2       	ldi	r26, 0x20	; 32
    34d4:	b1 e4       	ldi	r27, 0x41	; 65
    34d6:	8b 87       	std	Y+11, r24	; 0x0b
    34d8:	9c 87       	std	Y+12, r25	; 0x0c
    34da:	ad 87       	std	Y+13, r26	; 0x0d
    34dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34de:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	4a e7       	ldi	r20, 0x7A	; 122
    34ec:	53 e4       	ldi	r21, 0x43	; 67
    34ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	8f 83       	std	Y+7, r24	; 0x07
    34f8:	98 87       	std	Y+8, r25	; 0x08
    34fa:	a9 87       	std	Y+9, r26	; 0x09
    34fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3500:	78 85       	ldd	r23, Y+8	; 0x08
    3502:	89 85       	ldd	r24, Y+9	; 0x09
    3504:	9a 85       	ldd	r25, Y+10	; 0x0a
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e8       	ldi	r20, 0x80	; 128
    350c:	5f e3       	ldi	r21, 0x3F	; 63
    350e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3512:	88 23       	and	r24, r24
    3514:	2c f4       	brge	.+10     	; 0x3520 <STEPPER_MOTOR_move+0xa72>
		__ticks = 1;
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
    351e:	3f c0       	rjmp	.+126    	; 0x359e <STEPPER_MOTOR_move+0xaf0>
	else if (__tmp > 65535)
    3520:	6f 81       	ldd	r22, Y+7	; 0x07
    3522:	78 85       	ldd	r23, Y+8	; 0x08
    3524:	89 85       	ldd	r24, Y+9	; 0x09
    3526:	9a 85       	ldd	r25, Y+10	; 0x0a
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	3f ef       	ldi	r19, 0xFF	; 255
    352c:	4f e7       	ldi	r20, 0x7F	; 127
    352e:	57 e4       	ldi	r21, 0x47	; 71
    3530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3534:	18 16       	cp	r1, r24
    3536:	4c f5       	brge	.+82     	; 0x358a <STEPPER_MOTOR_move+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3538:	6b 85       	ldd	r22, Y+11	; 0x0b
    353a:	7c 85       	ldd	r23, Y+12	; 0x0c
    353c:	8d 85       	ldd	r24, Y+13	; 0x0d
    353e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e2       	ldi	r20, 0x20	; 32
    3546:	51 e4       	ldi	r21, 0x41	; 65
    3548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	bc 01       	movw	r22, r24
    3552:	cd 01       	movw	r24, r26
    3554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	9e 83       	std	Y+6, r25	; 0x06
    355e:	8d 83       	std	Y+5, r24	; 0x05
    3560:	0f c0       	rjmp	.+30     	; 0x3580 <STEPPER_MOTOR_move+0xad2>
    3562:	89 e1       	ldi	r24, 0x19	; 25
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	9c 83       	std	Y+4, r25	; 0x04
    3568:	8b 83       	std	Y+3, r24	; 0x03
    356a:	8b 81       	ldd	r24, Y+3	; 0x03
    356c:	9c 81       	ldd	r25, Y+4	; 0x04
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	f1 f7       	brne	.-4      	; 0x356e <STEPPER_MOTOR_move+0xac0>
    3572:	9c 83       	std	Y+4, r25	; 0x04
    3574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3576:	8d 81       	ldd	r24, Y+5	; 0x05
    3578:	9e 81       	ldd	r25, Y+6	; 0x06
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	9e 83       	std	Y+6, r25	; 0x06
    357e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3580:	8d 81       	ldd	r24, Y+5	; 0x05
    3582:	9e 81       	ldd	r25, Y+6	; 0x06
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	69 f7       	brne	.-38     	; 0x3562 <STEPPER_MOTOR_move+0xab4>
    3588:	14 c0       	rjmp	.+40     	; 0x35b2 <STEPPER_MOTOR_move+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358a:	6f 81       	ldd	r22, Y+7	; 0x07
    358c:	78 85       	ldd	r23, Y+8	; 0x08
    358e:	89 85       	ldd	r24, Y+9	; 0x09
    3590:	9a 85       	ldd	r25, Y+10	; 0x0a
    3592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	9e 83       	std	Y+6, r25	; 0x06
    359c:	8d 83       	std	Y+5, r24	; 0x05
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	9e 81       	ldd	r25, Y+6	; 0x06
    35a2:	9a 83       	std	Y+2, r25	; 0x02
    35a4:	89 83       	std	Y+1, r24	; 0x01
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	9a 81       	ldd	r25, Y+2	; 0x02
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	f1 f7       	brne	.-4      	; 0x35aa <STEPPER_MOTOR_move+0xafc>
    35ae:	9a 83       	std	Y+2, r25	; 0x02
    35b0:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    35b2:	de 01       	movw	r26, r28
    35b4:	ae 58       	subi	r26, 0x8E	; 142
    35b6:	bf 4f       	sbci	r27, 0xFF	; 255
    35b8:	fe 01       	movw	r30, r28
    35ba:	ee 58       	subi	r30, 0x8E	; 142
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	01 96       	adiw	r24, 0x01	; 1
    35c4:	11 96       	adiw	r26, 0x01	; 1
    35c6:	9c 93       	st	X, r25
    35c8:	8e 93       	st	-X, r24
    35ca:	fe 01       	movw	r30, r28
    35cc:	ea 58       	subi	r30, 0x8A	; 138
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 81       	ld	r24, Z
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	fe 01       	movw	r30, r28
    35d8:	ee 58       	subi	r30, 0x8E	; 142
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	82 17       	cp	r24, r18
    35e2:	93 07       	cpc	r25, r19
    35e4:	0c f0       	brlt	.+2      	; 0x35e8 <STEPPER_MOTOR_move+0xb3a>
    35e6:	cd cd       	rjmp	.-1126   	; 0x3182 <STEPPER_MOTOR_move+0x6d4>
    35e8:	04 c0       	rjmp	.+8      	; 0x35f2 <STEPPER_MOTOR_move+0xb44>
                }
                
    }
    

else{u8 LocalErrorState = STD_TYPES_NOK;}
    35ea:	fe 01       	movw	r30, r28
    35ec:	ef 58       	subi	r30, 0x8F	; 143
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	10 82       	st	Z, r1
return LocalErrorState;
    35f2:	fe 01       	movw	r30, r28
    35f4:	e9 58       	subi	r30, 0x89	; 137
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	80 81       	ld	r24, Z
}
    35fa:	c7 58       	subi	r28, 0x87	; 135
    35fc:	df 4f       	sbci	r29, 0xFF	; 255
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	cf 91       	pop	r28
    360a:	df 91       	pop	r29
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	08 95       	ret

00003612 <TIMERS_voidTimer1Init>:

/*global pointer to function of timer0 OVF*/
static void(*TIMERS_pfTimer0OVF) (void) = NULL;
static void(*TIMERS_pfTimer0CTC) (void) = NULL;

void TIMERS_voidTimer1Init(void){
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
	/*select timer 1 mode => 14*/
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    361a:	af e4       	ldi	r26, 0x4F	; 79
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	ef e4       	ldi	r30, 0x4F	; 79
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	82 60       	ori	r24, 0x02	; 2
    3626:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    3628:	af e4       	ldi	r26, 0x4F	; 79
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	ef e4       	ldi	r30, 0x4F	; 79
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	8e 7f       	andi	r24, 0xFE	; 254
    3634:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    3636:	ae e4       	ldi	r26, 0x4E	; 78
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	ee e4       	ldi	r30, 0x4E	; 78
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	80 61       	ori	r24, 0x10	; 16
    3642:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    3644:	ae e4       	ldi	r26, 0x4E	; 78
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	ee e4       	ldi	r30, 0x4E	; 78
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	88 60       	ori	r24, 0x08	; 8
    3650:	8c 93       	st	X, r24

	/* select HW action on OC1A => non inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    3652:	af e4       	ldi	r26, 0x4F	; 79
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	ef e4       	ldi	r30, 0x4F	; 79
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 68       	ori	r24, 0x80	; 128
    365e:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    3660:	af e4       	ldi	r26, 0x4F	; 79
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	ef e4       	ldi	r30, 0x4F	; 79
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	8f 7b       	andi	r24, 0xBF	; 191
    366c:	8c 93       	st	X, r24

	/*set top value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
    366e:	e6 e4       	ldi	r30, 0x46	; 70
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	8f e1       	ldi	r24, 0x1F	; 31
    3674:	9e e4       	ldi	r25, 0x4E	; 78
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	80 83       	st	Z, r24

	/* set angel of servo motor */
	TIMERS_u16_OCR1A_REG =999;
    367a:	ea e4       	ldi	r30, 0x4A	; 74
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	87 ee       	ldi	r24, 0xE7	; 231
    3680:	93 e0       	ldi	r25, 0x03	; 3
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	80 83       	st	Z, r24

	/*set prescaler value CLK/8*/
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    3686:	ae e4       	ldi	r26, 0x4E	; 78
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	ee e4       	ldi	r30, 0x4E	; 78
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	8b 7f       	andi	r24, 0xFB	; 251
    3692:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    3694:	ae e4       	ldi	r26, 0x4E	; 78
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	ee e4       	ldi	r30, 0x4E	; 78
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	80 81       	ld	r24, Z
    369e:	82 60       	ori	r24, 0x02	; 2
    36a0:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    36a2:	ae e4       	ldi	r26, 0x4E	; 78
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	ee e4       	ldi	r30, 0x4E	; 78
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	8e 7f       	andi	r24, 0xFE	; 254
    36ae:	8c 93       	st	X, r24
}
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	08 95       	ret

000036b6 <Servo_Angel>:


void Servo_Angel(u8 Copy_u8Angel){
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	0f 92       	push	r0
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	89 83       	std	Y+1, r24	; 0x01
	/*select timer 1 mode => 14*/
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    36c2:	af e4       	ldi	r26, 0x4F	; 79
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	ef e4       	ldi	r30, 0x4F	; 79
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	80 81       	ld	r24, Z
    36cc:	82 60       	ori	r24, 0x02	; 2
    36ce:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    36d0:	af e4       	ldi	r26, 0x4F	; 79
    36d2:	b0 e0       	ldi	r27, 0x00	; 0
    36d4:	ef e4       	ldi	r30, 0x4F	; 79
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	80 81       	ld	r24, Z
    36da:	8e 7f       	andi	r24, 0xFE	; 254
    36dc:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    36de:	ae e4       	ldi	r26, 0x4E	; 78
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	ee e4       	ldi	r30, 0x4E	; 78
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	80 61       	ori	r24, 0x10	; 16
    36ea:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    36ec:	ae e4       	ldi	r26, 0x4E	; 78
    36ee:	b0 e0       	ldi	r27, 0x00	; 0
    36f0:	ee e4       	ldi	r30, 0x4E	; 78
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	80 81       	ld	r24, Z
    36f6:	88 60       	ori	r24, 0x08	; 8
    36f8:	8c 93       	st	X, r24

	/* select HW action on OC1A => non inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    36fa:	af e4       	ldi	r26, 0x4F	; 79
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	ef e4       	ldi	r30, 0x4F	; 79
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	80 68       	ori	r24, 0x80	; 128
    3706:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    3708:	af e4       	ldi	r26, 0x4F	; 79
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	ef e4       	ldi	r30, 0x4F	; 79
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 81       	ld	r24, Z
    3712:	8f 7b       	andi	r24, 0xBF	; 191
    3714:	8c 93       	st	X, r24

	/*set top value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
    3716:	e6 e4       	ldi	r30, 0x46	; 70
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	8f e1       	ldi	r24, 0x1F	; 31
    371c:	9e e4       	ldi	r25, 0x4E	; 78
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24

	/* set angel of servo motor */
	TIMERS_u16_OCR1A_REG =Copy_u8Angel;
    3722:	ea e4       	ldi	r30, 0x4A	; 74
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	88 2f       	mov	r24, r24
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	80 83       	st	Z, r24

	/*set prescaler value CLK/8*/
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    3730:	ae e4       	ldi	r26, 0x4E	; 78
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	ee e4       	ldi	r30, 0x4E	; 78
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	8b 7f       	andi	r24, 0xFB	; 251
    373c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    373e:	ae e4       	ldi	r26, 0x4E	; 78
    3740:	b0 e0       	ldi	r27, 0x00	; 0
    3742:	ee e4       	ldi	r30, 0x4E	; 78
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	80 81       	ld	r24, Z
    3748:	82 60       	ori	r24, 0x02	; 2
    374a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    374c:	ae e4       	ldi	r26, 0x4E	; 78
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	ee e4       	ldi	r30, 0x4E	; 78
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	8e 7f       	andi	r24, 0xFE	; 254
    3758:	8c 93       	st	X, r24
}
    375a:	0f 90       	pop	r0
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <TIMERS_voidTimer0Init>:


void TIMERS_voidTimer0Init(void)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
//    SET_BIT(TIMERS_u8_TCCR0_REG,1);
//    CLR_BIT(TIMERS_u8_TCCR0_REG,0);
//

	/*select mode =. fast pwm mode*/
	SET_BIT(TIMERS_u8_TCCR0_REG,6);
    376a:	a3 e5       	ldi	r26, 0x53	; 83
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	e3 e5       	ldi	r30, 0x53	; 83
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	80 64       	ori	r24, 0x40	; 64
    3776:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    3778:	a3 e5       	ldi	r26, 0x53	; 83
    377a:	b0 e0       	ldi	r27, 0x00	; 0
    377c:	e3 e5       	ldi	r30, 0x53	; 83
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	80 81       	ld	r24, Z
    3782:	88 60       	ori	r24, 0x08	; 8
    3784:	8c 93       	st	X, r24

	/*select HW action on OV0Pin => non inverting*/
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
    3786:	a3 e5       	ldi	r26, 0x53	; 83
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	e3 e5       	ldi	r30, 0x53	; 83
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	80 62       	ori	r24, 0x20	; 32
    3792:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    3794:	a3 e5       	ldi	r26, 0x53	; 83
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e3 e5       	ldi	r30, 0x53	; 83
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	8f 7e       	andi	r24, 0xEF	; 239
    37a0:	8c 93       	st	X, r24
	/*set prescaler value CLK/8*/
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    37a2:	a3 e5       	ldi	r26, 0x53	; 83
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e3 e5       	ldi	r30, 0x53	; 83
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	8b 7f       	andi	r24, 0xFB	; 251
    37ae:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    37b0:	a3 e5       	ldi	r26, 0x53	; 83
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	e3 e5       	ldi	r30, 0x53	; 83
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	82 60       	ori	r24, 0x02	; 2
    37bc:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    37be:	a3 e5       	ldi	r26, 0x53	; 83
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	e3 e5       	ldi	r30, 0x53	; 83
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	8e 7f       	andi	r24, 0xFE	; 254
    37ca:	8c 93       	st	X, r24


}
    37cc:	cf 91       	pop	r28
    37ce:	df 91       	pop	r29
    37d0:	08 95       	ret

000037d2 <TIMERS_voidTimer0SetCopmpareMatchValue>:


void TIMERS_voidTimer0SetCopmpareMatchValue(u8 Copy_u8OCR0Value)
{
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	0f 92       	push	r0
    37d8:	cd b7       	in	r28, 0x3d	; 61
    37da:	de b7       	in	r29, 0x3e	; 62
    37dc:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    37de:	ec e5       	ldi	r30, 0x5C	; 92
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	80 83       	st	Z, r24

}
    37e6:	0f 90       	pop	r0
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <TIMERS_u8Timer0SetCallBack>:


u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf) (void))
{
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	00 d0       	rcall	.+0      	; 0x37f4 <TIMERS_u8Timer0SetCallBack+0x6>
    37f4:	0f 92       	push	r0
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	9b 83       	std	Y+3, r25	; 0x03
    37fc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pf != NULL)
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	9b 81       	ldd	r25, Y+3	; 0x03
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	39 f0       	breq	.+14     	; 0x3818 <TIMERS_u8Timer0SetCallBack+0x2a>
    {
        TIMERS_pfTimer0OVF = Copy_pf;
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	9b 81       	ldd	r25, Y+3	; 0x03
    380e:	90 93 8a 00 	sts	0x008A, r25
    3812:	80 93 89 00 	sts	0x0089, r24
    3816:	01 c0       	rjmp	.+2      	; 0x381a <TIMERS_u8Timer0SetCallBack+0x2c>


    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    3818:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    381a:	89 81       	ldd	r24, Y+1	; 0x01
}
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <TIMERS_u8Timer0CTCSetCallBack>:


u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf) (void))
{
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	00 d0       	rcall	.+0      	; 0x382e <TIMERS_u8Timer0CTCSetCallBack+0x6>
    382e:	0f 92       	push	r0
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
    3834:	9b 83       	std	Y+3, r25	; 0x03
    3836:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8ErrorState = STD_TYPES_OK;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	89 83       	std	Y+1, r24	; 0x01

	    if(Copy_pf != NULL)
    383c:	8a 81       	ldd	r24, Y+2	; 0x02
    383e:	9b 81       	ldd	r25, Y+3	; 0x03
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	39 f0       	breq	.+14     	; 0x3852 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	    {
	        TIMERS_pfTimer0CTC = Copy_pf;
    3844:	8a 81       	ldd	r24, Y+2	; 0x02
    3846:	9b 81       	ldd	r25, Y+3	; 0x03
    3848:	90 93 8c 00 	sts	0x008C, r25
    384c:	80 93 8b 00 	sts	0x008B, r24
    3850:	01 c0       	rjmp	.+2      	; 0x3854 <TIMERS_u8Timer0CTCSetCallBack+0x2c>


	    }
	    else
	    {
	        Local_u8ErrorState = STD_TYPES_NOK;
    3852:	19 82       	std	Y+1, r1	; 0x01
	    }

	    return Local_u8ErrorState;
    3854:	89 81       	ldd	r24, Y+1	; 0x01
}
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <__vector_11>:


void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    3862:	1f 92       	push	r1
    3864:	0f 92       	push	r0
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	0f 92       	push	r0
    386a:	11 24       	eor	r1, r1
    386c:	2f 93       	push	r18
    386e:	3f 93       	push	r19
    3870:	4f 93       	push	r20
    3872:	5f 93       	push	r21
    3874:	6f 93       	push	r22
    3876:	7f 93       	push	r23
    3878:	8f 93       	push	r24
    387a:	9f 93       	push	r25
    387c:	af 93       	push	r26
    387e:	bf 93       	push	r27
    3880:	ef 93       	push	r30
    3882:	ff 93       	push	r31
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    388c:	80 91 8d 00 	lds	r24, 0x008D
    3890:	90 91 8e 00 	lds	r25, 0x008E
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	90 93 8e 00 	sts	0x008E, r25
    389a:	80 93 8d 00 	sts	0x008D, r24
	if(Local_u16CounterOVF == 3907){
    389e:	80 91 8d 00 	lds	r24, 0x008D
    38a2:	90 91 8e 00 	lds	r25, 0x008E
    38a6:	2f e0       	ldi	r18, 0x0F	; 15
    38a8:	83 34       	cpi	r24, 0x43	; 67
    38aa:	92 07       	cpc	r25, r18
    38ac:	99 f4       	brne	.+38     	; 0x38d4 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    38ae:	e2 e5       	ldi	r30, 0x52	; 82
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 ec       	ldi	r24, 0xC0	; 192
    38b4:	80 83       	st	Z, r24
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    38b6:	10 92 8e 00 	sts	0x008E, r1
    38ba:	10 92 8d 00 	sts	0x008D, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL){
    38be:	80 91 89 00 	lds	r24, 0x0089
    38c2:	90 91 8a 00 	lds	r25, 0x008A
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	29 f0       	breq	.+10     	; 0x38d4 <__vector_11+0x72>
			TIMERS_pfTimer0OVF();
    38ca:	e0 91 89 00 	lds	r30, 0x0089
    38ce:	f0 91 8a 00 	lds	r31, 0x008A
    38d2:	09 95       	icall
		}
	}
}
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	ff 91       	pop	r31
    38da:	ef 91       	pop	r30
    38dc:	bf 91       	pop	r27
    38de:	af 91       	pop	r26
    38e0:	9f 91       	pop	r25
    38e2:	8f 91       	pop	r24
    38e4:	7f 91       	pop	r23
    38e6:	6f 91       	pop	r22
    38e8:	5f 91       	pop	r21
    38ea:	4f 91       	pop	r20
    38ec:	3f 91       	pop	r19
    38ee:	2f 91       	pop	r18
    38f0:	0f 90       	pop	r0
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	0f 90       	pop	r0
    38f6:	1f 90       	pop	r1
    38f8:	18 95       	reti

000038fa <__vector_10>:

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    38fa:	1f 92       	push	r1
    38fc:	0f 92       	push	r0
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	0f 92       	push	r0
    3902:	11 24       	eor	r1, r1
    3904:	2f 93       	push	r18
    3906:	3f 93       	push	r19
    3908:	4f 93       	push	r20
    390a:	5f 93       	push	r21
    390c:	6f 93       	push	r22
    390e:	7f 93       	push	r23
    3910:	8f 93       	push	r24
    3912:	9f 93       	push	r25
    3914:	af 93       	push	r26
    3916:	bf 93       	push	r27
    3918:	ef 93       	push	r30
    391a:	ff 93       	push	r31
    391c:	df 93       	push	r29
    391e:	cf 93       	push	r28
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    3924:	80 91 8f 00 	lds	r24, 0x008F
    3928:	90 91 90 00 	lds	r25, 0x0090
    392c:	01 96       	adiw	r24, 0x01	; 1
    392e:	90 93 90 00 	sts	0x0090, r25
    3932:	80 93 8f 00 	sts	0x008F, r24
	if(Local_u16CounterCTC == 10000){
    3936:	80 91 8f 00 	lds	r24, 0x008F
    393a:	90 91 90 00 	lds	r25, 0x0090
    393e:	27 e2       	ldi	r18, 0x27	; 39
    3940:	80 31       	cpi	r24, 0x10	; 16
    3942:	92 07       	cpc	r25, r18
    3944:	79 f4       	brne	.+30     	; 0x3964 <__vector_10+0x6a>
		/* Clear Counter */
		Local_u16CounterCTC = 0;
    3946:	10 92 90 00 	sts	0x0090, r1
    394a:	10 92 8f 00 	sts	0x008F, r1

		/* Call CallBack function*/
		if(TIMERS_pfTimer0CTC != NULL){
    394e:	80 91 8b 00 	lds	r24, 0x008B
    3952:	90 91 8c 00 	lds	r25, 0x008C
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	29 f0       	breq	.+10     	; 0x3964 <__vector_10+0x6a>
		    TIMERS_pfTimer0CTC();
    395a:	e0 91 8b 00 	lds	r30, 0x008B
    395e:	f0 91 8c 00 	lds	r31, 0x008C
    3962:	09 95       	icall
			}

	}
}
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	ff 91       	pop	r31
    396a:	ef 91       	pop	r30
    396c:	bf 91       	pop	r27
    396e:	af 91       	pop	r26
    3970:	9f 91       	pop	r25
    3972:	8f 91       	pop	r24
    3974:	7f 91       	pop	r23
    3976:	6f 91       	pop	r22
    3978:	5f 91       	pop	r21
    397a:	4f 91       	pop	r20
    397c:	3f 91       	pop	r19
    397e:	2f 91       	pop	r18
    3980:	0f 90       	pop	r0
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	0f 90       	pop	r0
    3986:	1f 90       	pop	r1
    3988:	18 95       	reti

0000398a <main>:
#include "EXTI_interface.h"



int main(void)
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	0f 92       	push	r0
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CompareMatchValue =0;
    3994:	19 82       	std	Y+1, r1	; 0x01
	DIO_voidInit();
    3996:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_voidInit>

	Servo_Angel(76);
    399a:	8c e4       	ldi	r24, 0x4C	; 76
    399c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Servo_Angel>
    39a0:	ff cf       	rjmp	.-2      	; 0x39a0 <main+0x16>

000039a2 <__udivmodsi4>:
    39a2:	a1 e2       	ldi	r26, 0x21	; 33
    39a4:	1a 2e       	mov	r1, r26
    39a6:	aa 1b       	sub	r26, r26
    39a8:	bb 1b       	sub	r27, r27
    39aa:	fd 01       	movw	r30, r26
    39ac:	0d c0       	rjmp	.+26     	; 0x39c8 <__udivmodsi4_ep>

000039ae <__udivmodsi4_loop>:
    39ae:	aa 1f       	adc	r26, r26
    39b0:	bb 1f       	adc	r27, r27
    39b2:	ee 1f       	adc	r30, r30
    39b4:	ff 1f       	adc	r31, r31
    39b6:	a2 17       	cp	r26, r18
    39b8:	b3 07       	cpc	r27, r19
    39ba:	e4 07       	cpc	r30, r20
    39bc:	f5 07       	cpc	r31, r21
    39be:	20 f0       	brcs	.+8      	; 0x39c8 <__udivmodsi4_ep>
    39c0:	a2 1b       	sub	r26, r18
    39c2:	b3 0b       	sbc	r27, r19
    39c4:	e4 0b       	sbc	r30, r20
    39c6:	f5 0b       	sbc	r31, r21

000039c8 <__udivmodsi4_ep>:
    39c8:	66 1f       	adc	r22, r22
    39ca:	77 1f       	adc	r23, r23
    39cc:	88 1f       	adc	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	1a 94       	dec	r1
    39d2:	69 f7       	brne	.-38     	; 0x39ae <__udivmodsi4_loop>
    39d4:	60 95       	com	r22
    39d6:	70 95       	com	r23
    39d8:	80 95       	com	r24
    39da:	90 95       	com	r25
    39dc:	9b 01       	movw	r18, r22
    39de:	ac 01       	movw	r20, r24
    39e0:	bd 01       	movw	r22, r26
    39e2:	cf 01       	movw	r24, r30
    39e4:	08 95       	ret

000039e6 <__prologue_saves__>:
    39e6:	2f 92       	push	r2
    39e8:	3f 92       	push	r3
    39ea:	4f 92       	push	r4
    39ec:	5f 92       	push	r5
    39ee:	6f 92       	push	r6
    39f0:	7f 92       	push	r7
    39f2:	8f 92       	push	r8
    39f4:	9f 92       	push	r9
    39f6:	af 92       	push	r10
    39f8:	bf 92       	push	r11
    39fa:	cf 92       	push	r12
    39fc:	df 92       	push	r13
    39fe:	ef 92       	push	r14
    3a00:	ff 92       	push	r15
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	ca 1b       	sub	r28, r26
    3a10:	db 0b       	sbc	r29, r27
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	09 94       	ijmp

00003a1e <__epilogue_restores__>:
    3a1e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a20:	39 88       	ldd	r3, Y+17	; 0x11
    3a22:	48 88       	ldd	r4, Y+16	; 0x10
    3a24:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a26:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a28:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a30:	b9 84       	ldd	r11, Y+9	; 0x09
    3a32:	c8 84       	ldd	r12, Y+8	; 0x08
    3a34:	df 80       	ldd	r13, Y+7	; 0x07
    3a36:	ee 80       	ldd	r14, Y+6	; 0x06
    3a38:	fd 80       	ldd	r15, Y+5	; 0x05
    3a3a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a3c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a3e:	aa 81       	ldd	r26, Y+2	; 0x02
    3a40:	b9 81       	ldd	r27, Y+1	; 0x01
    3a42:	ce 0f       	add	r28, r30
    3a44:	d1 1d       	adc	r29, r1
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	ed 01       	movw	r28, r26
    3a52:	08 95       	ret

00003a54 <_exit>:
    3a54:	f8 94       	cli

00003a56 <__stop_program>:
    3a56:	ff cf       	rjmp	.-2      	; 0x3a56 <__stop_program>
