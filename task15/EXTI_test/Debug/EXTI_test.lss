
EXTI_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  000043da  0000446e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000d0  008000d0  000044de  2**0
                  ALLOC
  3 .stab         000036b4  00000000  00000000  000044e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e7b  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ad43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000be44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cdc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_1>
       8:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__vector_2>
       c:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 19 	call	0x3360	; 0x3360 <main>
      8a:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 eb       	ldi	r26, 0xB0	; 176
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 eb       	ldi	r24, 0xB0	; 176
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 eb       	ldi	r22, 0xB0	; 176
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DC_Motor_Init>:
#include "DC_interface.h"
#include "DC_Private.h"
#include "DC_Config.h"

void DC_Motor_Init()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor initially
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	62 e0       	ldi	r22, 0x02	; 2
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <DC_Motor_Rotate_Clockwise>:

// Function to rotate the DC motor clockwise
void DC_Motor_Rotate_Clockwise()
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_DIR1, DIO_u8_HIGH); // Set direction pin 1 high
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_LOW);  // Set direction pin 2 low
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <DC_Motor_Rotate_CounterClockwise>:

// Function to rotate the DC motor counter-clockwise
void DC_Motor_Rotate_CounterClockwise()
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);  // Set direction pin 1 low
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_HIGH); // Set direction pin 2 high
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	62 e0       	ldi	r22, 0x02	; 2
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DC_Motor_Stop>:

// Function to stop the DC motor
void DC_Motor_Stop()
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	62 e0       	ldi	r22, 0x02	; 2
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
}
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_privret.h"

void DIO_voidInit(void)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
    DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,
     d2e:	ea e3       	ldi	r30, 0x3A	; 58
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	8f e0       	ldi	r24, 0x0F	; 15
     d34:	80 83       	st	Z, r24
                            DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
                            DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,
                            DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,
     d36:	e7 e3       	ldi	r30, 0x37	; 55
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	8b e0       	ldi	r24, 0x0B	; 11
     d3c:	80 83       	st	Z, r24
                            DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
                            DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,
                            DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

      DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,
     d3e:	e4 e3       	ldi	r30, 0x34	; 52
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	8f e7       	ldi	r24, 0x7F	; 127
     d44:	80 83       	st	Z, r24
                            DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
                            DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,
                            DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION );

      DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,
     d46:	e1 e3       	ldi	r30, 0x31	; 49
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	80 83       	st	Z, r24
    DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION
     ,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION );

     DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,
     d4e:	eb e3       	ldi	r30, 0x3B	; 59
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	8f ef       	ldi	r24, 0xFF	; 255
     d54:	80 83       	st	Z, r24
    DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE
     ,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE );

      DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,
     d56:	e8 e3       	ldi	r30, 0x38	; 56
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	80 83       	st	Z, r24
    DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE
     ,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE );

      DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,
     d5e:	e5 e3       	ldi	r30, 0x35	; 53
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	10 82       	st	Z, r1
    DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE
     ,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE );

      DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,
     d64:	e2 e3       	ldi	r30, 0x32	; 50
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	10 82       	st	Z, r1
    DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE
     ,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE );


   
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinID, u8 Copy_u8PinDirection )
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	2e 97       	sbiw	r28, 0x0e	; 14
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	8a 83       	std	Y+2, r24	; 0x02
     d86:	6b 83       	std	Y+3, r22	; 0x03
     d88:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState = STD_TYPES_OK;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8PortId <= DIO_u8_PORTD ) &&  (Copy_u8PortId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	84 30       	cpi	r24, 0x04	; 4
     d92:	08 f0       	brcs	.+2      	; 0xd96 <DIO_voidSetPinDirection+0x26>
     d94:	0c c1       	rjmp	.+536    	; 0xfae <DIO_voidSetPinDirection+0x23e>
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	88 30       	cpi	r24, 0x08	; 8
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <DIO_voidSetPinDirection+0x2e>
     d9c:	08 c1       	rjmp	.+528    	; 0xfae <DIO_voidSetPinDirection+0x23e>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	21 f0       	breq	.+8      	; 0xdac <DIO_voidSetPinDirection+0x3c>
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	88 23       	and	r24, r24
     da8:	09 f0       	breq	.+2      	; 0xdac <DIO_voidSetPinDirection+0x3c>
     daa:	01 c1       	rjmp	.+514    	; 0xfae <DIO_voidSetPinDirection+0x23e>
{
   switch (Copy_u8PortId)
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3e 87       	std	Y+14, r19	; 0x0e
     db4:	2d 87       	std	Y+13, r18	; 0x0d
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <DIO_voidSetPinDirection+0x52>
     dc0:	4f c0       	rjmp	.+158    	; 0xe60 <DIO_voidSetPinDirection+0xf0>
     dc2:	2d 85       	ldd	r18, Y+13	; 0x0d
     dc4:	3e 85       	ldd	r19, Y+14	; 0x0e
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f4       	brge	.+10     	; 0xdd6 <DIO_voidSetPinDirection+0x66>
     dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dce:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <DIO_voidSetPinDirection+0x80>
     dd4:	ed c0       	rjmp	.+474    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
     dd6:	2d 85       	ldd	r18, Y+13	; 0x0d
     dd8:	3e 85       	ldd	r19, Y+14	; 0x0e
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <DIO_voidSetPinDirection+0x72>
     de0:	77 c0       	rjmp	.+238    	; 0xed0 <DIO_voidSetPinDirection+0x160>
     de2:	8d 85       	ldd	r24, Y+13	; 0x0d
     de4:	9e 85       	ldd	r25, Y+14	; 0x0e
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <DIO_voidSetPinDirection+0x7e>
     dec:	a9 c0       	rjmp	.+338    	; 0xf40 <DIO_voidSetPinDirection+0x1d0>
     dee:	e0 c0       	rjmp	.+448    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
   {
     case DIO_u8_PORTA:
        switch (Copy_u8PinDirection)
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	3c 87       	std	Y+12, r19	; 0x0c
     df8:	2b 87       	std	Y+11, r18	; 0x0b
     dfa:	8b 85       	ldd	r24, Y+11	; 0x0b
     dfc:	9c 85       	ldd	r25, Y+12	; 0x0c
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	d1 f0       	breq	.+52     	; 0xe36 <DIO_voidSetPinDirection+0xc6>
     e02:	2b 85       	ldd	r18, Y+11	; 0x0b
     e04:	3c 85       	ldd	r19, Y+12	; 0x0c
     e06:	21 30       	cpi	r18, 0x01	; 1
     e08:	31 05       	cpc	r19, r1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <DIO_voidSetPinDirection+0x9e>
     e0c:	d1 c0       	rjmp	.+418    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
     e0e:	aa e3       	ldi	r26, 0x3A	; 58
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e3       	ldi	r30, 0x3A	; 58
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_voidSetPinDirection+0xbc>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_voidSetPinDirection+0xb8>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	bd c0       	rjmp	.+378    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
     e36:	aa e3       	ldi	r26, 0x3A	; 58
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ea e3       	ldi	r30, 0x3A	; 58
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_voidSetPinDirection+0xe4>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_voidSetPinDirection+0xe0>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	a8 c0       	rjmp	.+336    	; 0xfb0 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinDirection)
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3a 87       	std	Y+10, r19	; 0x0a
     e68:	29 87       	std	Y+9, r18	; 0x09
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	d1 f0       	breq	.+52     	; 0xea6 <DIO_voidSetPinDirection+0x136>
     e72:	29 85       	ldd	r18, Y+9	; 0x09
     e74:	3a 85       	ldd	r19, Y+10	; 0x0a
     e76:	21 30       	cpi	r18, 0x01	; 1
     e78:	31 05       	cpc	r19, r1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <DIO_voidSetPinDirection+0x10e>
     e7c:	99 c0       	rjmp	.+306    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
     e7e:	a7 e3       	ldi	r26, 0x37	; 55
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e3       	ldi	r30, 0x37	; 55
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_voidSetPinDirection+0x12c>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_voidSetPinDirection+0x128>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	85 c0       	rjmp	.+266    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
     ea6:	a7 e3       	ldi	r26, 0x37	; 55
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e7 e3       	ldi	r30, 0x37	; 55
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_voidSetPinDirection+0x154>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_voidSetPinDirection+0x150>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	70 c0       	rjmp	.+224    	; 0xfb0 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTC:
        switch (Copy_u8PinDirection)
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	38 87       	std	Y+8, r19	; 0x08
     ed8:	2f 83       	std	Y+7, r18	; 0x07
     eda:	8f 81       	ldd	r24, Y+7	; 0x07
     edc:	98 85       	ldd	r25, Y+8	; 0x08
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	d1 f0       	breq	.+52     	; 0xf16 <DIO_voidSetPinDirection+0x1a6>
     ee2:	2f 81       	ldd	r18, Y+7	; 0x07
     ee4:	38 85       	ldd	r19, Y+8	; 0x08
     ee6:	21 30       	cpi	r18, 0x01	; 1
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f0       	breq	.+2      	; 0xeee <DIO_voidSetPinDirection+0x17e>
     eec:	61 c0       	rjmp	.+194    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
     eee:	a4 e3       	ldi	r26, 0x34	; 52
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e4 e3       	ldi	r30, 0x34	; 52
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_voidSetPinDirection+0x19c>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_voidSetPinDirection+0x198>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	4d c0       	rjmp	.+154    	; 0xfb0 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
     f16:	a4 e3       	ldi	r26, 0x34	; 52
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e4 e3       	ldi	r30, 0x34	; 52
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinDirection+0x1c4>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinDirection+0x1c0>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	38 c0       	rjmp	.+112    	; 0xfb0 <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTD:
        switch (Copy_u8PinDirection)
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3e 83       	std	Y+6, r19	; 0x06
     f48:	2d 83       	std	Y+5, r18	; 0x05
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	c9 f0       	breq	.+50     	; 0xf84 <DIO_voidSetPinDirection+0x214>
     f52:	2d 81       	ldd	r18, Y+5	; 0x05
     f54:	3e 81       	ldd	r19, Y+6	; 0x06
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	31 05       	cpc	r19, r1
     f5a:	51 f5       	brne	.+84     	; 0xfb0 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
     f5c:	a1 e3       	ldi	r26, 0x31	; 49
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e1 e3       	ldi	r30, 0x31	; 49
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_voidSetPinDirection+0x20a>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_voidSetPinDirection+0x206>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	16 c0       	rjmp	.+44     	; 0xfb0 <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
     f84:	a1 e3       	ldi	r26, 0x31	; 49
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e1 e3       	ldi	r30, 0x31	; 49
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_voidSetPinDirection+0x232>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_voidSetPinDirection+0x22e>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <DIO_voidSetPinDirection+0x240>

   }
}
else
{
    Local_u8ErrorState = STD_TYPES_NOK;
     fae:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8ErrorState;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01

}
     fb2:	2e 96       	adiw	r28, 0x0e	; 14
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue     (u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	2e 97       	sbiw	r28, 0x0e	; 14
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	8a 83       	std	Y+2, r24	; 0x02
     fda:	6b 83       	std	Y+3, r22	; 0x03
     fdc:	4c 83       	std	Y+4, r20	; 0x04
    u8 local_u8ErrorState = STD_TYPES_OK;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_PinID <= DIO_u8_PIN7)
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	08 f0       	brcs	.+2      	; 0xfea <DIO_voidSetPinValue+0x26>
     fe8:	08 c1       	rjmp	.+528    	; 0x11fa <DIO_voidSetPinValue+0x236>
    {
        
    switch (Copy_u8PortId)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3e 87       	std	Y+14, r19	; 0x0e
     ff2:	2d 87       	std	Y+13, r18	; 0x0d
     ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <DIO_voidSetPinValue+0x3c>
     ffe:	50 c0       	rjmp	.+160    	; 0x10a0 <DIO_voidSetPinValue+0xdc>
    1000:	2d 85       	ldd	r18, Y+13	; 0x0d
    1002:	3e 85       	ldd	r19, Y+14	; 0x0e
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	2c f4       	brge	.+10     	; 0x1014 <DIO_voidSetPinValue+0x50>
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	71 f0       	breq	.+28     	; 0x102e <DIO_voidSetPinValue+0x6a>
    1012:	f1 c0       	rjmp	.+482    	; 0x11f6 <DIO_voidSetPinValue+0x232>
    1014:	2d 85       	ldd	r18, Y+13	; 0x0d
    1016:	3e 85       	ldd	r19, Y+14	; 0x0e
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_voidSetPinValue+0x5c>
    101e:	79 c0       	rjmp	.+242    	; 0x1112 <DIO_voidSetPinValue+0x14e>
    1020:	8d 85       	ldd	r24, Y+13	; 0x0d
    1022:	9e 85       	ldd	r25, Y+14	; 0x0e
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_voidSetPinValue+0x68>
    102a:	ac c0       	rjmp	.+344    	; 0x1184 <DIO_voidSetPinValue+0x1c0>
    102c:	e4 c0       	rjmp	.+456    	; 0x11f6 <DIO_voidSetPinValue+0x232>
    {
    case DIO_u8_PORTA:
        switch (Copy_u8PinValue)
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 87       	std	Y+12, r19	; 0x0c
    1036:	2b 87       	std	Y+11, r18	; 0x0b
    1038:	8b 85       	ldd	r24, Y+11	; 0x0b
    103a:	9c 85       	ldd	r25, Y+12	; 0x0c
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	c9 f0       	breq	.+50     	; 0x1072 <DIO_voidSetPinValue+0xae>
    1040:	2b 85       	ldd	r18, Y+11	; 0x0b
    1042:	3c 85       	ldd	r19, Y+12	; 0x0c
    1044:	21 30       	cpi	r18, 0x01	; 1
    1046:	31 05       	cpc	r19, r1
    1048:	49 f5       	brne	.+82     	; 0x109c <DIO_voidSetPinValue+0xd8>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_voidSetPinValue+0xa4>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_voidSetPinValue+0xa0>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	c5 c0       	rjmp	.+394    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_voidSetPinValue+0xcc>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_voidSetPinValue+0xc8>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	b0 c0       	rjmp	.+352    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    109c:	19 82       	std	Y+1, r1	; 0x01
    109e:	ae c0       	rjmp	.+348    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinValue)
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3a 87       	std	Y+10, r19	; 0x0a
    10a8:	29 87       	std	Y+9, r18	; 0x09
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	c9 f0       	breq	.+50     	; 0x10e4 <DIO_voidSetPinValue+0x120>
    10b2:	29 85       	ldd	r18, Y+9	; 0x09
    10b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b6:	21 30       	cpi	r18, 0x01	; 1
    10b8:	31 05       	cpc	r19, r1
    10ba:	49 f5       	brne	.+82     	; 0x110e <DIO_voidSetPinValue+0x14a>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    10bc:	a8 e3       	ldi	r26, 0x38	; 56
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_voidSetPinValue+0x116>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_voidSetPinValue+0x112>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	8c c0       	rjmp	.+280    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_voidSetPinValue+0x13e>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_voidSetPinValue+0x13a>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	77 c0       	rjmp	.+238    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	75 c0       	rjmp	.+234    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTC:
         switch (Copy_u8PinValue)
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	38 87       	std	Y+8, r19	; 0x08
    111a:	2f 83       	std	Y+7, r18	; 0x07
    111c:	8f 81       	ldd	r24, Y+7	; 0x07
    111e:	98 85       	ldd	r25, Y+8	; 0x08
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	c9 f0       	breq	.+50     	; 0x1156 <DIO_voidSetPinValue+0x192>
    1124:	2f 81       	ldd	r18, Y+7	; 0x07
    1126:	38 85       	ldd	r19, Y+8	; 0x08
    1128:	21 30       	cpi	r18, 0x01	; 1
    112a:	31 05       	cpc	r19, r1
    112c:	49 f5       	brne	.+82     	; 0x1180 <DIO_voidSetPinValue+0x1bc>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    112e:	a5 e3       	ldi	r26, 0x35	; 53
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e5 e3       	ldi	r30, 0x35	; 53
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_voidSetPinValue+0x188>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_voidSetPinValue+0x184>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	53 c0       	rjmp	.+166    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_voidSetPinValue+0x1b0>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_voidSetPinValue+0x1ac>
    1178:	80 95       	com	r24
    117a:	84 23       	and	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	3e c0       	rjmp	.+124    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    1180:	19 82       	std	Y+1, r1	; 0x01
    1182:	3c c0       	rjmp	.+120    	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTD:
         switch (Copy_u8PinValue)
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3e 83       	std	Y+6, r19	; 0x06
    118c:	2d 83       	std	Y+5, r18	; 0x05
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	c9 f0       	breq	.+50     	; 0x11c8 <DIO_voidSetPinValue+0x204>
    1196:	2d 81       	ldd	r18, Y+5	; 0x05
    1198:	3e 81       	ldd	r19, Y+6	; 0x06
    119a:	21 30       	cpi	r18, 0x01	; 1
    119c:	31 05       	cpc	r19, r1
    119e:	49 f5       	brne	.+82     	; 0x11f2 <DIO_voidSetPinValue+0x22e>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    11a0:	a2 e3       	ldi	r26, 0x32	; 50
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e2 e3       	ldi	r30, 0x32	; 50
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_voidSetPinValue+0x1fa>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_voidSetPinValue+0x1f6>
    11c2:	84 2b       	or	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	1a c0       	rjmp	.+52     	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    11c8:	a2 e3       	ldi	r26, 0x32	; 50
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e2 e3       	ldi	r30, 0x32	; 50
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_voidSetPinValue+0x222>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_voidSetPinValue+0x21e>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    default: local_u8ErrorState = STD_TYPES_NOK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <DIO_voidSetPinValue+0x238>
        
    }
    }
    else{
        local_u8ErrorState = STD_TYPES_NOK;
    11fa:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fe:	2e 96       	adiw	r28, 0x0e	; 14
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_PinID, u8  *Copy_pu8PinValue)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	28 97       	sbiw	r28, 0x08	; 8
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	6c 83       	std	Y+4, r22	; 0x04
    1228:	5e 83       	std	Y+6, r21	; 0x06
    122a:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ErrorState = STD_TYPES_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue;
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL))
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	08 f0       	brcs	.+2      	; 0x1238 <DIO_u8GetPinValue+0x28>
    1236:	9f c0       	rjmp	.+318    	; 0x1376 <DIO_u8GetPinValue+0x166>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	88 30       	cpi	r24, 0x08	; 8
    123c:	08 f0       	brcs	.+2      	; 0x1240 <DIO_u8GetPinValue+0x30>
    123e:	9b c0       	rjmp	.+310    	; 0x1376 <DIO_u8GetPinValue+0x166>
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	09 f4       	brne	.+2      	; 0x124a <DIO_u8GetPinValue+0x3a>
    1248:	96 c0       	rjmp	.+300    	; 0x1376 <DIO_u8GetPinValue+0x166>
    {
       switch (Copy_u8PortId)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	38 87       	std	Y+8, r19	; 0x08
    1252:	2f 83       	std	Y+7, r18	; 0x07
    1254:	4f 81       	ldd	r20, Y+7	; 0x07
    1256:	58 85       	ldd	r21, Y+8	; 0x08
    1258:	41 30       	cpi	r20, 0x01	; 1
    125a:	51 05       	cpc	r21, r1
    125c:	a9 f1       	breq	.+106    	; 0x12c8 <DIO_u8GetPinValue+0xb8>
    125e:	8f 81       	ldd	r24, Y+7	; 0x07
    1260:	98 85       	ldd	r25, Y+8	; 0x08
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	91 05       	cpc	r25, r1
    1266:	34 f4       	brge	.+12     	; 0x1274 <DIO_u8GetPinValue+0x64>
    1268:	2f 81       	ldd	r18, Y+7	; 0x07
    126a:	38 85       	ldd	r19, Y+8	; 0x08
    126c:	21 15       	cp	r18, r1
    126e:	31 05       	cpc	r19, r1
    1270:	71 f0       	breq	.+28     	; 0x128e <DIO_u8GetPinValue+0x7e>
    1272:	82 c0       	rjmp	.+260    	; 0x1378 <DIO_u8GetPinValue+0x168>
    1274:	4f 81       	ldd	r20, Y+7	; 0x07
    1276:	58 85       	ldd	r21, Y+8	; 0x08
    1278:	42 30       	cpi	r20, 0x02	; 2
    127a:	51 05       	cpc	r21, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_u8GetPinValue+0x70>
    127e:	41 c0       	rjmp	.+130    	; 0x1302 <DIO_u8GetPinValue+0xf2>
    1280:	8f 81       	ldd	r24, Y+7	; 0x07
    1282:	98 85       	ldd	r25, Y+8	; 0x08
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <DIO_u8GetPinValue+0x7c>
    128a:	58 c0       	rjmp	.+176    	; 0x133c <DIO_u8GetPinValue+0x12c>
    128c:	75 c0       	rjmp	.+234    	; 0x1378 <DIO_u8GetPinValue+0x168>
       {
       case DIO_u8_PORTA:
        Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_PinID);
    128e:	e9 e3       	ldi	r30, 0x39	; 57
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_u8GetPinValue+0x96>
    12a2:	55 95       	asr	r21
    12a4:	47 95       	ror	r20
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_u8GetPinValue+0x92>
    12aa:	ca 01       	movw	r24, r20
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 23       	and	r24, r24
    12b4:	21 f4       	brne	.+8      	; 0x12be <DIO_u8GetPinValue+0xae>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    12b6:	ed 81       	ldd	r30, Y+5	; 0x05
    12b8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ba:	10 82       	st	Z, r1
    12bc:	5d c0       	rjmp	.+186    	; 0x1378 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    12be:	ed 81       	ldd	r30, Y+5	; 0x05
    12c0:	fe 81       	ldd	r31, Y+6	; 0x06
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 83       	st	Z, r24
    12c6:	58 c0       	rjmp	.+176    	; 0x1378 <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTB:
        Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_PinID);
    12c8:	e6 e3       	ldi	r30, 0x36	; 54
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_u8GetPinValue+0xd0>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_u8GetPinValue+0xcc>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	88 23       	and	r24, r24
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <DIO_u8GetPinValue+0xe8>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    12f0:	ed 81       	ldd	r30, Y+5	; 0x05
    12f2:	fe 81       	ldd	r31, Y+6	; 0x06
    12f4:	10 82       	st	Z, r1
    12f6:	40 c0       	rjmp	.+128    	; 0x1378 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    12f8:	ed 81       	ldd	r30, Y+5	; 0x05
    12fa:	fe 81       	ldd	r31, Y+6	; 0x06
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 83       	st	Z, r24
    1300:	3b c0       	rjmp	.+118    	; 0x1378 <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTC:
        Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_PinID);
    1302:	e3 e3       	ldi	r30, 0x33	; 51
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a9 01       	movw	r20, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_u8GetPinValue+0x10a>
    1316:	55 95       	asr	r21
    1318:	47 95       	ror	r20
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_u8GetPinValue+0x106>
    131e:	ca 01       	movw	r24, r20
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	88 23       	and	r24, r24
    1328:	21 f4       	brne	.+8      	; 0x1332 <DIO_u8GetPinValue+0x122>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    132a:	ed 81       	ldd	r30, Y+5	; 0x05
    132c:	fe 81       	ldd	r31, Y+6	; 0x06
    132e:	10 82       	st	Z, r1
    1330:	23 c0       	rjmp	.+70     	; 0x1378 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    1332:	ed 81       	ldd	r30, Y+5	; 0x05
    1334:	fe 81       	ldd	r31, Y+6	; 0x06
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	80 83       	st	Z, r24
    133a:	1e c0       	rjmp	.+60     	; 0x1378 <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTD:
        Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_PinID);
    133c:	e0 e3       	ldi	r30, 0x30	; 48
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_u8GetPinValue+0x144>
    1350:	55 95       	asr	r21
    1352:	47 95       	ror	r20
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_u8GetPinValue+0x140>
    1358:	ca 01       	movw	r24, r20
    135a:	81 70       	andi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	88 23       	and	r24, r24
    1362:	21 f4       	brne	.+8      	; 0x136c <DIO_u8GetPinValue+0x15c>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    1364:	ed 81       	ldd	r30, Y+5	; 0x05
    1366:	fe 81       	ldd	r31, Y+6	; 0x06
    1368:	10 82       	st	Z, r1
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    136c:	ed 81       	ldd	r30, Y+5	; 0x05
    136e:	fe 81       	ldd	r31, Y+6	; 0x06
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 83       	st	Z, r24
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <DIO_u8GetPinValue+0x168>
       
       }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1376:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ErrorState;
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
} 
    137a:	28 96       	adiw	r28, 0x08	; 8
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortID, u8 Copy_u8PortDirection)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	2d 97       	sbiw	r28, 0x0d	; 13
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	21 f0       	breq	.+8      	; 0x13b6 <DIO_u8SetPortDirection+0x2a>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 23       	and	r24, r24
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <DIO_u8SetPortDirection+0x2a>
    13b4:	7f c0       	rjmp	.+254    	; 0x14b4 <DIO_u8SetPortDirection+0x128>
    {
        switch (Copy_u8PortID)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3d 87       	std	Y+13, r19	; 0x0d
    13be:	2c 87       	std	Y+12, r18	; 0x0c
    13c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 05       	cpc	r25, r1
    13c8:	71 f1       	breq	.+92     	; 0x1426 <DIO_u8SetPortDirection+0x9a>
    13ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    13cc:	3d 85       	ldd	r19, Y+13	; 0x0d
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	2c f4       	brge	.+10     	; 0x13de <DIO_u8SetPortDirection+0x52>
    13d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	69 f0       	breq	.+26     	; 0x13f6 <DIO_u8SetPortDirection+0x6a>
    13dc:	69 c0       	rjmp	.+210    	; 0x14b0 <DIO_u8SetPortDirection+0x124>
    13de:	2c 85       	ldd	r18, Y+12	; 0x0c
    13e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	b1 f1       	breq	.+108    	; 0x1454 <DIO_u8SetPortDirection+0xc8>
    13e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <DIO_u8SetPortDirection+0x68>
    13f2:	47 c0       	rjmp	.+142    	; 0x1482 <DIO_u8SetPortDirection+0xf6>
    13f4:	5d c0       	rjmp	.+186    	; 0x14b0 <DIO_u8SetPortDirection+0x124>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PortDirection)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3b 87       	std	Y+11, r19	; 0x0b
    13fe:	2a 87       	std	Y+10, r18	; 0x0a
    1400:	8a 85       	ldd	r24, Y+10	; 0x0a
    1402:	9b 85       	ldd	r25, Y+11	; 0x0b
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	59 f0       	breq	.+22     	; 0x141e <DIO_u8SetPortDirection+0x92>
    1408:	2a 85       	ldd	r18, Y+10	; 0x0a
    140a:	3b 85       	ldd	r19, Y+11	; 0x0b
    140c:	21 30       	cpi	r18, 0x01	; 1
    140e:	31 05       	cpc	r19, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <DIO_u8SetPortDirection+0x88>
    1412:	51 c0       	rjmp	.+162    	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRA_REG = 0xff;
    1414:	ea e3       	ldi	r30, 0x3A	; 58
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	80 83       	st	Z, r24
    141c:	4c c0       	rjmp	.+152    	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRA_REG = 0x00;
    141e:	ea e3       	ldi	r30, 0x3A	; 58
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	10 82       	st	Z, r1
    1424:	48 c0       	rjmp	.+144    	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTB:
            switch (Copy_u8PortDirection)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	39 87       	std	Y+9, r19	; 0x09
    142e:	28 87       	std	Y+8, r18	; 0x08
    1430:	88 85       	ldd	r24, Y+8	; 0x08
    1432:	99 85       	ldd	r25, Y+9	; 0x09
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	51 f0       	breq	.+20     	; 0x144c <DIO_u8SetPortDirection+0xc0>
    1438:	28 85       	ldd	r18, Y+8	; 0x08
    143a:	39 85       	ldd	r19, Y+9	; 0x09
    143c:	21 30       	cpi	r18, 0x01	; 1
    143e:	31 05       	cpc	r19, r1
    1440:	d1 f5       	brne	.+116    	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRB_REG = 0xff;
    1442:	e7 e3       	ldi	r30, 0x37	; 55
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	80 83       	st	Z, r24
    144a:	35 c0       	rjmp	.+106    	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRB_REG = 0x00;
    144c:	e7 e3       	ldi	r30, 0x37	; 55
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
    1452:	31 c0       	rjmp	.+98     	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTC:
            switch (Copy_u8PortDirection)
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3f 83       	std	Y+7, r19	; 0x07
    145c:	2e 83       	std	Y+6, r18	; 0x06
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	9f 81       	ldd	r25, Y+7	; 0x07
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	51 f0       	breq	.+20     	; 0x147a <DIO_u8SetPortDirection+0xee>
    1466:	2e 81       	ldd	r18, Y+6	; 0x06
    1468:	3f 81       	ldd	r19, Y+7	; 0x07
    146a:	21 30       	cpi	r18, 0x01	; 1
    146c:	31 05       	cpc	r19, r1
    146e:	19 f5       	brne	.+70     	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRC_REG = 0xff;
    1470:	e4 e3       	ldi	r30, 0x34	; 52
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	80 83       	st	Z, r24
    1478:	1e c0       	rjmp	.+60     	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRC_REG = 0x00;
    147a:	e4 e3       	ldi	r30, 0x34	; 52
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	10 82       	st	Z, r1
    1480:	1a c0       	rjmp	.+52     	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTD:
            switch (Copy_u8PortDirection)
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3d 83       	std	Y+5, r19	; 0x05
    148a:	2c 83       	std	Y+4, r18	; 0x04
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	51 f0       	breq	.+20     	; 0x14a8 <DIO_u8SetPortDirection+0x11c>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	21 30       	cpi	r18, 0x01	; 1
    149a:	31 05       	cpc	r19, r1
    149c:	61 f4       	brne	.+24     	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRD_REG = 0xff;
    149e:	e1 e3       	ldi	r30, 0x31	; 49
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	80 83       	st	Z, r24
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRD_REG = 0x00;
    14a8:	e1 e3       	ldi	r30, 0x31	; 49
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	10 82       	st	Z, r1
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
            default: Local_u8ErrorState =STD_TYPES_NOK;
    14b0:	19 82       	std	Y+1, r1	; 0x01
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <DIO_u8SetPortDirection+0x12a>
      
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    14b4:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b8:	2d 96       	adiw	r28, 0x0d	; 13
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue      (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_u8SetPortValue+0x6>
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_u8SetPortValue+0x8>
    14d2:	0f 92       	push	r0
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8a 83       	std	Y+2, r24	; 0x02
    14da:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortID)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3d 83       	std	Y+5, r19	; 0x05
    14e8:	2c 83       	std	Y+4, r18	; 0x04
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	d1 f0       	breq	.+52     	; 0x1528 <DIO_u8SetPortValue+0x5e>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <DIO_u8SetPortValue+0x3e>
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <DIO_u8SetPortValue+0x54>
    1506:	1f c0       	rjmp	.+62     	; 0x1546 <DIO_u8SetPortValue+0x7c>
    1508:	2c 81       	ldd	r18, Y+4	; 0x04
    150a:	3d 81       	ldd	r19, Y+5	; 0x05
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	81 f0       	breq	.+32     	; 0x1532 <DIO_u8SetPortValue+0x68>
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	81 f0       	breq	.+32     	; 0x153c <DIO_u8SetPortValue+0x72>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <DIO_u8SetPortValue+0x7c>
    {
    case DIO_u8_PORTA:
        DIO_u8_PORTA_REG =Copy_u8PortValue;
    151e:	eb e3       	ldi	r30, 0x3B	; 59
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	80 83       	st	Z, r24
    1526:	10 c0       	rjmp	.+32     	; 0x1548 <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTB:
        DIO_u8_PORTB_REG =Copy_u8PortValue;
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	80 83       	st	Z, r24
    1530:	0b c0       	rjmp	.+22     	; 0x1548 <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTC:
        DIO_u8_PORTC_REG =Copy_u8PortValue;
    1532:	e5 e3       	ldi	r30, 0x35	; 53
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	80 83       	st	Z, r24
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTD:
        DIO_u8_PORTD_REG =Copy_u8PortValue;
    153c:	e2 e3       	ldi	r30, 0x32	; 50
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	80 83       	st	Z, r24
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <DIO_u8SetPortValue+0x7e>
        break;
    
    default: Local_u8ErrorState =STD_TYPES_NOK;
    1546:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8ErrorState;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue      (u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <DIO_u8GetPortValue+0x6>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <DIO_u8GetPortValue+0x8>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <DIO_u8GetPortValue+0xa>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	8a 83       	std	Y+2, r24	; 0x02
    156a:	7c 83       	std	Y+4, r23	; 0x04
    156c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8ReturnedPortValue != NULL)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	e9 f1       	breq	.+122    	; 0x15f4 <DIO_u8GetPortValue+0x9a>
    {
        switch (Copy_u8PortId)
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	3e 83       	std	Y+6, r19	; 0x06
    1582:	2d 83       	std	Y+5, r18	; 0x05
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	e1 f0       	breq	.+56     	; 0x15c6 <DIO_u8GetPortValue+0x6c>
    158e:	2d 81       	ldd	r18, Y+5	; 0x05
    1590:	3e 81       	ldd	r19, Y+6	; 0x06
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	2c f4       	brge	.+10     	; 0x15a2 <DIO_u8GetPortValue+0x48>
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	61 f0       	breq	.+24     	; 0x15b8 <DIO_u8GetPortValue+0x5e>
    15a0:	27 c0       	rjmp	.+78     	; 0x15f0 <DIO_u8GetPortValue+0x96>
    15a2:	2d 81       	ldd	r18, Y+5	; 0x05
    15a4:	3e 81       	ldd	r19, Y+6	; 0x06
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	a1 f0       	breq	.+40     	; 0x15d4 <DIO_u8GetPortValue+0x7a>
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	91 05       	cpc	r25, r1
    15b4:	b1 f0       	breq	.+44     	; 0x15e2 <DIO_u8GetPortValue+0x88>
    15b6:	1c c0       	rjmp	.+56     	; 0x15f0 <DIO_u8GetPortValue+0x96>
        {
        case DIO_u8_PORTA:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINA_REG;
    15b8:	e9 e3       	ldi	r30, 0x39	; 57
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	eb 81       	ldd	r30, Y+3	; 0x03
    15c0:	fc 81       	ldd	r31, Y+4	; 0x04
    15c2:	80 83       	st	Z, r24
    15c4:	18 c0       	rjmp	.+48     	; 0x15f6 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTB:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINB_REG;
    15c6:	e6 e3       	ldi	r30, 0x36	; 54
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	eb 81       	ldd	r30, Y+3	; 0x03
    15ce:	fc 81       	ldd	r31, Y+4	; 0x04
    15d0:	80 83       	st	Z, r24
    15d2:	11 c0       	rjmp	.+34     	; 0x15f6 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTC:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINC_REG;
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	eb 81       	ldd	r30, Y+3	; 0x03
    15dc:	fc 81       	ldd	r31, Y+4	; 0x04
    15de:	80 83       	st	Z, r24
    15e0:	0a c0       	rjmp	.+20     	; 0x15f6 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTD:
           *Copy_pu8ReturnedPortValue =DIO_u8_PIND_REG;
    15e2:	e0 e3       	ldi	r30, 0x30	; 48
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ea:	fc 81       	ldd	r31, Y+4	; 0x04
    15ec:	80 83       	st	Z, r24
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <DIO_u8GetPortValue+0x9c>
            break;
        
        default: Local_u8ErrorState =STD_TYPES_NOK;
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <DIO_u8GetPortValue+0x9c>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    15f4:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f8:	26 96       	adiw	r28, 0x06	; 6
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <EXTI_EXTIEnable>:

/* global pointer to a  function */
static void (*EXTI_ApfExti[3]) (void) = {NULL,NULL,NULL};

u8 EXTI_EXTIEnable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	2b 97       	sbiw	r28, 0x0b	; 11
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	8a 83       	std	Y+2, r24	; 0x02
    1620:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3b 87       	std	Y+11, r19	; 0x0b
    162e:	2a 87       	std	Y+10, r18	; 0x0a
    1630:	8a 85       	ldd	r24, Y+10	; 0x0a
    1632:	9b 85       	ldd	r25, Y+11	; 0x0b
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <EXTI_EXTIEnable+0x32>
    163a:	85 c0       	rjmp	.+266    	; 0x1746 <EXTI_EXTIEnable+0x13c>
    163c:	2a 85       	ldd	r18, Y+10	; 0x0a
    163e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <EXTI_EXTIEnable+0x3e>
    1646:	f9 c0       	rjmp	.+498    	; 0x183a <EXTI_EXTIEnable+0x230>
    1648:	8a 85       	ldd	r24, Y+10	; 0x0a
    164a:	9b 85       	ldd	r25, Y+11	; 0x0b
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	09 f0       	breq	.+2      	; 0x1652 <EXTI_EXTIEnable+0x48>
    1650:	23 c1       	rjmp	.+582    	; 0x1898 <EXTI_EXTIEnable+0x28e>
    {
    case EXTI_u8_INT0:
       switch (Copy_u8EdgeIndex)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	39 87       	std	Y+9, r19	; 0x09
    165a:	28 87       	std	Y+8, r18	; 0x08
    165c:	88 85       	ldd	r24, Y+8	; 0x08
    165e:	99 85       	ldd	r25, Y+9	; 0x09
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	61 f1       	breq	.+88     	; 0x16be <EXTI_EXTIEnable+0xb4>
    1666:	28 85       	ldd	r18, Y+8	; 0x08
    1668:	39 85       	ldd	r19, Y+9	; 0x09
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	2c f4       	brge	.+10     	; 0x167a <EXTI_EXTIEnable+0x70>
    1670:	88 85       	ldd	r24, Y+8	; 0x08
    1672:	99 85       	ldd	r25, Y+9	; 0x09
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	69 f0       	breq	.+26     	; 0x1692 <EXTI_EXTIEnable+0x88>
    1678:	64 c0       	rjmp	.+200    	; 0x1742 <EXTI_EXTIEnable+0x138>
    167a:	28 85       	ldd	r18, Y+8	; 0x08
    167c:	39 85       	ldd	r19, Y+9	; 0x09
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	99 f1       	breq	.+102    	; 0x16ea <EXTI_EXTIEnable+0xe0>
    1684:	88 85       	ldd	r24, Y+8	; 0x08
    1686:	99 85       	ldd	r25, Y+9	; 0x09
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	91 05       	cpc	r25, r1
    168c:	09 f4       	brne	.+2      	; 0x1690 <EXTI_EXTIEnable+0x86>
    168e:	43 c0       	rjmp	.+134    	; 0x1716 <EXTI_EXTIEnable+0x10c>
    1690:	58 c0       	rjmp	.+176    	; 0x1742 <EXTI_EXTIEnable+0x138>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,1);
    1692:	a5 e5       	ldi	r26, 0x55	; 85
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e5       	ldi	r30, 0x55	; 85
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	82 60       	ori	r24, 0x02	; 2
    169e:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,0);
    16a0:	a5 e5       	ldi	r26, 0x55	; 85
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e5 e5       	ldi	r30, 0x55	; 85
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    16ae:	ab e5       	ldi	r26, 0x5B	; 91
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	eb e5       	ldi	r30, 0x5B	; 91
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 64       	ori	r24, 0x40	; 64
    16ba:	8c 93       	st	X, r24
    16bc:	ee c0       	rjmp	.+476    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,1);
    16be:	a5 e5       	ldi	r26, 0x55	; 85
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e5       	ldi	r30, 0x55	; 85
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	82 60       	ori	r24, 0x02	; 2
    16ca:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,0);
    16cc:	a5 e5       	ldi	r26, 0x55	; 85
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e5 e5       	ldi	r30, 0x55	; 85
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    16da:	ab e5       	ldi	r26, 0x5B	; 91
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e5       	ldi	r30, 0x5B	; 91
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 64       	ori	r24, 0x40	; 64
    16e6:	8c 93       	st	X, r24
    16e8:	d8 c0       	rjmp	.+432    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_ANY_LOGICAL_CHANGE:
        CLR_BIT(EXTI_U8_MCUCR,1);
    16ea:	a5 e5       	ldi	r26, 0x55	; 85
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e5       	ldi	r30, 0x55	; 85
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8d 7f       	andi	r24, 0xFD	; 253
    16f6:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,0);
    16f8:	a5 e5       	ldi	r26, 0x55	; 85
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e5       	ldi	r30, 0x55	; 85
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    1706:	ab e5       	ldi	r26, 0x5B	; 91
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	eb e5       	ldi	r30, 0x5B	; 91
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 64       	ori	r24, 0x40	; 64
    1712:	8c 93       	st	X, r24
    1714:	c2 c0       	rjmp	.+388    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_LOW_LEVEL:
        CLR_BIT(EXTI_U8_MCUCR,1);
    1716:	a5 e5       	ldi	r26, 0x55	; 85
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e5 e5       	ldi	r30, 0x55	; 85
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8d 7f       	andi	r24, 0xFD	; 253
    1722:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,0);
    1724:	a5 e5       	ldi	r26, 0x55	; 85
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e5 e5       	ldi	r30, 0x55	; 85
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8e 7f       	andi	r24, 0xFE	; 254
    1730:	8c 93       	st	X, r24
        /*enable EXTI0*/
        SET_BIT(EXTI_U8_GICR,6);
    1732:	ab e5       	ldi	r26, 0x5B	; 91
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	eb e5       	ldi	r30, 0x5B	; 91
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	8c 93       	st	X, r24
    1740:	ac c0       	rjmp	.+344    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    1742:	19 82       	std	Y+1, r1	; 0x01
    1744:	aa c0       	rjmp	.+340    	; 0x189a <EXTI_EXTIEnable+0x290>
       }
        break;

        case EXTI_u8_INT1:
       switch (Copy_u8EdgeIndex)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	3f 83       	std	Y+7, r19	; 0x07
    174e:	2e 83       	std	Y+6, r18	; 0x06
    1750:	8e 81       	ldd	r24, Y+6	; 0x06
    1752:	9f 81       	ldd	r25, Y+7	; 0x07
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	91 05       	cpc	r25, r1
    1758:	61 f1       	breq	.+88     	; 0x17b2 <EXTI_EXTIEnable+0x1a8>
    175a:	2e 81       	ldd	r18, Y+6	; 0x06
    175c:	3f 81       	ldd	r19, Y+7	; 0x07
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	2c f4       	brge	.+10     	; 0x176e <EXTI_EXTIEnable+0x164>
    1764:	8e 81       	ldd	r24, Y+6	; 0x06
    1766:	9f 81       	ldd	r25, Y+7	; 0x07
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f0       	breq	.+26     	; 0x1786 <EXTI_EXTIEnable+0x17c>
    176c:	64 c0       	rjmp	.+200    	; 0x1836 <EXTI_EXTIEnable+0x22c>
    176e:	2e 81       	ldd	r18, Y+6	; 0x06
    1770:	3f 81       	ldd	r19, Y+7	; 0x07
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	99 f1       	breq	.+102    	; 0x17de <EXTI_EXTIEnable+0x1d4>
    1778:	8e 81       	ldd	r24, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	83 30       	cpi	r24, 0x03	; 3
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <EXTI_EXTIEnable+0x17a>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <EXTI_EXTIEnable+0x200>
    1784:	58 c0       	rjmp	.+176    	; 0x1836 <EXTI_EXTIEnable+0x22c>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,3);
    1786:	a5 e5       	ldi	r26, 0x55	; 85
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e5 e5       	ldi	r30, 0x55	; 85
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 60       	ori	r24, 0x08	; 8
    1792:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,2);
    1794:	a5 e5       	ldi	r26, 0x55	; 85
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e5       	ldi	r30, 0x55	; 85
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	84 60       	ori	r24, 0x04	; 4
    17a0:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    17a2:	ab e5       	ldi	r26, 0x5B	; 91
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	eb e5       	ldi	r30, 0x5B	; 91
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	80 68       	ori	r24, 0x80	; 128
    17ae:	8c 93       	st	X, r24
    17b0:	74 c0       	rjmp	.+232    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,3);
    17b2:	a5 e5       	ldi	r26, 0x55	; 85
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e5       	ldi	r30, 0x55	; 85
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	88 60       	ori	r24, 0x08	; 8
    17be:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,2);
    17c0:	a5 e5       	ldi	r26, 0x55	; 85
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e5       	ldi	r30, 0x55	; 85
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8b 7f       	andi	r24, 0xFB	; 251
    17cc:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    17ce:	ab e5       	ldi	r26, 0x5B	; 91
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	eb e5       	ldi	r30, 0x5B	; 91
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 68       	ori	r24, 0x80	; 128
    17da:	8c 93       	st	X, r24
    17dc:	5e c0       	rjmp	.+188    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_ANY_LOGICAL_CHANGE:
        CLR_BIT(EXTI_U8_MCUCR,3);
    17de:	a5 e5       	ldi	r26, 0x55	; 85
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 e5       	ldi	r30, 0x55	; 85
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	87 7f       	andi	r24, 0xF7	; 247
    17ea:	8c 93       	st	X, r24
        SET_BIT(EXTI_U8_MCUCR,2);
    17ec:	a5 e5       	ldi	r26, 0x55	; 85
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e5       	ldi	r30, 0x55	; 85
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    17fa:	ab e5       	ldi	r26, 0x5B	; 91
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	eb e5       	ldi	r30, 0x5B	; 91
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	8c 93       	st	X, r24
    1808:	48 c0       	rjmp	.+144    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_LOW_LEVEL:
        CLR_BIT(EXTI_U8_MCUCR,3);
    180a:	a5 e5       	ldi	r26, 0x55	; 85
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e5       	ldi	r30, 0x55	; 85
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	87 7f       	andi	r24, 0xF7	; 247
    1816:	8c 93       	st	X, r24
        CLR_BIT(EXTI_U8_MCUCR,2);
    1818:	a5 e5       	ldi	r26, 0x55	; 85
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e5 e5       	ldi	r30, 0x55	; 85
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8b 7f       	andi	r24, 0xFB	; 251
    1824:	8c 93       	st	X, r24
        /*enable EXTI1*/
        SET_BIT(EXTI_U8_GICR,7);
    1826:	ab e5       	ldi	r26, 0x5B	; 91
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	eb e5       	ldi	r30, 0x5B	; 91
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 68       	ori	r24, 0x80	; 128
    1832:	8c 93       	st	X, r24
    1834:	32 c0       	rjmp	.+100    	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	30 c0       	rjmp	.+96     	; 0x189a <EXTI_EXTIEnable+0x290>
       }
        break;

        case EXTI_u8_INT2:
       switch (Copy_u8EdgeIndex)
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3d 83       	std	Y+5, r19	; 0x05
    1842:	2c 83       	std	Y+4, r18	; 0x04
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	31 f0       	breq	.+12     	; 0x1858 <EXTI_EXTIEnable+0x24e>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	21 30       	cpi	r18, 0x01	; 1
    1852:	31 05       	cpc	r19, r1
    1854:	81 f0       	breq	.+32     	; 0x1876 <EXTI_EXTIEnable+0x26c>
    1856:	1e c0       	rjmp	.+60     	; 0x1894 <EXTI_EXTIEnable+0x28a>
       {
       case EXTI_u8_RAISING_EDGE:
        SET_BIT(EXTI_U8_MCUCR,6);
    1858:	a5 e5       	ldi	r26, 0x55	; 85
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e5       	ldi	r30, 0x55	; 85
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 64       	ori	r24, 0x40	; 64
    1864:	8c 93       	st	X, r24
        /*enable EXTI2*/
        SET_BIT(EXTI_U8_GICR,5);
    1866:	ab e5       	ldi	r26, 0x5B	; 91
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	eb e5       	ldi	r30, 0x5B	; 91
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 62       	ori	r24, 0x20	; 32
    1872:	8c 93       	st	X, r24
    1874:	12 c0       	rjmp	.+36     	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        case EXTI_u8_FALLING_EDGE:
        CLR_BIT(EXTI_U8_MCUCR,6);
    1876:	a5 e5       	ldi	r26, 0x55	; 85
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e5       	ldi	r30, 0x55	; 85
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7b       	andi	r24, 0xBF	; 191
    1882:	8c 93       	st	X, r24
        /*enable EXTI2*/
        SET_BIT(EXTI_U8_GICR,5);
    1884:	ab e5       	ldi	r26, 0x5B	; 91
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e5       	ldi	r30, 0x5B	; 91
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 62       	ori	r24, 0x20	; 32
    1890:	8c 93       	st	X, r24
    1892:	03 c0       	rjmp	.+6      	; 0x189a <EXTI_EXTIEnable+0x290>
        break;

        default: Local_u8ErrorState =STD_TYPES_NOK;
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	01 c0       	rjmp	.+2      	; 0x189a <EXTI_EXTIEnable+0x290>
       }
        break;
        default: Local_u8ErrorState = STD_TYPES_NOK;
    1898:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    189a:	89 81       	ldd	r24, Y+1	; 0x01
}
    189c:	2b 96       	adiw	r28, 0x0b	; 11
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <EXTI_u8EXTIDisable>:

u8 EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <EXTI_u8EXTIDisable+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <EXTI_u8EXTIDisable+0x8>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_ErrorState = STD_TYPES_OK;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	3c 83       	std	Y+4, r19	; 0x04
    18c8:	2b 83       	std	Y+3, r18	; 0x03
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	91 05       	cpc	r25, r1
    18d2:	89 f0       	breq	.+34     	; 0x18f6 <EXTI_u8EXTIDisable+0x48>
    18d4:	2b 81       	ldd	r18, Y+3	; 0x03
    18d6:	3c 81       	ldd	r19, Y+4	; 0x04
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	a1 f0       	breq	.+40     	; 0x1906 <EXTI_u8EXTIDisable+0x58>
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	c1 f4       	brne	.+48     	; 0x1916 <EXTI_u8EXTIDisable+0x68>
    {
    case EXTI_u8_INT0:
        /* disable EXTI0 */
        CLR_BIT(EXTI_U8_GICR,6);
    18e6:	ab e5       	ldi	r26, 0x5B	; 91
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e5       	ldi	r30, 0x5B	; 91
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 7b       	andi	r24, 0xBF	; 191
    18f2:	8c 93       	st	X, r24
    18f4:	11 c0       	rjmp	.+34     	; 0x1918 <EXTI_u8EXTIDisable+0x6a>
        break;

        case EXTI_u8_INT1:
        /* disable EXTI1 */
        CLR_BIT(EXTI_U8_GICR,7);
    18f6:	ab e5       	ldi	r26, 0x5B	; 91
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e5       	ldi	r30, 0x5B	; 91
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	8f 77       	andi	r24, 0x7F	; 127
    1902:	8c 93       	st	X, r24
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <EXTI_u8EXTIDisable+0x6a>
        break;
    
    case EXTI_u8_INT2:
        /* disable EXTI2 */
        CLR_BIT(EXTI_U8_GICR,5);
    1906:	ab e5       	ldi	r26, 0x5B	; 91
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	eb e5       	ldi	r30, 0x5B	; 91
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8f 7d       	andi	r24, 0xDF	; 223
    1912:	8c 93       	st	X, r24
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <EXTI_u8EXTIDisable+0x6a>
        break;
    default: Local_ErrorState = STD_TYPES_NOK;
    1916:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_ErrorState;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <EXTI_u8EXTISetCallBack>:

u8 EXTI_u8EXTISetCallBack(u8 Copy_uEXTIIndex, void(*Copy_pf) (void))
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <EXTI_u8EXTISetCallBack+0x6>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <EXTI_u8EXTISetCallBack+0x8>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	8a 83       	std	Y+2, r24	; 0x02
    1936:	7c 83       	std	Y+4, r23	; 0x04
    1938:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_uEXTIIndex <= EXTI_u8_INT2) && (Copy_pf != NULL))
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	88 f4       	brcc	.+34     	; 0x1966 <EXTI_u8EXTISetCallBack+0x3e>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f0       	breq	.+26     	; 0x1966 <EXTI_u8EXTISetCallBack+0x3e>
    {
        EXTI_ApfExti[Copy_uEXTIIndex] = Copy_pf;
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	fc 01       	movw	r30, r24
    1958:	e0 53       	subi	r30, 0x30	; 48
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <EXTI_u8EXTISetCallBack+0x40>
    }
    else 
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1966:	19 82       	std	Y+1, r1	; 0x01
    }


    return Local_u8ErrorState;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <__vector_1>:

/* prototype for ISR of EXTI0 */
void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	2f 93       	push	r18
    1984:	3f 93       	push	r19
    1986:	4f 93       	push	r20
    1988:	5f 93       	push	r21
    198a:	6f 93       	push	r22
    198c:	7f 93       	push	r23
    198e:	8f 93       	push	r24
    1990:	9f 93       	push	r25
    1992:	af 93       	push	r26
    1994:	bf 93       	push	r27
    1996:	ef 93       	push	r30
    1998:	ff 93       	push	r31
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT0] != NULL){
    19a2:	80 91 d0 00 	lds	r24, 0x00D0
    19a6:	90 91 d1 00 	lds	r25, 0x00D1
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	29 f0       	breq	.+10     	; 0x19b8 <__vector_1+0x40>

        EXTI_ApfExti[EXTI_u8_INT0]();
    19ae:	e0 91 d0 00 	lds	r30, 0x00D0
    19b2:	f0 91 d1 00 	lds	r31, 0x00D1
    19b6:	09 95       	icall
    }
    
}
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	ff 91       	pop	r31
    19be:	ef 91       	pop	r30
    19c0:	bf 91       	pop	r27
    19c2:	af 91       	pop	r26
    19c4:	9f 91       	pop	r25
    19c6:	8f 91       	pop	r24
    19c8:	7f 91       	pop	r23
    19ca:	6f 91       	pop	r22
    19cc:	5f 91       	pop	r21
    19ce:	4f 91       	pop	r20
    19d0:	3f 91       	pop	r19
    19d2:	2f 91       	pop	r18
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	0f 90       	pop	r0
    19da:	1f 90       	pop	r1
    19dc:	18 95       	reti

000019de <__vector_2>:

/* prototype for ISR of EXTI1 */
void __vector_2(void)      __attribute__((signal));
void __vector_2(void)
{
    19de:	1f 92       	push	r1
    19e0:	0f 92       	push	r0
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	0f 92       	push	r0
    19e6:	11 24       	eor	r1, r1
    19e8:	2f 93       	push	r18
    19ea:	3f 93       	push	r19
    19ec:	4f 93       	push	r20
    19ee:	5f 93       	push	r21
    19f0:	6f 93       	push	r22
    19f2:	7f 93       	push	r23
    19f4:	8f 93       	push	r24
    19f6:	9f 93       	push	r25
    19f8:	af 93       	push	r26
    19fa:	bf 93       	push	r27
    19fc:	ef 93       	push	r30
    19fe:	ff 93       	push	r31
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT1] != NULL){
    1a08:	80 91 d2 00 	lds	r24, 0x00D2
    1a0c:	90 91 d3 00 	lds	r25, 0x00D3
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	29 f0       	breq	.+10     	; 0x1a1e <__vector_2+0x40>

        EXTI_ApfExti[EXTI_u8_INT1]();
    1a14:	e0 91 d2 00 	lds	r30, 0x00D2
    1a18:	f0 91 d3 00 	lds	r31, 0x00D3
    1a1c:	09 95       	icall
    }
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	ff 91       	pop	r31
    1a24:	ef 91       	pop	r30
    1a26:	bf 91       	pop	r27
    1a28:	af 91       	pop	r26
    1a2a:	9f 91       	pop	r25
    1a2c:	8f 91       	pop	r24
    1a2e:	7f 91       	pop	r23
    1a30:	6f 91       	pop	r22
    1a32:	5f 91       	pop	r21
    1a34:	4f 91       	pop	r20
    1a36:	3f 91       	pop	r19
    1a38:	2f 91       	pop	r18
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <__vector_3>:

/* prototype for ISR of EXTI2 */
void __vector_3(void)      __attribute__((signal));
void __vector_3(void)
{
    1a44:	1f 92       	push	r1
    1a46:	0f 92       	push	r0
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	0f 92       	push	r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	2f 93       	push	r18
    1a50:	3f 93       	push	r19
    1a52:	4f 93       	push	r20
    1a54:	5f 93       	push	r21
    1a56:	6f 93       	push	r22
    1a58:	7f 93       	push	r23
    1a5a:	8f 93       	push	r24
    1a5c:	9f 93       	push	r25
    1a5e:	af 93       	push	r26
    1a60:	bf 93       	push	r27
    1a62:	ef 93       	push	r30
    1a64:	ff 93       	push	r31
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_ApfExti[EXTI_u8_INT2] != NULL){
    1a6e:	80 91 d4 00 	lds	r24, 0x00D4
    1a72:	90 91 d5 00 	lds	r25, 0x00D5
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	29 f0       	breq	.+10     	; 0x1a84 <__vector_3+0x40>

        EXTI_ApfExti[EXTI_u8_INT2]();
    1a7a:	e0 91 d4 00 	lds	r30, 0x00D4
    1a7e:	f0 91 d5 00 	lds	r31, 0x00D5
    1a82:	09 95       	icall
    }
}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	ff 91       	pop	r31
    1a8a:	ef 91       	pop	r30
    1a8c:	bf 91       	pop	r27
    1a8e:	af 91       	pop	r26
    1a90:	9f 91       	pop	r25
    1a92:	8f 91       	pop	r24
    1a94:	7f 91       	pop	r23
    1a96:	6f 91       	pop	r22
    1a98:	5f 91       	pop	r21
    1a9a:	4f 91       	pop	r20
    1a9c:	3f 91       	pop	r19
    1a9e:	2f 91       	pop	r18
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <GI_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_Math.h"
#include "GI_interface.h"
#define SREG   *((volatile u8*)0x5f)

void GI_voidEnable(void){
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,7);
    1ab2:	af e5       	ldi	r26, 0x5F	; 95
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ef e5       	ldi	r30, 0x5F	; 95
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	8c 93       	st	X, r24
}
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <GI_voidDisable>:


void GI_voidDisable(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
    1ace:	af e5       	ldi	r26, 0x5F	; 95
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ef e5       	ldi	r30, 0x5F	; 95
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8f 77       	andi	r24, 0x7F	; 127
    1ada:	8c 93       	st	X, r24
}
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <KPD_u8GetKeyState>:
u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
u8 KPD_Au8ColsPins[4]={KPD_u8_c1_PIN,KPD_u8_c2_PIN,KPD_u8_c3_PIN,KPD_u8_c4_PIN};


u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	65 97       	sbiw	r28, 0x15	; 21
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	9d 8b       	std	Y+21, r25	; 0x15
    1af8:	8c 8b       	std	Y+20, r24	; 0x14

    u8 Local_u8ErrorState = STD_TYPES_OK;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
    1afe:	1f 86       	std	Y+15, r1	; 0x0f
if(Copy_pu8ReturnedKey != NULL)
    1b00:	8c 89       	ldd	r24, Y+20	; 0x14
    1b02:	9d 89       	ldd	r25, Y+21	; 0x15
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <KPD_u8GetKeyState+0x28>
    1b08:	f0 c0       	rjmp	.+480    	; 0x1cea <KPD_u8GetKeyState+0x208>
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1b0a:	ec 89       	ldd	r30, Y+20	; 0x14
    1b0c:	fd 89       	ldd	r31, Y+21	; 0x15
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1b12:	19 8a       	std	Y+17, r1	; 0x11
    1b14:	e5 c0       	rjmp	.+458    	; 0x1ce0 <KPD_u8GetKeyState+0x1fe>
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    1b16:	89 89       	ldd	r24, Y+17	; 0x11
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e8 53       	subi	r30, 0x38	; 56
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	90 81       	ld	r25, Z
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	69 2f       	mov	r22, r25
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    1b2e:	18 8a       	std	Y+16, r1	; 0x10
    1b30:	c1 c0       	rjmp	.+386    	; 0x1cb4 <KPD_u8GetKeyState+0x1d2>
        {
            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1b32:	88 89       	ldd	r24, Y+16	; 0x10
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	fc 01       	movw	r30, r24
    1b3a:	e4 53       	subi	r30, 0x34	; 52
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	90 81       	ld	r25, Z
    1b40:	9e 01       	movw	r18, r28
    1b42:	2d 5e       	subi	r18, 0xED	; 237
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	69 2f       	mov	r22, r25
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8GetPinValue>
            if(Local_u8PinValue == DIO_u8_LOW)
    1b50:	8b 89       	ldd	r24, Y+19	; 0x13
    1b52:	88 23       	and	r24, r24
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <KPD_u8GetKeyState+0x76>
    1b56:	ab c0       	rjmp	.+342    	; 0x1cae <KPD_u8GetKeyState+0x1cc>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b5e:	b1 e4       	ldi	r27, 0x41	; 65
    1b60:	8b 87       	std	Y+11, r24	; 0x0b
    1b62:	9c 87       	std	Y+12, r25	; 0x0c
    1b64:	ad 87       	std	Y+13, r26	; 0x0d
    1b66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	53 e4       	ldi	r21, 0x43	; 67
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8f 83       	std	Y+7, r24	; 0x07
    1b82:	98 87       	std	Y+8, r25	; 0x08
    1b84:	a9 87       	std	Y+9, r26	; 0x09
    1b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	3f c0       	rjmp	.+126    	; 0x1c28 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	4c f5       	brge	.+82     	; 0x1c14 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e2       	ldi	r20, 0x20	; 32
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <KPD_u8GetKeyState+0x128>
    1bec:	89 e1       	ldi	r24, 0x19	; 25
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <KPD_u8GetKeyState+0x116>
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	69 f7       	brne	.-38     	; 0x1bec <KPD_u8GetKeyState+0x10a>
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	6f 81       	ldd	r22, Y+7	; 0x07
    1c16:	78 85       	ldd	r23, Y+8	; 0x08
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <KPD_u8GetKeyState+0x152>
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
            {
                //debouncing//
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1c3c:	88 89       	ldd	r24, Y+16	; 0x10
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	fc 01       	movw	r30, r24
    1c44:	e4 53       	subi	r30, 0x34	; 52
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	90 81       	ld	r25, Z
    1c4a:	9e 01       	movw	r18, r28
    1c4c:	2d 5e       	subi	r18, 0xED	; 237
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	69 2f       	mov	r22, r25
    1c54:	a9 01       	movw	r20, r18
    1c56:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8GetPinValue>
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <KPD_u8GetKeyState+0x198>


                while (Local_u8PinValue == DIO_u8_LOW)
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1c5c:	88 89       	ldd	r24, Y+16	; 0x10
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	fc 01       	movw	r30, r24
    1c64:	e4 53       	subi	r30, 0x34	; 52
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	90 81       	ld	r25, Z
    1c6a:	9e 01       	movw	r18, r28
    1c6c:	2d 5e       	subi	r18, 0xED	; 237
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	69 2f       	mov	r22, r25
    1c74:	a9 01       	movw	r20, r18
    1c76:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8GetPinValue>
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);


                while (Local_u8PinValue == DIO_u8_LOW)
    1c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7c:	88 23       	and	r24, r24
    1c7e:	71 f3       	breq	.-36     	; 0x1c5c <KPD_u8GetKeyState+0x17a>
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);

                }
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1c80:	89 89       	ldd	r24, Y+17	; 0x11
    1c82:	48 2f       	mov	r20, r24
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	88 89       	ldd	r24, Y+16	; 0x10
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	ca 01       	movw	r24, r20
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	82 0f       	add	r24, r18
    1c98:	93 1f       	adc	r25, r19
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	e8 54       	subi	r30, 0x48	; 72
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	ec 89       	ldd	r30, Y+20	; 0x14
    1ca4:	fd 89       	ldd	r31, Y+21	; 0x15
    1ca6:	80 83       	st	Z, r24
                Local_u8Flag =1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	8f 87       	std	Y+15, r24	; 0x0f
    1cac:	07 c0       	rjmp	.+14     	; 0x1cbc <KPD_u8GetKeyState+0x1da>
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    1cae:	88 89       	ldd	r24, Y+16	; 0x10
    1cb0:	8f 5f       	subi	r24, 0xFF	; 255
    1cb2:	88 8b       	std	Y+16, r24	; 0x10
    1cb4:	88 89       	ldd	r24, Y+16	; 0x10
    1cb6:	84 30       	cpi	r24, 0x04	; 4
    1cb8:	08 f4       	brcc	.+2      	; 0x1cbc <KPD_u8GetKeyState+0x1da>
    1cba:	3b cf       	rjmp	.-394    	; 0x1b32 <KPD_u8GetKeyState+0x50>
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
                Local_u8Flag =1;
                break;
            }
        }
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    1cbc:	89 89       	ldd	r24, Y+17	; 0x11
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e8 53       	subi	r30, 0x38	; 56
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	90 81       	ld	r25, Z
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	69 2f       	mov	r22, r25
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
        if(Local_u8Flag == 1)
    1cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <KPD_u8GetKeyState+0x20a>
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
if(Copy_pu8ReturnedKey != NULL)
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1cda:	89 89       	ldd	r24, Y+17	; 0x11
    1cdc:	8f 5f       	subi	r24, 0xFF	; 255
    1cde:	89 8b       	std	Y+17, r24	; 0x11
    1ce0:	89 89       	ldd	r24, Y+17	; 0x11
    1ce2:	84 30       	cpi	r24, 0x04	; 4
    1ce4:	08 f4       	brcc	.+2      	; 0x1ce8 <KPD_u8GetKeyState+0x206>
    1ce6:	17 cf       	rjmp	.-466    	; 0x1b16 <KPD_u8GetKeyState+0x34>
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <KPD_u8GetKeyState+0x20a>

     }

}
else{
    Local_u8ErrorState = STD_TYPES_NOK;
    1cea:	1a 8a       	std	Y+18, r1	; 0x12
}

   return Local_u8ErrorState;
    1cec:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1cee:	65 96       	adiw	r28, 0x15	; 21
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <LCD_voideInit>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_voideInit(void)
{
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	cc 54       	subi	r28, 0x4C	; 76
    1d0e:	d0 40       	sbci	r29, 0x00	; 0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e7 5b       	subi	r30, 0xB7	; 183
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	ac e0       	ldi	r26, 0x0C	; 12
    1d26:	b2 e4       	ldi	r27, 0x42	; 66
    1d28:	80 83       	st	Z, r24
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	a2 83       	std	Z+2, r26	; 0x02
    1d2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	8e 01       	movw	r16, r28
    1d32:	0b 5b       	subi	r16, 0xBB	; 187
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e7 5b       	subi	r30, 0xB7	; 183
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a e7       	ldi	r20, 0x7A	; 122
    1d4a:	53 e4       	ldi	r21, 0x43	; 67
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	f8 01       	movw	r30, r16
    1d56:	80 83       	st	Z, r24
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	a2 83       	std	Z+2, r26	; 0x02
    1d5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d5e:	fe 01       	movw	r30, r28
    1d60:	eb 5b       	subi	r30, 0xBB	; 187
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	44 f4       	brge	.+16     	; 0x1d8c <LCD_voideInit+0x8c>
		__ticks = 1;
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 5b       	subi	r30, 0xBD	; 189
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
    1d8a:	64 c0       	rjmp	.+200    	; 0x1e54 <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	eb 5b       	subi	r30, 0xBB	; 187
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	0c f0       	brlt	.+2      	; 0x1dac <LCD_voideInit+0xac>
    1daa:	43 c0       	rjmp	.+134    	; 0x1e32 <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	fe 01       	movw	r30, r28
    1dae:	e7 5b       	subi	r30, 0xB7	; 183
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8e 01       	movw	r16, r28
    1dcc:	0d 5b       	subi	r16, 0xBD	; 189
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
    1de2:	1f c0       	rjmp	.+62     	; 0x1e22 <LCD_voideInit+0x122>
    1de4:	fe 01       	movw	r30, r28
    1de6:	ef 5b       	subi	r30, 0xBF	; 191
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	89 e1       	ldi	r24, 0x19	; 25
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
    1df2:	fe 01       	movw	r30, r28
    1df4:	ef 5b       	subi	r30, 0xBF	; 191
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_voideInit+0xfc>
    1e00:	fe 01       	movw	r30, r28
    1e02:	ef 5b       	subi	r30, 0xBF	; 191
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	de 01       	movw	r26, r28
    1e0c:	ad 5b       	subi	r26, 0xBD	; 189
    1e0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e10:	fe 01       	movw	r30, r28
    1e12:	ed 5b       	subi	r30, 0xBD	; 189
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 81       	ld	r24, Z
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	11 96       	adiw	r26, 0x01	; 1
    1e1e:	9c 93       	st	X, r25
    1e20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	fe 01       	movw	r30, r28
    1e24:	ed 5b       	subi	r30, 0xBD	; 189
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	d1 f6       	brne	.-76     	; 0x1de4 <LCD_voideInit+0xe4>
    1e30:	24 c0       	rjmp	.+72     	; 0x1e7a <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	8e 01       	movw	r16, r28
    1e34:	0d 5b       	subi	r16, 0xBD	; 189
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	eb 5b       	subi	r30, 0xBB	; 187
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	f8 01       	movw	r30, r16
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	80 83       	st	Z, r24
    1e54:	fe 01       	movw	r30, r28
    1e56:	ed 5b       	subi	r30, 0xBD	; 189
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ff 96       	adiw	r30, 0x3f	; 63
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	fe 01       	movw	r30, r28
    1e68:	ff 96       	adiw	r30, 0x3f	; 63
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_voideInit+0x16e>
    1e72:	fe 01       	movw	r30, r28
    1e74:	ff 96       	adiw	r30, 0x3f	; 63
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
    _delay_ms(35);
    LCD_voidSendCmnd(0b00111000);
    1e7a:	88 e3       	ldi	r24, 0x38	; 56
    1e7c:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e2       	ldi	r26, 0x20	; 32
    1e86:	b2 e4       	ldi	r27, 0x42	; 66
    1e88:	8b af       	std	Y+59, r24	; 0x3b
    1e8a:	9c af       	std	Y+60, r25	; 0x3c
    1e8c:	ad af       	std	Y+61, r26	; 0x3d
    1e8e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e90:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e92:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e98:	2b ea       	ldi	r18, 0xAB	; 171
    1e9a:	3a ea       	ldi	r19, 0xAA	; 170
    1e9c:	4a ea       	ldi	r20, 0xAA	; 170
    1e9e:	5e e3       	ldi	r21, 0x3E	; 62
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8f ab       	std	Y+55, r24	; 0x37
    1eaa:	98 af       	std	Y+56, r25	; 0x38
    1eac:	a9 af       	std	Y+57, r26	; 0x39
    1eae:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1eb0:	6f a9       	ldd	r22, Y+55	; 0x37
    1eb2:	78 ad       	ldd	r23, Y+56	; 0x38
    1eb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	1c f4       	brge	.+6      	; 0x1ece <LCD_voideInit+0x1ce>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	8e ab       	std	Y+54, r24	; 0x36
    1ecc:	91 c0       	rjmp	.+290    	; 0x1ff0 <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    1ece:	6f a9       	ldd	r22, Y+55	; 0x37
    1ed0:	78 ad       	ldd	r23, Y+56	; 0x38
    1ed2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ed4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	53 e4       	ldi	r21, 0x43	; 67
    1ede:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	0c f0       	brlt	.+2      	; 0x1ee8 <LCD_voideInit+0x1e8>
    1ee6:	7b c0       	rjmp	.+246    	; 0x1fde <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1ee8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1eea:	7c ad       	ldd	r23, Y+60	; 0x3c
    1eec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a e7       	ldi	r20, 0x7A	; 122
    1ef6:	54 e4       	ldi	r21, 0x44	; 68
    1ef8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8a ab       	std	Y+50, r24	; 0x32
    1f02:	9b ab       	std	Y+51, r25	; 0x33
    1f04:	ac ab       	std	Y+52, r26	; 0x34
    1f06:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	6a a9       	ldd	r22, Y+50	; 0x32
    1f0a:	7b a9       	ldd	r23, Y+51	; 0x33
    1f0c:	8c a9       	ldd	r24, Y+52	; 0x34
    1f0e:	9d a9       	ldd	r25, Y+53	; 0x35
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	53 e4       	ldi	r21, 0x43	; 67
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8e a7       	std	Y+46, r24	; 0x2e
    1f22:	9f a7       	std	Y+47, r25	; 0x2f
    1f24:	a8 ab       	std	Y+48, r26	; 0x30
    1f26:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1f28:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f2a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f2c:	88 a9       	ldd	r24, Y+48	; 0x30
    1f2e:	99 a9       	ldd	r25, Y+49	; 0x31
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <LCD_voideInit+0x24a>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9d a7       	std	Y+45, r25	; 0x2d
    1f46:	8c a7       	std	Y+44, r24	; 0x2c
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    1f4a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f4c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f4e:	88 a9       	ldd	r24, Y+48	; 0x30
    1f50:	99 a9       	ldd	r25, Y+49	; 0x31
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	6a a9       	ldd	r22, Y+50	; 0x32
    1f64:	7b a9       	ldd	r23, Y+51	; 0x33
    1f66:	8c a9       	ldd	r24, Y+52	; 0x34
    1f68:	9d a9       	ldd	r25, Y+53	; 0x35
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9d a7       	std	Y+45, r25	; 0x2d
    1f88:	8c a7       	std	Y+44, r24	; 0x2c
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_voideInit+0x2aa>
    1f8c:	89 e1       	ldi	r24, 0x19	; 25
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9b a7       	std	Y+43, r25	; 0x2b
    1f92:	8a a7       	std	Y+42, r24	; 0x2a
    1f94:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f96:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_voideInit+0x298>
    1f9c:	9b a7       	std	Y+43, r25	; 0x2b
    1f9e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fa2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9d a7       	std	Y+45, r25	; 0x2d
    1fa8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fac:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <LCD_voideInit+0x28c>
    1fb2:	24 c0       	rjmp	.+72     	; 0x1ffc <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fb6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fb8:	88 a9       	ldd	r24, Y+48	; 0x30
    1fba:	99 a9       	ldd	r25, Y+49	; 0x31
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9d a7       	std	Y+45, r25	; 0x2d
    1fc6:	8c a7       	std	Y+44, r24	; 0x2c
    1fc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fca:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fcc:	99 a7       	std	Y+41, r25	; 0x29
    1fce:	88 a7       	std	Y+40, r24	; 0x28
    1fd0:	88 a5       	ldd	r24, Y+40	; 0x28
    1fd2:	99 a5       	ldd	r25, Y+41	; 0x29
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_voideInit+0x2d4>
    1fd8:	99 a7       	std	Y+41, r25	; 0x29
    1fda:	88 a7       	std	Y+40, r24	; 0x28
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fde:	6f a9       	ldd	r22, Y+55	; 0x37
    1fe0:	78 ad       	ldd	r23, Y+56	; 0x38
    1fe2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fe4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8e ab       	std	Y+54, r24	; 0x36
    1ff0:	8e a9       	ldd	r24, Y+54	; 0x36
    1ff2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ff4:	8f a1       	ldd	r24, Y+39	; 0x27
    1ff6:	8a 95       	dec	r24
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_voideInit+0x2f6>
    1ffa:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_voidSendCmnd(0b00001111);
    1ffc:	8f e0       	ldi	r24, 0x0F	; 15
    1ffe:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e2       	ldi	r26, 0x20	; 32
    2008:	b2 e4       	ldi	r27, 0x42	; 66
    200a:	8b a3       	std	Y+35, r24	; 0x23
    200c:	9c a3       	std	Y+36, r25	; 0x24
    200e:	ad a3       	std	Y+37, r26	; 0x25
    2010:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2012:	6b a1       	ldd	r22, Y+35	; 0x23
    2014:	7c a1       	ldd	r23, Y+36	; 0x24
    2016:	8d a1       	ldd	r24, Y+37	; 0x25
    2018:	9e a1       	ldd	r25, Y+38	; 0x26
    201a:	2b ea       	ldi	r18, 0xAB	; 171
    201c:	3a ea       	ldi	r19, 0xAA	; 170
    201e:	4a ea       	ldi	r20, 0xAA	; 170
    2020:	5e e3       	ldi	r21, 0x3E	; 62
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	8f 8f       	std	Y+31, r24	; 0x1f
    202c:	98 a3       	std	Y+32, r25	; 0x20
    202e:	a9 a3       	std	Y+33, r26	; 0x21
    2030:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2032:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2034:	78 a1       	ldd	r23, Y+32	; 0x20
    2036:	89 a1       	ldd	r24, Y+33	; 0x21
    2038:	9a a1       	ldd	r25, Y+34	; 0x22
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	1c f4       	brge	.+6      	; 0x2050 <LCD_voideInit+0x350>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	8e 8f       	std	Y+30, r24	; 0x1e
    204e:	91 c0       	rjmp	.+290    	; 0x2172 <LCD_voideInit+0x472>
	else if (__tmp > 255)
    2050:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2052:	78 a1       	ldd	r23, Y+32	; 0x20
    2054:	89 a1       	ldd	r24, Y+33	; 0x21
    2056:	9a a1       	ldd	r25, Y+34	; 0x22
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	53 e4       	ldi	r21, 0x43	; 67
    2060:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <LCD_voideInit+0x36a>
    2068:	7b c0       	rjmp	.+246    	; 0x2160 <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    206a:	6b a1       	ldd	r22, Y+35	; 0x23
    206c:	7c a1       	ldd	r23, Y+36	; 0x24
    206e:	8d a1       	ldd	r24, Y+37	; 0x25
    2070:	9e a1       	ldd	r25, Y+38	; 0x26
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	54 e4       	ldi	r21, 0x44	; 68
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8a 8f       	std	Y+26, r24	; 0x1a
    2084:	9b 8f       	std	Y+27, r25	; 0x1b
    2086:	ac 8f       	std	Y+28, r26	; 0x1c
    2088:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    208c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    208e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2090:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a e7       	ldi	r20, 0x7A	; 122
    2098:	53 e4       	ldi	r21, 0x43	; 67
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	8e 8b       	std	Y+22, r24	; 0x16
    20a4:	9f 8b       	std	Y+23, r25	; 0x17
    20a6:	a8 8f       	std	Y+24, r26	; 0x18
    20a8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    20aa:	6e 89       	ldd	r22, Y+22	; 0x16
    20ac:	7f 89       	ldd	r23, Y+23	; 0x17
    20ae:	88 8d       	ldd	r24, Y+24	; 0x18
    20b0:	99 8d       	ldd	r25, Y+25	; 0x19
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <LCD_voideInit+0x3cc>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9d 8b       	std	Y+21, r25	; 0x15
    20c8:	8c 8b       	std	Y+20, r24	; 0x14
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    20cc:	6e 89       	ldd	r22, Y+22	; 0x16
    20ce:	7f 89       	ldd	r23, Y+23	; 0x17
    20d0:	88 8d       	ldd	r24, Y+24	; 0x18
    20d2:	99 8d       	ldd	r25, Y+25	; 0x19
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20e6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9d 8b       	std	Y+21, r25	; 0x15
    210a:	8c 8b       	std	Y+20, r24	; 0x14
    210c:	0f c0       	rjmp	.+30     	; 0x212c <LCD_voideInit+0x42c>
    210e:	89 e1       	ldi	r24, 0x19	; 25
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9b 8b       	std	Y+19, r25	; 0x13
    2114:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2116:	8a 89       	ldd	r24, Y+18	; 0x12
    2118:	9b 89       	ldd	r25, Y+19	; 0x13
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <LCD_voideInit+0x41a>
    211e:	9b 8b       	std	Y+19, r25	; 0x13
    2120:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8c 89       	ldd	r24, Y+20	; 0x14
    2124:	9d 89       	ldd	r25, Y+21	; 0x15
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9d 8b       	std	Y+21, r25	; 0x15
    212a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8c 89       	ldd	r24, Y+20	; 0x14
    212e:	9d 89       	ldd	r25, Y+21	; 0x15
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <LCD_voideInit+0x40e>
    2134:	24 c0       	rjmp	.+72     	; 0x217e <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	6e 89       	ldd	r22, Y+22	; 0x16
    2138:	7f 89       	ldd	r23, Y+23	; 0x17
    213a:	88 8d       	ldd	r24, Y+24	; 0x18
    213c:	99 8d       	ldd	r25, Y+25	; 0x19
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9d 8b       	std	Y+21, r25	; 0x15
    2148:	8c 8b       	std	Y+20, r24	; 0x14
    214a:	8c 89       	ldd	r24, Y+20	; 0x14
    214c:	9d 89       	ldd	r25, Y+21	; 0x15
    214e:	99 8b       	std	Y+17, r25	; 0x11
    2150:	88 8b       	std	Y+16, r24	; 0x10
    2152:	88 89       	ldd	r24, Y+16	; 0x10
    2154:	99 89       	ldd	r25, Y+17	; 0x11
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <LCD_voideInit+0x456>
    215a:	99 8b       	std	Y+17, r25	; 0x11
    215c:	88 8b       	std	Y+16, r24	; 0x10
    215e:	0f c0       	rjmp	.+30     	; 0x217e <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2160:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2162:	78 a1       	ldd	r23, Y+32	; 0x20
    2164:	89 a1       	ldd	r24, Y+33	; 0x21
    2166:	9a a1       	ldd	r25, Y+34	; 0x22
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8e 8f       	std	Y+30, r24	; 0x1e
    2172:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2174:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	8a 95       	dec	r24
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_voideInit+0x478>
    217c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_voidSendCmnd(0x01);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 ea       	ldi	r26, 0xA0	; 160
    218a:	b0 e4       	ldi	r27, 0x40	; 64
    218c:	8b 87       	std	Y+11, r24	; 0x0b
    218e:	9c 87       	std	Y+12, r25	; 0x0c
    2190:	ad 87       	std	Y+13, r26	; 0x0d
    2192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a e7       	ldi	r20, 0x7A	; 122
    21a2:	53 e4       	ldi	r21, 0x43	; 67
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8f 83       	std	Y+7, r24	; 0x07
    21ae:	98 87       	std	Y+8, r25	; 0x08
    21b0:	a9 87       	std	Y+9, r26	; 0x09
    21b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <LCD_voideInit+0x4d6>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <LCD_voideInit+0x536>
    2218:	89 e1       	ldi	r24, 0x19	; 25
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9c 83       	std	Y+4, r25	; 0x04
    221e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_voideInit+0x524>
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <LCD_voideInit+0x518>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_voideInit+0x560>
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidSendCmnd(0b00000110);
    2268:	86 e0       	ldi	r24, 0x06	; 6
    226a:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>

}
    226e:	c4 5b       	subi	r28, 0xB4	; 180
    2270:	df 4f       	sbci	r29, 0xFF	; 255
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	08 95       	ret

00002286 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	69 97       	sbiw	r28, 0x19	; 25
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
    /* Rs = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	61 e0       	ldi	r22, 0x01	; 1
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD,Copy_u8Cmnd);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	62 e0       	ldi	r22, 0x02	; 2
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e8       	ldi	r26, 0x80	; 128
    22c8:	bf e3       	ldi	r27, 0x3F	; 63
    22ca:	8d 8b       	std	Y+21, r24	; 0x15
    22cc:	9e 8b       	std	Y+22, r25	; 0x16
    22ce:	af 8b       	std	Y+23, r26	; 0x17
    22d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	2b ea       	ldi	r18, 0xAB	; 171
    22dc:	3a ea       	ldi	r19, 0xAA	; 170
    22de:	4a ea       	ldi	r20, 0xAA	; 170
    22e0:	5e e3       	ldi	r21, 0x3E	; 62
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	89 8b       	std	Y+17, r24	; 0x11
    22ec:	9a 8b       	std	Y+18, r25	; 0x12
    22ee:	ab 8b       	std	Y+19, r26	; 0x13
    22f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22f2:	69 89       	ldd	r22, Y+17	; 0x11
    22f4:	7a 89       	ldd	r23, Y+18	; 0x12
    22f6:	8b 89       	ldd	r24, Y+19	; 0x13
    22f8:	9c 89       	ldd	r25, Y+20	; 0x14
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	1c f4       	brge	.+6      	; 0x2310 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	88 8b       	std	Y+16, r24	; 0x10
    230e:	91 c0       	rjmp	.+290    	; 0x2432 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2310:	69 89       	ldd	r22, Y+17	; 0x11
    2312:	7a 89       	ldd	r23, Y+18	; 0x12
    2314:	8b 89       	ldd	r24, Y+19	; 0x13
    2316:	9c 89       	ldd	r25, Y+20	; 0x14
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	53 e4       	ldi	r21, 0x43	; 67
    2320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2324:	18 16       	cp	r1, r24
    2326:	0c f0       	brlt	.+2      	; 0x232a <LCD_voidSendCmnd+0xa4>
    2328:	7b c0       	rjmp	.+246    	; 0x2420 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a e7       	ldi	r20, 0x7A	; 122
    2338:	54 e4       	ldi	r21, 0x44	; 68
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	8c 87       	std	Y+12, r24	; 0x0c
    2344:	9d 87       	std	Y+13, r25	; 0x0d
    2346:	ae 87       	std	Y+14, r26	; 0x0e
    2348:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234a:	6c 85       	ldd	r22, Y+12	; 0x0c
    234c:	7d 85       	ldd	r23, Y+13	; 0x0d
    234e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2350:	9f 85       	ldd	r25, Y+15	; 0x0f
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a e7       	ldi	r20, 0x7A	; 122
    2358:	53 e4       	ldi	r21, 0x43	; 67
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	88 87       	std	Y+8, r24	; 0x08
    2364:	99 87       	std	Y+9, r25	; 0x09
    2366:	aa 87       	std	Y+10, r26	; 0x0a
    2368:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    236a:	68 85       	ldd	r22, Y+8	; 0x08
    236c:	79 85       	ldd	r23, Y+9	; 0x09
    236e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2370:	9b 85       	ldd	r25, Y+11	; 0x0b
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	2c f4       	brge	.+10     	; 0x238c <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9f 83       	std	Y+7, r25	; 0x07
    2388:	8e 83       	std	Y+6, r24	; 0x06
    238a:	3f c0       	rjmp	.+126    	; 0x240a <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    238c:	68 85       	ldd	r22, Y+8	; 0x08
    238e:	79 85       	ldd	r23, Y+9	; 0x09
    2390:	8a 85       	ldd	r24, Y+10	; 0x0a
    2392:	9b 85       	ldd	r25, Y+11	; 0x0b
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	3f ef       	ldi	r19, 0xFF	; 255
    2398:	4f e7       	ldi	r20, 0x7F	; 127
    239a:	57 e4       	ldi	r21, 0x47	; 71
    239c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a0:	18 16       	cp	r1, r24
    23a2:	4c f5       	brge	.+82     	; 0x23f6 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    23a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    23a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e2       	ldi	r20, 0x20	; 32
    23b2:	51 e4       	ldi	r21, 0x41	; 65
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9f 83       	std	Y+7, r25	; 0x07
    23ca:	8e 83       	std	Y+6, r24	; 0x06
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <LCD_voidSendCmnd+0x166>
    23ce:	89 e1       	ldi	r24, 0x19	; 25
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9d 83       	std	Y+5, r25	; 0x05
    23d4:	8c 83       	std	Y+4, r24	; 0x04
    23d6:	8c 81       	ldd	r24, Y+4	; 0x04
    23d8:	9d 81       	ldd	r25, Y+5	; 0x05
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_voidSendCmnd+0x154>
    23de:	9d 83       	std	Y+5, r25	; 0x05
    23e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e2:	8e 81       	ldd	r24, Y+6	; 0x06
    23e4:	9f 81       	ldd	r25, Y+7	; 0x07
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	9f 83       	std	Y+7, r25	; 0x07
    23ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ec:	8e 81       	ldd	r24, Y+6	; 0x06
    23ee:	9f 81       	ldd	r25, Y+7	; 0x07
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	69 f7       	brne	.-38     	; 0x23ce <LCD_voidSendCmnd+0x148>
    23f4:	24 c0       	rjmp	.+72     	; 0x243e <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f6:	68 85       	ldd	r22, Y+8	; 0x08
    23f8:	79 85       	ldd	r23, Y+9	; 0x09
    23fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    23fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9f 83       	std	Y+7, r25	; 0x07
    2408:	8e 83       	std	Y+6, r24	; 0x06
    240a:	8e 81       	ldd	r24, Y+6	; 0x06
    240c:	9f 81       	ldd	r25, Y+7	; 0x07
    240e:	9b 83       	std	Y+3, r25	; 0x03
    2410:	8a 83       	std	Y+2, r24	; 0x02
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	9b 81       	ldd	r25, Y+3	; 0x03
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_voidSendCmnd+0x190>
    241a:	9b 83       	std	Y+3, r25	; 0x03
    241c:	8a 83       	std	Y+2, r24	; 0x02
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2420:	69 89       	ldd	r22, Y+17	; 0x11
    2422:	7a 89       	ldd	r23, Y+18	; 0x12
    2424:	8b 89       	ldd	r24, Y+19	; 0x13
    2426:	9c 89       	ldd	r25, Y+20	; 0x14
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	88 8b       	std	Y+16, r24	; 0x10
    2432:	88 89       	ldd	r24, Y+16	; 0x10
    2434:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	8a 95       	dec	r24
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_voidSendCmnd+0x1b2>
    243c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
        _delay_us(1);


#endif
}
    2448:	69 96       	adiw	r28, 0x19	; 25
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	69 97       	sbiw	r28, 0x19	; 25
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_BIT
     /* Rs = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD,Copy_u8Char);
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	69 8d       	ldd	r22, Y+25	; 0x19
    2488:	0e 94 65 0a 	call	0x14ca	; 0x14ca <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	8d 8b       	std	Y+21, r24	; 0x15
    24a0:	9e 8b       	std	Y+22, r25	; 0x16
    24a2:	af 8b       	std	Y+23, r26	; 0x17
    24a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24a6:	6d 89       	ldd	r22, Y+21	; 0x15
    24a8:	7e 89       	ldd	r23, Y+22	; 0x16
    24aa:	8f 89       	ldd	r24, Y+23	; 0x17
    24ac:	98 8d       	ldd	r25, Y+24	; 0x18
    24ae:	2b ea       	ldi	r18, 0xAB	; 171
    24b0:	3a ea       	ldi	r19, 0xAA	; 170
    24b2:	4a ea       	ldi	r20, 0xAA	; 170
    24b4:	5e e3       	ldi	r21, 0x3E	; 62
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	89 8b       	std	Y+17, r24	; 0x11
    24c0:	9a 8b       	std	Y+18, r25	; 0x12
    24c2:	ab 8b       	std	Y+19, r26	; 0x13
    24c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24c6:	69 89       	ldd	r22, Y+17	; 0x11
    24c8:	7a 89       	ldd	r23, Y+18	; 0x12
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	1c f4       	brge	.+6      	; 0x24e4 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	88 8b       	std	Y+16, r24	; 0x10
    24e2:	91 c0       	rjmp	.+290    	; 0x2606 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    24e4:	69 89       	ldd	r22, Y+17	; 0x11
    24e6:	7a 89       	ldd	r23, Y+18	; 0x12
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	53 e4       	ldi	r21, 0x43	; 67
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	0c f0       	brlt	.+2      	; 0x24fe <LCD_voidSendChar+0xa4>
    24fc:	7b c0       	rjmp	.+246    	; 0x25f4 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    24fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2500:	7e 89       	ldd	r23, Y+22	; 0x16
    2502:	8f 89       	ldd	r24, Y+23	; 0x17
    2504:	98 8d       	ldd	r25, Y+24	; 0x18
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a e7       	ldi	r20, 0x7A	; 122
    250c:	54 e4       	ldi	r21, 0x44	; 68
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	8c 87       	std	Y+12, r24	; 0x0c
    2518:	9d 87       	std	Y+13, r25	; 0x0d
    251a:	ae 87       	std	Y+14, r26	; 0x0e
    251c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2520:	7d 85       	ldd	r23, Y+13	; 0x0d
    2522:	8e 85       	ldd	r24, Y+14	; 0x0e
    2524:	9f 85       	ldd	r25, Y+15	; 0x0f
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a e7       	ldi	r20, 0x7A	; 122
    252c:	53 e4       	ldi	r21, 0x43	; 67
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	88 87       	std	Y+8, r24	; 0x08
    2538:	99 87       	std	Y+9, r25	; 0x09
    253a:	aa 87       	std	Y+10, r26	; 0x0a
    253c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    253e:	68 85       	ldd	r22, Y+8	; 0x08
    2540:	79 85       	ldd	r23, Y+9	; 0x09
    2542:	8a 85       	ldd	r24, Y+10	; 0x0a
    2544:	9b 85       	ldd	r25, Y+11	; 0x0b
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9f 83       	std	Y+7, r25	; 0x07
    255c:	8e 83       	std	Y+6, r24	; 0x06
    255e:	3f c0       	rjmp	.+126    	; 0x25de <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2560:	68 85       	ldd	r22, Y+8	; 0x08
    2562:	79 85       	ldd	r23, Y+9	; 0x09
    2564:	8a 85       	ldd	r24, Y+10	; 0x0a
    2566:	9b 85       	ldd	r25, Y+11	; 0x0b
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6c 85       	ldd	r22, Y+12	; 0x0c
    257a:	7d 85       	ldd	r23, Y+13	; 0x0d
    257c:	8e 85       	ldd	r24, Y+14	; 0x0e
    257e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9f 83       	std	Y+7, r25	; 0x07
    259e:	8e 83       	std	Y+6, r24	; 0x06
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <LCD_voidSendChar+0x166>
    25a2:	89 e1       	ldi	r24, 0x19	; 25
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9d 83       	std	Y+5, r25	; 0x05
    25a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	9d 81       	ldd	r25, Y+5	; 0x05
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <LCD_voidSendChar+0x154>
    25b2:	9d 83       	std	Y+5, r25	; 0x05
    25b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8e 81       	ldd	r24, Y+6	; 0x06
    25b8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9f 83       	std	Y+7, r25	; 0x07
    25be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8e 81       	ldd	r24, Y+6	; 0x06
    25c2:	9f 81       	ldd	r25, Y+7	; 0x07
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <LCD_voidSendChar+0x148>
    25c8:	24 c0       	rjmp	.+72     	; 0x2612 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	68 85       	ldd	r22, Y+8	; 0x08
    25cc:	79 85       	ldd	r23, Y+9	; 0x09
    25ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9f 83       	std	Y+7, r25	; 0x07
    25dc:	8e 83       	std	Y+6, r24	; 0x06
    25de:	8e 81       	ldd	r24, Y+6	; 0x06
    25e0:	9f 81       	ldd	r25, Y+7	; 0x07
    25e2:	9b 83       	std	Y+3, r25	; 0x03
    25e4:	8a 83       	std	Y+2, r24	; 0x02
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <LCD_voidSendChar+0x190>
    25ee:	9b 83       	std	Y+3, r25	; 0x03
    25f0:	8a 83       	std	Y+2, r24	; 0x02
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25f4:	69 89       	ldd	r22, Y+17	; 0x11
    25f6:	7a 89       	ldd	r23, Y+18	; 0x12
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	88 8b       	std	Y+16, r24	; 0x10
    2606:	88 89       	ldd	r24, Y+16	; 0x10
    2608:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	8a 95       	dec	r24
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_voidSendChar+0x1b2>
    2610:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	62 e0       	ldi	r22, 0x02	; 2
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
      DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);


#endif

}
    261c:	69 96       	adiw	r28, 0x19	; 25
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <LCD_PrintString>:


void LCD_PrintString(const char *str)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <LCD_PrintString+0x6>
    2634:	0f 92       	push	r0
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	9b 83       	std	Y+3, r25	; 0x03
    263c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    263e:	19 82       	std	Y+1, r1	; 0x01
    2640:	0e c0       	rjmp	.+28     	; 0x265e <LCD_PrintString+0x30>
	while (str[i] != '\0')
	{
		LCD_voidSendChar(str[i]);
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_voidSendChar>
		i++;
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	8f 5f       	subi	r24, 0xFF	; 255
    265c:	89 83       	std	Y+1, r24	; 0x01


void LCD_PrintString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	fc 01       	movw	r30, r24
    266a:	e2 0f       	add	r30, r18
    266c:	f3 1f       	adc	r31, r19
    266e:	80 81       	ld	r24, Z
    2670:	88 23       	and	r24, r24
    2672:	39 f7       	brne	.-50     	; 0x2642 <LCD_PrintString+0x14>
        default :  local_u8Errorstate=STD_TYPES_OK;
    }
}
else { local_u8Errorstate=STD_TYPES_OK;}
return local_u8Errorstate;}
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <LCD_u8GoToXY.1387>:
	_delay_ms(2);
}


u8 LCD_u8GoToXY(u8 COPY_u8LineNum,u8 Copy_u8location)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	00 d0       	rcall	.+0      	; 0x2686 <LCD_u8GoToXY.1387+0x6>
    2686:	00 d0       	rcall	.+0      	; 0x2688 <LCD_u8GoToXY.1387+0x8>
    2688:	0f 92       	push	r0
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	8a 83       	std	Y+2, r24	; 0x02
    2690:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Errorstate=STD_TYPES_OK;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	89 83       	std	Y+1, r24	; 0x01
    if(COPY_u8LineNum <=39){
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	88 32       	cpi	r24, 0x28	; 40
    269a:	e8 f4       	brcc	.+58     	; 0x26d6 <LCD_u8GoToXY.1387+0x56>
    switch(COPY_u8LineNum)
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	3d 83       	std	Y+5, r19	; 0x05
    26a4:	2c 83       	std	Y+4, r18	; 0x04
    26a6:	8c 81       	ldd	r24, Y+4	; 0x04
    26a8:	9d 81       	ldd	r25, Y+5	; 0x05
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	91 05       	cpc	r25, r1
    26ae:	31 f0       	breq	.+12     	; 0x26bc <LCD_u8GoToXY.1387+0x3c>
    26b0:	2c 81       	ldd	r18, Y+4	; 0x04
    26b2:	3d 81       	ldd	r19, Y+5	; 0x05
    26b4:	22 30       	cpi	r18, 0x02	; 2
    26b6:	31 05       	cpc	r19, r1
    26b8:	31 f0       	breq	.+12     	; 0x26c6 <LCD_u8GoToXY.1387+0x46>
    26ba:	0a c0       	rjmp	.+20     	; 0x26d0 <LCD_u8GoToXY.1387+0x50>
    {
        case LCD_u8_LINE1: LCD_voidSendCmnd(0x80+Copy_u8location);  break;
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	80 58       	subi	r24, 0x80	; 128
    26c0:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
    26c4:	0a c0       	rjmp	.+20     	; 0x26da <LCD_u8GoToXY.1387+0x5a>
        case LCD_u8_LINE2: LCD_voidSendCmnd(0xC0+Copy_u8location);  break;
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	80 54       	subi	r24, 0x40	; 64
    26ca:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
    26ce:	05 c0       	rjmp	.+10     	; 0x26da <LCD_u8GoToXY.1387+0x5a>
        default :  local_u8Errorstate=STD_TYPES_OK;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <LCD_u8GoToXY.1387+0x5a>
    }
}
else { local_u8Errorstate=STD_TYPES_OK;}
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	89 83       	std	Y+1, r24	; 0x01
return local_u8Errorstate;}
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <LCD_voidClr.1383>:
		LCD_voidSendChar(str[i]);
		i++;
	}


void LCD_voidClr(){
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	2e 97       	sbiw	r28, 0x0e	; 14
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0x01);
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 e0       	ldi	r26, 0x00	; 0
    270c:	b0 e4       	ldi	r27, 0x40	; 64
    270e:	8b 87       	std	Y+11, r24	; 0x0b
    2710:	9c 87       	std	Y+12, r25	; 0x0c
    2712:	ad 87       	std	Y+13, r26	; 0x0d
    2714:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2716:	6b 85       	ldd	r22, Y+11	; 0x0b
    2718:	7c 85       	ldd	r23, Y+12	; 0x0c
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	4a e7       	ldi	r20, 0x7A	; 122
    2724:	53 e4       	ldi	r21, 0x43	; 67
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	8f 83       	std	Y+7, r24	; 0x07
    2730:	98 87       	std	Y+8, r25	; 0x08
    2732:	a9 87       	std	Y+9, r26	; 0x09
    2734:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	2c f4       	brge	.+10     	; 0x2758 <LCD_voidClr.1383+0x6c>
		__ticks = 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	3f c0       	rjmp	.+126    	; 0x27d6 <LCD_voidClr.1383+0xea>
	else if (__tmp > 65535)
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	3f ef       	ldi	r19, 0xFF	; 255
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	57 e4       	ldi	r21, 0x47	; 71
    2768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	4c f5       	brge	.+82     	; 0x27c2 <LCD_voidClr.1383+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2770:	6b 85       	ldd	r22, Y+11	; 0x0b
    2772:	7c 85       	ldd	r23, Y+12	; 0x0c
    2774:	8d 85       	ldd	r24, Y+13	; 0x0d
    2776:	9e 85       	ldd	r25, Y+14	; 0x0e
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <LCD_voidClr.1383+0xcc>
    279a:	89 e1       	ldi	r24, 0x19	; 25
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_voidClr.1383+0xba>
    27aa:	9c 83       	std	Y+4, r25	; 0x04
    27ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	69 f7       	brne	.-38     	; 0x279a <LCD_voidClr.1383+0xae>
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <LCD_voidClr.1383+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_voidClr.1383+0xf6>
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    27ea:	2e 96       	adiw	r28, 0x0e	; 14
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <STEPPER_MOTOR_move>:
//	DIO_voidSetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
//
//}

u8 STEPPER_MOTOR_move(u8 copy_u8direction,u8 copy_u8angle)
{
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	c9 57       	subi	r28, 0x79	; 121
    280a:	d0 40       	sbci	r29, 0x00	; 0
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	fe 01       	movw	r30, r28
    2818:	e8 58       	subi	r30, 0x88	; 136
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 83       	st	Z, r24
    281e:	fe 01       	movw	r30, r28
    2820:	e7 58       	subi	r30, 0x87	; 135
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	60 83       	st	Z, r22
    u8 LocalErrorState = STD_TYPES_OK;
    2826:	fe 01       	movw	r30, r28
    2828:	e9 58       	subi	r30, 0x89	; 137
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	80 83       	st	Z, r24
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    2830:	fe 01       	movw	r30, r28
    2832:	e7 58       	subi	r30, 0x87	; 135
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e0       	ldi	r26, 0x00	; 0
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	07 2e       	mov	r0, r23
    2842:	7b e0       	ldi	r23, 0x0B	; 11
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	aa 1f       	adc	r26, r26
    284a:	bb 1f       	adc	r27, r27
    284c:	7a 95       	dec	r23
    284e:	d1 f7       	brne	.-12     	; 0x2844 <STEPPER_MOTOR_move+0x48>
    2850:	70 2d       	mov	r23, r0
    2852:	28 e6       	ldi	r18, 0x68	; 104
    2854:	31 e0       	ldi	r19, 0x01	; 1
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 92 21 	call	0x4324	; 0x4324 <__udivmodsi4>
    2862:	da 01       	movw	r26, r20
    2864:	c9 01       	movw	r24, r18
    2866:	fe 01       	movw	r30, r28
    2868:	ea 58       	subi	r30, 0x8A	; 138
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 83       	st	Z, r24
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    286e:	fe 01       	movw	r30, r28
    2870:	e8 58       	subi	r30, 0x88	; 136
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	39 f0       	breq	.+14     	; 0x2888 <STEPPER_MOTOR_move+0x8c>
    287a:	fe 01       	movw	r30, r28
    287c:	e8 58       	subi	r30, 0x88	; 136
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	88 23       	and	r24, r24
    2884:	09 f0       	breq	.+2      	; 0x2888 <STEPPER_MOTOR_move+0x8c>
    2886:	58 c5       	rjmp	.+2736   	; 0x3338 <STEPPER_MOTOR_move+0xb3c>
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
    2888:	fe 01       	movw	r30, r28
    288a:	e8 58       	subi	r30, 0x88	; 136
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	09 f0       	breq	.+2      	; 0x2896 <STEPPER_MOTOR_move+0x9a>
    2894:	10 c3       	rjmp	.+1568   	; 0x2eb6 <STEPPER_MOTOR_move+0x6ba>
            {
                for(int i=0; i>=Local_u8Steps; i++)
    2896:	fe 01       	movw	r30, r28
    2898:	ec 58       	subi	r30, 0x8C	; 140
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	11 82       	std	Z+1, r1	; 0x01
    289e:	10 82       	st	Z, r1
    28a0:	fa c2       	rjmp	.+1524   	; 0x2e96 <STEPPER_MOTOR_move+0x69a>
                {
                    
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	63 e0       	ldi	r22, 0x03	; 3
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	64 e0       	ldi	r22, 0x04	; 4
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	65 e0       	ldi	r22, 0x05	; 5
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	66 e0       	ldi	r22, 0x06	; 6
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    28ca:	fe 01       	movw	r30, r28
    28cc:	e3 59       	subi	r30, 0x93	; 147
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e2       	ldi	r26, 0x20	; 32
    28d6:	b1 e4       	ldi	r27, 0x41	; 65
    28d8:	80 83       	st	Z, r24
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	a2 83       	std	Z+2, r26	; 0x02
    28de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	8e 01       	movw	r16, r28
    28e2:	07 59       	subi	r16, 0x97	; 151
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	fe 01       	movw	r30, r28
    28e8:	e3 59       	subi	r30, 0x93	; 147
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a e7       	ldi	r20, 0x7A	; 122
    28fa:	53 e4       	ldi	r21, 0x43	; 67
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	f8 01       	movw	r30, r16
    2906:	80 83       	st	Z, r24
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	a2 83       	std	Z+2, r26	; 0x02
    290c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290e:	fe 01       	movw	r30, r28
    2910:	e7 59       	subi	r30, 0x97	; 151
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2928:	88 23       	and	r24, r24
    292a:	44 f4       	brge	.+16     	; 0x293c <STEPPER_MOTOR_move+0x140>
		__ticks = 1;
    292c:	fe 01       	movw	r30, r28
    292e:	e9 59       	subi	r30, 0x99	; 153
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	64 c0       	rjmp	.+200    	; 0x2a04 <STEPPER_MOTOR_move+0x208>
	else if (__tmp > 65535)
    293c:	fe 01       	movw	r30, r28
    293e:	e7 59       	subi	r30, 0x97	; 151
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	3f ef       	ldi	r19, 0xFF	; 255
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	57 e4       	ldi	r21, 0x47	; 71
    2952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	0c f0       	brlt	.+2      	; 0x295c <STEPPER_MOTOR_move+0x160>
    295a:	43 c0       	rjmp	.+134    	; 0x29e2 <STEPPER_MOTOR_move+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	fe 01       	movw	r30, r28
    295e:	e3 59       	subi	r30, 0x93	; 147
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8e 01       	movw	r16, r28
    297c:	09 59       	subi	r16, 0x99	; 153
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	1f c0       	rjmp	.+62     	; 0x29d2 <STEPPER_MOTOR_move+0x1d6>
    2994:	fe 01       	movw	r30, r28
    2996:	eb 59       	subi	r30, 0x9B	; 155
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	89 e1       	ldi	r24, 0x19	; 25
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	fe 01       	movw	r30, r28
    29a4:	eb 59       	subi	r30, 0x9B	; 155
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <STEPPER_MOTOR_move+0x1b0>
    29b0:	fe 01       	movw	r30, r28
    29b2:	eb 59       	subi	r30, 0x9B	; 155
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	de 01       	movw	r26, r28
    29bc:	a9 59       	subi	r26, 0x99	; 153
    29be:	bf 4f       	sbci	r27, 0xFF	; 255
    29c0:	fe 01       	movw	r30, r28
    29c2:	e9 59       	subi	r30, 0x99	; 153
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	9c 93       	st	X, r25
    29d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	fe 01       	movw	r30, r28
    29d4:	e9 59       	subi	r30, 0x99	; 153
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	d1 f6       	brne	.-76     	; 0x2994 <STEPPER_MOTOR_move+0x198>
    29e0:	27 c0       	rjmp	.+78     	; 0x2a30 <STEPPER_MOTOR_move+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	8e 01       	movw	r16, r28
    29e4:	09 59       	subi	r16, 0x99	; 153
    29e6:	1f 4f       	sbci	r17, 0xFF	; 255
    29e8:	fe 01       	movw	r30, r28
    29ea:	e7 59       	subi	r30, 0x97	; 151
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	f8 01       	movw	r30, r16
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24
    2a04:	de 01       	movw	r26, r28
    2a06:	ad 59       	subi	r26, 0x9D	; 157
    2a08:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e9 59       	subi	r30, 0x99	; 153
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	8d 93       	st	X+, r24
    2a16:	9c 93       	st	X, r25
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ed 59       	subi	r30, 0x9D	; 157
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <STEPPER_MOTOR_move+0x226>
    2a26:	fe 01       	movw	r30, r28
    2a28:	ed 59       	subi	r30, 0x9D	; 157
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	63 e0       	ldi	r22, 0x03	; 3
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	64 e0       	ldi	r22, 0x04	; 4
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	65 e0       	ldi	r22, 0x05	; 5
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	66 e0       	ldi	r22, 0x06	; 6
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e1 5a       	subi	r30, 0xA1	; 161
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e2       	ldi	r26, 0x20	; 32
    2a64:	b1 e4       	ldi	r27, 0x41	; 65
    2a66:	80 83       	st	Z, r24
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	a2 83       	std	Z+2, r26	; 0x02
    2a6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	8e 01       	movw	r16, r28
    2a70:	05 5a       	subi	r16, 0xA5	; 165
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e1 5a       	subi	r30, 0xA1	; 161
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a e7       	ldi	r20, 0x7A	; 122
    2a88:	53 e4       	ldi	r21, 0x43	; 67
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e5 5a       	subi	r30, 0xA5	; 165
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	44 f4       	brge	.+16     	; 0x2aca <STEPPER_MOTOR_move+0x2ce>
		__ticks = 1;
    2aba:	fe 01       	movw	r30, r28
    2abc:	e7 5a       	subi	r30, 0xA7	; 167
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
    2ac8:	64 c0       	rjmp	.+200    	; 0x2b92 <STEPPER_MOTOR_move+0x396>
	else if (__tmp > 65535)
    2aca:	fe 01       	movw	r30, r28
    2acc:	e5 5a       	subi	r30, 0xA5	; 165
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	0c f0       	brlt	.+2      	; 0x2aea <STEPPER_MOTOR_move+0x2ee>
    2ae8:	43 c0       	rjmp	.+134    	; 0x2b70 <STEPPER_MOTOR_move+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aea:	fe 01       	movw	r30, r28
    2aec:	e1 5a       	subi	r30, 0xA1	; 161
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8e 01       	movw	r16, r28
    2b0a:	07 5a       	subi	r16, 0xA7	; 167
    2b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
    2b20:	1f c0       	rjmp	.+62     	; 0x2b60 <STEPPER_MOTOR_move+0x364>
    2b22:	fe 01       	movw	r30, r28
    2b24:	e9 5a       	subi	r30, 0xA9	; 169
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	89 e1       	ldi	r24, 0x19	; 25
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	91 83       	std	Z+1, r25	; 0x01
    2b2e:	80 83       	st	Z, r24
    2b30:	fe 01       	movw	r30, r28
    2b32:	e9 5a       	subi	r30, 0xA9	; 169
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <STEPPER_MOTOR_move+0x33e>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e9 5a       	subi	r30, 0xA9	; 169
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	de 01       	movw	r26, r28
    2b4a:	a7 5a       	subi	r26, 0xA7	; 167
    2b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e7 5a       	subi	r30, 0xA7	; 167
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	11 96       	adiw	r26, 0x01	; 1
    2b5c:	9c 93       	st	X, r25
    2b5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b60:	fe 01       	movw	r30, r28
    2b62:	e7 5a       	subi	r30, 0xA7	; 167
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	d1 f6       	brne	.-76     	; 0x2b22 <STEPPER_MOTOR_move+0x326>
    2b6e:	27 c0       	rjmp	.+78     	; 0x2bbe <STEPPER_MOTOR_move+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	8e 01       	movw	r16, r28
    2b72:	07 5a       	subi	r16, 0xA7	; 167
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	fe 01       	movw	r30, r28
    2b78:	e5 5a       	subi	r30, 0xA5	; 165
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	80 83       	st	Z, r24
    2b92:	de 01       	movw	r26, r28
    2b94:	ab 5a       	subi	r26, 0xAB	; 171
    2b96:	bf 4f       	sbci	r27, 0xFF	; 255
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e7 5a       	subi	r30, 0xA7	; 167
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	8d 93       	st	X+, r24
    2ba4:	9c 93       	st	X, r25
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	eb 5a       	subi	r30, 0xAB	; 171
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <STEPPER_MOTOR_move+0x3b4>
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	eb 5a       	subi	r30, 0xAB	; 171
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	63 e0       	ldi	r22, 0x03	; 3
    2bc2:	41 e0       	ldi	r20, 0x01	; 1
    2bc4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	64 e0       	ldi	r22, 0x04	; 4
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	65 e0       	ldi	r22, 0x05	; 5
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	66 e0       	ldi	r22, 0x06	; 6
    2be0:	41 e0       	ldi	r20, 0x01	; 1
    2be2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    2be6:	fe 01       	movw	r30, r28
    2be8:	ef 5a       	subi	r30, 0xAF	; 175
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e2       	ldi	r26, 0x20	; 32
    2bf2:	b1 e4       	ldi	r27, 0x41	; 65
    2bf4:	80 83       	st	Z, r24
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	a2 83       	std	Z+2, r26	; 0x02
    2bfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfc:	8e 01       	movw	r16, r28
    2bfe:	03 5b       	subi	r16, 0xB3	; 179
    2c00:	1f 4f       	sbci	r17, 0xFF	; 255
    2c02:	fe 01       	movw	r30, r28
    2c04:	ef 5a       	subi	r30, 0xAF	; 175
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a e7       	ldi	r20, 0x7A	; 122
    2c16:	53 e4       	ldi	r21, 0x43	; 67
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	f8 01       	movw	r30, r16
    2c22:	80 83       	st	Z, r24
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	a2 83       	std	Z+2, r26	; 0x02
    2c28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e3 5b       	subi	r30, 0xB3	; 179
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e8       	ldi	r20, 0x80	; 128
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c44:	88 23       	and	r24, r24
    2c46:	44 f4       	brge	.+16     	; 0x2c58 <STEPPER_MOTOR_move+0x45c>
		__ticks = 1;
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e5 5b       	subi	r30, 0xB5	; 181
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	80 83       	st	Z, r24
    2c56:	64 c0       	rjmp	.+200    	; 0x2d20 <STEPPER_MOTOR_move+0x524>
	else if (__tmp > 65535)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e3 5b       	subi	r30, 0xB3	; 179
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	0c f0       	brlt	.+2      	; 0x2c78 <STEPPER_MOTOR_move+0x47c>
    2c76:	43 c0       	rjmp	.+134    	; 0x2cfe <STEPPER_MOTOR_move+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ef 5a       	subi	r30, 0xAF	; 175
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8e 01       	movw	r16, r28
    2c98:	05 5b       	subi	r16, 0xB5	; 181
    2c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	f8 01       	movw	r30, r16
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24
    2cae:	1f c0       	rjmp	.+62     	; 0x2cee <STEPPER_MOTOR_move+0x4f2>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e7 5b       	subi	r30, 0xB7	; 183
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	89 e1       	ldi	r24, 0x19	; 25
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e7 5b       	subi	r30, 0xB7	; 183
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <STEPPER_MOTOR_move+0x4cc>
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e7 5b       	subi	r30, 0xB7	; 183
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	de 01       	movw	r26, r28
    2cd8:	a5 5b       	subi	r26, 0xB5	; 181
    2cda:	bf 4f       	sbci	r27, 0xFF	; 255
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e5 5b       	subi	r30, 0xB5	; 181
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	9c 93       	st	X, r25
    2cec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e5 5b       	subi	r30, 0xB5	; 181
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	d1 f6       	brne	.-76     	; 0x2cb0 <STEPPER_MOTOR_move+0x4b4>
    2cfc:	27 c0       	rjmp	.+78     	; 0x2d4c <STEPPER_MOTOR_move+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	8e 01       	movw	r16, r28
    2d00:	05 5b       	subi	r16, 0xB5	; 181
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	fe 01       	movw	r30, r28
    2d06:	e3 5b       	subi	r30, 0xB3	; 179
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
    2d20:	de 01       	movw	r26, r28
    2d22:	a9 5b       	subi	r26, 0xB9	; 185
    2d24:	bf 4f       	sbci	r27, 0xFF	; 255
    2d26:	fe 01       	movw	r30, r28
    2d28:	e5 5b       	subi	r30, 0xB5	; 181
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	8d 93       	st	X+, r24
    2d32:	9c 93       	st	X, r25
    2d34:	fe 01       	movw	r30, r28
    2d36:	e9 5b       	subi	r30, 0xB9	; 185
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <STEPPER_MOTOR_move+0x542>
    2d42:	fe 01       	movw	r30, r28
    2d44:	e9 5b       	subi	r30, 0xB9	; 185
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2d4c:	82 e0       	ldi	r24, 0x02	; 2
    2d4e:	63 e0       	ldi	r22, 0x03	; 3
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	64 e0       	ldi	r22, 0x04	; 4
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	65 e0       	ldi	r22, 0x05	; 5
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	66 e0       	ldi	r22, 0x06	; 6
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    2d74:	fe 01       	movw	r30, r28
    2d76:	ed 5b       	subi	r30, 0xBD	; 189
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e2       	ldi	r26, 0x20	; 32
    2d80:	b1 e4       	ldi	r27, 0x41	; 65
    2d82:	80 83       	st	Z, r24
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	a2 83       	std	Z+2, r26	; 0x02
    2d88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	8e 01       	movw	r16, r28
    2d8c:	01 5c       	subi	r16, 0xC1	; 193
    2d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d90:	fe 01       	movw	r30, r28
    2d92:	ed 5b       	subi	r30, 0xBD	; 189
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4a e7       	ldi	r20, 0x7A	; 122
    2da4:	53 e4       	ldi	r21, 0x43	; 67
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	f8 01       	movw	r30, r16
    2db0:	80 83       	st	Z, r24
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	a2 83       	std	Z+2, r26	; 0x02
    2db6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2db8:	fe 01       	movw	r30, r28
    2dba:	ff 96       	adiw	r30, 0x3f	; 63
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e8       	ldi	r20, 0x80	; 128
    2dca:	5f e3       	ldi	r21, 0x3F	; 63
    2dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd0:	88 23       	and	r24, r24
    2dd2:	2c f4       	brge	.+10     	; 0x2dde <STEPPER_MOTOR_move+0x5e2>
		__ticks = 1;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	9e af       	std	Y+62, r25	; 0x3e
    2dda:	8d af       	std	Y+61, r24	; 0x3d
    2ddc:	46 c0       	rjmp	.+140    	; 0x2e6a <STEPPER_MOTOR_move+0x66e>
	else if (__tmp > 65535)
    2dde:	fe 01       	movw	r30, r28
    2de0:	ff 96       	adiw	r30, 0x3f	; 63
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	64 f5       	brge	.+88     	; 0x2e52 <STEPPER_MOTOR_move+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ed 5b       	subi	r30, 0xBD	; 189
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e af       	std	Y+62, r25	; 0x3e
    2e26:	8d af       	std	Y+61, r24	; 0x3d
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <STEPPER_MOTOR_move+0x64c>
    2e2a:	89 e1       	ldi	r24, 0x19	; 25
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9c af       	std	Y+60, r25	; 0x3c
    2e30:	8b af       	std	Y+59, r24	; 0x3b
    2e32:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e34:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <STEPPER_MOTOR_move+0x63a>
    2e3a:	9c af       	std	Y+60, r25	; 0x3c
    2e3c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e40:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9e af       	std	Y+62, r25	; 0x3e
    2e46:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <STEPPER_MOTOR_move+0x62e>
    2e50:	16 c0       	rjmp	.+44     	; 0x2e7e <STEPPER_MOTOR_move+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	fe 01       	movw	r30, r28
    2e54:	ff 96       	adiw	r30, 0x3f	; 63
    2e56:	60 81       	ld	r22, Z
    2e58:	71 81       	ldd	r23, Z+1	; 0x01
    2e5a:	82 81       	ldd	r24, Z+2	; 0x02
    2e5c:	93 81       	ldd	r25, Z+3	; 0x03
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9e af       	std	Y+62, r25	; 0x3e
    2e68:	8d af       	std	Y+61, r24	; 0x3d
    2e6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e6e:	9a af       	std	Y+58, r25	; 0x3a
    2e70:	89 af       	std	Y+57, r24	; 0x39
    2e72:	89 ad       	ldd	r24, Y+57	; 0x39
    2e74:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <STEPPER_MOTOR_move+0x67a>
    2e7a:	9a af       	std	Y+58, r25	; 0x3a
    2e7c:	89 af       	std	Y+57, r24	; 0x39
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
            {
                for(int i=0; i>=Local_u8Steps; i++)
    2e7e:	de 01       	movw	r26, r28
    2e80:	ac 58       	subi	r26, 0x8C	; 140
    2e82:	bf 4f       	sbci	r27, 0xFF	; 255
    2e84:	fe 01       	movw	r30, r28
    2e86:	ec 58       	subi	r30, 0x8C	; 140
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	11 96       	adiw	r26, 0x01	; 1
    2e92:	9c 93       	st	X, r25
    2e94:	8e 93       	st	-X, r24
    2e96:	fe 01       	movw	r30, r28
    2e98:	ea 58       	subi	r30, 0x8A	; 138
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	80 81       	ld	r24, Z
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ec 58       	subi	r30, 0x8C	; 140
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	82 17       	cp	r24, r18
    2eae:	93 07       	cpc	r25, r19
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <STEPPER_MOTOR_move+0x6b8>
    2eb2:	f7 cc       	rjmp	.-1554   	; 0x28a2 <STEPPER_MOTOR_move+0xa6>
    2eb4:	45 c2       	rjmp	.+1162   	; 0x3340 <STEPPER_MOTOR_move+0xb44>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e8 58       	subi	r30, 0x88	; 136
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 81       	ld	r24, Z
    2ebe:	88 23       	and	r24, r24
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <STEPPER_MOTOR_move+0x6c8>
    2ec2:	3e c2       	rjmp	.+1148   	; 0x3340 <STEPPER_MOTOR_move+0xb44>
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ee 58       	subi	r30, 0x8E	; 142
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	11 82       	std	Z+1, r1	; 0x01
    2ecc:	10 82       	st	Z, r1
    2ece:	24 c2       	rjmp	.+1096   	; 0x3318 <STEPPER_MOTOR_move+0xb1c>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2ed0:	82 e0       	ldi	r24, 0x02	; 2
    2ed2:	63 e0       	ldi	r22, 0x03	; 3
    2ed4:	41 e0       	ldi	r20, 0x01	; 1
    2ed6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	64 e0       	ldi	r22, 0x04	; 4
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	65 e0       	ldi	r22, 0x05	; 5
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	66 e0       	ldi	r22, 0x06	; 6
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a0 e2       	ldi	r26, 0x20	; 32
    2efe:	b1 e4       	ldi	r27, 0x41	; 65
    2f00:	8d ab       	std	Y+53, r24	; 0x35
    2f02:	9e ab       	std	Y+54, r25	; 0x36
    2f04:	af ab       	std	Y+55, r26	; 0x37
    2f06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f08:	6d a9       	ldd	r22, Y+53	; 0x35
    2f0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	4a e7       	ldi	r20, 0x7A	; 122
    2f16:	53 e4       	ldi	r21, 0x43	; 67
    2f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	89 ab       	std	Y+49, r24	; 0x31
    2f22:	9a ab       	std	Y+50, r25	; 0x32
    2f24:	ab ab       	std	Y+51, r26	; 0x33
    2f26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f28:	69 a9       	ldd	r22, Y+49	; 0x31
    2f2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e8       	ldi	r20, 0x80	; 128
    2f36:	5f e3       	ldi	r21, 0x3F	; 63
    2f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3c:	88 23       	and	r24, r24
    2f3e:	2c f4       	brge	.+10     	; 0x2f4a <STEPPER_MOTOR_move+0x74e>
		__ticks = 1;
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	98 ab       	std	Y+48, r25	; 0x30
    2f46:	8f a7       	std	Y+47, r24	; 0x2f
    2f48:	3f c0       	rjmp	.+126    	; 0x2fc8 <STEPPER_MOTOR_move+0x7cc>
	else if (__tmp > 65535)
    2f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f50:	9c a9       	ldd	r25, Y+52	; 0x34
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	3f ef       	ldi	r19, 0xFF	; 255
    2f56:	4f e7       	ldi	r20, 0x7F	; 127
    2f58:	57 e4       	ldi	r21, 0x47	; 71
    2f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f5e:	18 16       	cp	r1, r24
    2f60:	4c f5       	brge	.+82     	; 0x2fb4 <STEPPER_MOTOR_move+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f62:	6d a9       	ldd	r22, Y+53	; 0x35
    2f64:	7e a9       	ldd	r23, Y+54	; 0x36
    2f66:	8f a9       	ldd	r24, Y+55	; 0x37
    2f68:	98 ad       	ldd	r25, Y+56	; 0x38
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e2       	ldi	r20, 0x20	; 32
    2f70:	51 e4       	ldi	r21, 0x41	; 65
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	bc 01       	movw	r22, r24
    2f7c:	cd 01       	movw	r24, r26
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	98 ab       	std	Y+48, r25	; 0x30
    2f88:	8f a7       	std	Y+47, r24	; 0x2f
    2f8a:	0f c0       	rjmp	.+30     	; 0x2faa <STEPPER_MOTOR_move+0x7ae>
    2f8c:	89 e1       	ldi	r24, 0x19	; 25
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9e a7       	std	Y+46, r25	; 0x2e
    2f92:	8d a7       	std	Y+45, r24	; 0x2d
    2f94:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f96:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <STEPPER_MOTOR_move+0x79c>
    2f9c:	9e a7       	std	Y+46, r25	; 0x2e
    2f9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	98 ab       	std	Y+48, r25	; 0x30
    2fa8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fac:	98 a9       	ldd	r25, Y+48	; 0x30
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	69 f7       	brne	.-38     	; 0x2f8c <STEPPER_MOTOR_move+0x790>
    2fb2:	14 c0       	rjmp	.+40     	; 0x2fdc <STEPPER_MOTOR_move+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fba:	9c a9       	ldd	r25, Y+52	; 0x34
    2fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	98 ab       	std	Y+48, r25	; 0x30
    2fc6:	8f a7       	std	Y+47, r24	; 0x2f
    2fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fca:	98 a9       	ldd	r25, Y+48	; 0x30
    2fcc:	9c a7       	std	Y+44, r25	; 0x2c
    2fce:	8b a7       	std	Y+43, r24	; 0x2b
    2fd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <STEPPER_MOTOR_move+0x7d8>
    2fd8:	9c a7       	std	Y+44, r25	; 0x2c
    2fda:	8b a7       	std	Y+43, r24	; 0x2b
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	63 e0       	ldi	r22, 0x03	; 3
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	64 e0       	ldi	r22, 0x04	; 4
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	65 e0       	ldi	r22, 0x05	; 5
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2ffa:	82 e0       	ldi	r24, 0x02	; 2
    2ffc:	66 e0       	ldi	r22, 0x06	; 6
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	a0 e2       	ldi	r26, 0x20	; 32
    300a:	b1 e4       	ldi	r27, 0x41	; 65
    300c:	8f a3       	std	Y+39, r24	; 0x27
    300e:	98 a7       	std	Y+40, r25	; 0x28
    3010:	a9 a7       	std	Y+41, r26	; 0x29
    3012:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3014:	6f a1       	ldd	r22, Y+39	; 0x27
    3016:	78 a5       	ldd	r23, Y+40	; 0x28
    3018:	89 a5       	ldd	r24, Y+41	; 0x29
    301a:	9a a5       	ldd	r25, Y+42	; 0x2a
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	4a e7       	ldi	r20, 0x7A	; 122
    3022:	53 e4       	ldi	r21, 0x43	; 67
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	8b a3       	std	Y+35, r24	; 0x23
    302e:	9c a3       	std	Y+36, r25	; 0x24
    3030:	ad a3       	std	Y+37, r26	; 0x25
    3032:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3034:	6b a1       	ldd	r22, Y+35	; 0x23
    3036:	7c a1       	ldd	r23, Y+36	; 0x24
    3038:	8d a1       	ldd	r24, Y+37	; 0x25
    303a:	9e a1       	ldd	r25, Y+38	; 0x26
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e8       	ldi	r20, 0x80	; 128
    3042:	5f e3       	ldi	r21, 0x3F	; 63
    3044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3048:	88 23       	and	r24, r24
    304a:	2c f4       	brge	.+10     	; 0x3056 <STEPPER_MOTOR_move+0x85a>
		__ticks = 1;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	9a a3       	std	Y+34, r25	; 0x22
    3052:	89 a3       	std	Y+33, r24	; 0x21
    3054:	3f c0       	rjmp	.+126    	; 0x30d4 <STEPPER_MOTOR_move+0x8d8>
	else if (__tmp > 65535)
    3056:	6b a1       	ldd	r22, Y+35	; 0x23
    3058:	7c a1       	ldd	r23, Y+36	; 0x24
    305a:	8d a1       	ldd	r24, Y+37	; 0x25
    305c:	9e a1       	ldd	r25, Y+38	; 0x26
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	57 e4       	ldi	r21, 0x47	; 71
    3066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306a:	18 16       	cp	r1, r24
    306c:	4c f5       	brge	.+82     	; 0x30c0 <STEPPER_MOTOR_move+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306e:	6f a1       	ldd	r22, Y+39	; 0x27
    3070:	78 a5       	ldd	r23, Y+40	; 0x28
    3072:	89 a5       	ldd	r24, Y+41	; 0x29
    3074:	9a a5       	ldd	r25, Y+42	; 0x2a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e2       	ldi	r20, 0x20	; 32
    307c:	51 e4       	ldi	r21, 0x41	; 65
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9a a3       	std	Y+34, r25	; 0x22
    3094:	89 a3       	std	Y+33, r24	; 0x21
    3096:	0f c0       	rjmp	.+30     	; 0x30b6 <STEPPER_MOTOR_move+0x8ba>
    3098:	89 e1       	ldi	r24, 0x19	; 25
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	98 a3       	std	Y+32, r25	; 0x20
    309e:	8f 8f       	std	Y+31, r24	; 0x1f
    30a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30a2:	98 a1       	ldd	r25, Y+32	; 0x20
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <STEPPER_MOTOR_move+0x8a8>
    30a8:	98 a3       	std	Y+32, r25	; 0x20
    30aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ac:	89 a1       	ldd	r24, Y+33	; 0x21
    30ae:	9a a1       	ldd	r25, Y+34	; 0x22
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	9a a3       	std	Y+34, r25	; 0x22
    30b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b6:	89 a1       	ldd	r24, Y+33	; 0x21
    30b8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	69 f7       	brne	.-38     	; 0x3098 <STEPPER_MOTOR_move+0x89c>
    30be:	14 c0       	rjmp	.+40     	; 0x30e8 <STEPPER_MOTOR_move+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c0:	6b a1       	ldd	r22, Y+35	; 0x23
    30c2:	7c a1       	ldd	r23, Y+36	; 0x24
    30c4:	8d a1       	ldd	r24, Y+37	; 0x25
    30c6:	9e a1       	ldd	r25, Y+38	; 0x26
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	9a a3       	std	Y+34, r25	; 0x22
    30d2:	89 a3       	std	Y+33, r24	; 0x21
    30d4:	89 a1       	ldd	r24, Y+33	; 0x21
    30d6:	9a a1       	ldd	r25, Y+34	; 0x22
    30d8:	9e 8f       	std	Y+30, r25	; 0x1e
    30da:	8d 8f       	std	Y+29, r24	; 0x1d
    30dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <STEPPER_MOTOR_move+0x8e4>
    30e4:	9e 8f       	std	Y+30, r25	; 0x1e
    30e6:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	63 e0       	ldi	r22, 0x03	; 3
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    30f2:	82 e0       	ldi	r24, 0x02	; 2
    30f4:	64 e0       	ldi	r22, 0x04	; 4
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    30fc:	82 e0       	ldi	r24, 0x02	; 2
    30fe:	65 e0       	ldi	r22, 0x05	; 5
    3100:	41 e0       	ldi	r20, 0x01	; 1
    3102:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	66 e0       	ldi	r22, 0x06	; 6
    310a:	41 e0       	ldi	r20, 0x01	; 1
    310c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	a0 e2       	ldi	r26, 0x20	; 32
    3116:	b1 e4       	ldi	r27, 0x41	; 65
    3118:	89 8f       	std	Y+25, r24	; 0x19
    311a:	9a 8f       	std	Y+26, r25	; 0x1a
    311c:	ab 8f       	std	Y+27, r26	; 0x1b
    311e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3120:	69 8d       	ldd	r22, Y+25	; 0x19
    3122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4a e7       	ldi	r20, 0x7A	; 122
    312e:	53 e4       	ldi	r21, 0x43	; 67
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8d 8b       	std	Y+21, r24	; 0x15
    313a:	9e 8b       	std	Y+22, r25	; 0x16
    313c:	af 8b       	std	Y+23, r26	; 0x17
    313e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3140:	6d 89       	ldd	r22, Y+21	; 0x15
    3142:	7e 89       	ldd	r23, Y+22	; 0x16
    3144:	8f 89       	ldd	r24, Y+23	; 0x17
    3146:	98 8d       	ldd	r25, Y+24	; 0x18
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e8       	ldi	r20, 0x80	; 128
    314e:	5f e3       	ldi	r21, 0x3F	; 63
    3150:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3154:	88 23       	and	r24, r24
    3156:	2c f4       	brge	.+10     	; 0x3162 <STEPPER_MOTOR_move+0x966>
		__ticks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9c 8b       	std	Y+20, r25	; 0x14
    315e:	8b 8b       	std	Y+19, r24	; 0x13
    3160:	3f c0       	rjmp	.+126    	; 0x31e0 <STEPPER_MOTOR_move+0x9e4>
	else if (__tmp > 65535)
    3162:	6d 89       	ldd	r22, Y+21	; 0x15
    3164:	7e 89       	ldd	r23, Y+22	; 0x16
    3166:	8f 89       	ldd	r24, Y+23	; 0x17
    3168:	98 8d       	ldd	r25, Y+24	; 0x18
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	3f ef       	ldi	r19, 0xFF	; 255
    316e:	4f e7       	ldi	r20, 0x7F	; 127
    3170:	57 e4       	ldi	r21, 0x47	; 71
    3172:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3176:	18 16       	cp	r1, r24
    3178:	4c f5       	brge	.+82     	; 0x31cc <STEPPER_MOTOR_move+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317a:	69 8d       	ldd	r22, Y+25	; 0x19
    317c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e2       	ldi	r20, 0x20	; 32
    3188:	51 e4       	ldi	r21, 0x41	; 65
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9c 8b       	std	Y+20, r25	; 0x14
    31a0:	8b 8b       	std	Y+19, r24	; 0x13
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <STEPPER_MOTOR_move+0x9c6>
    31a4:	89 e1       	ldi	r24, 0x19	; 25
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9a 8b       	std	Y+18, r25	; 0x12
    31aa:	89 8b       	std	Y+17, r24	; 0x11
    31ac:	89 89       	ldd	r24, Y+17	; 0x11
    31ae:	9a 89       	ldd	r25, Y+18	; 0x12
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <STEPPER_MOTOR_move+0x9b4>
    31b4:	9a 8b       	std	Y+18, r25	; 0x12
    31b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b8:	8b 89       	ldd	r24, Y+19	; 0x13
    31ba:	9c 89       	ldd	r25, Y+20	; 0x14
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	9c 8b       	std	Y+20, r25	; 0x14
    31c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c2:	8b 89       	ldd	r24, Y+19	; 0x13
    31c4:	9c 89       	ldd	r25, Y+20	; 0x14
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	69 f7       	brne	.-38     	; 0x31a4 <STEPPER_MOTOR_move+0x9a8>
    31ca:	14 c0       	rjmp	.+40     	; 0x31f4 <STEPPER_MOTOR_move+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31cc:	6d 89       	ldd	r22, Y+21	; 0x15
    31ce:	7e 89       	ldd	r23, Y+22	; 0x16
    31d0:	8f 89       	ldd	r24, Y+23	; 0x17
    31d2:	98 8d       	ldd	r25, Y+24	; 0x18
    31d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	9c 8b       	std	Y+20, r25	; 0x14
    31de:	8b 8b       	std	Y+19, r24	; 0x13
    31e0:	8b 89       	ldd	r24, Y+19	; 0x13
    31e2:	9c 89       	ldd	r25, Y+20	; 0x14
    31e4:	98 8b       	std	Y+16, r25	; 0x10
    31e6:	8f 87       	std	Y+15, r24	; 0x0f
    31e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ea:	98 89       	ldd	r25, Y+16	; 0x10
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <STEPPER_MOTOR_move+0x9f0>
    31f0:	98 8b       	std	Y+16, r25	; 0x10
    31f2:	8f 87       	std	Y+15, r24	; 0x0f
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	63 e0       	ldi	r22, 0x03	; 3
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    31fe:	82 e0       	ldi	r24, 0x02	; 2
    3200:	64 e0       	ldi	r22, 0x04	; 4
    3202:	41 e0       	ldi	r20, 0x01	; 1
    3204:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    3208:	82 e0       	ldi	r24, 0x02	; 2
    320a:	65 e0       	ldi	r22, 0x05	; 5
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    3212:	82 e0       	ldi	r24, 0x02	; 2
    3214:	66 e0       	ldi	r22, 0x06	; 6
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	a0 e2       	ldi	r26, 0x20	; 32
    3222:	b1 e4       	ldi	r27, 0x41	; 65
    3224:	8b 87       	std	Y+11, r24	; 0x0b
    3226:	9c 87       	std	Y+12, r25	; 0x0c
    3228:	ad 87       	std	Y+13, r26	; 0x0d
    322a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322c:	6b 85       	ldd	r22, Y+11	; 0x0b
    322e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3230:	8d 85       	ldd	r24, Y+13	; 0x0d
    3232:	9e 85       	ldd	r25, Y+14	; 0x0e
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	4a e7       	ldi	r20, 0x7A	; 122
    323a:	53 e4       	ldi	r21, 0x43	; 67
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	8f 83       	std	Y+7, r24	; 0x07
    3246:	98 87       	std	Y+8, r25	; 0x08
    3248:	a9 87       	std	Y+9, r26	; 0x09
    324a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324c:	6f 81       	ldd	r22, Y+7	; 0x07
    324e:	78 85       	ldd	r23, Y+8	; 0x08
    3250:	89 85       	ldd	r24, Y+9	; 0x09
    3252:	9a 85       	ldd	r25, Y+10	; 0x0a
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e8       	ldi	r20, 0x80	; 128
    325a:	5f e3       	ldi	r21, 0x3F	; 63
    325c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3260:	88 23       	and	r24, r24
    3262:	2c f4       	brge	.+10     	; 0x326e <STEPPER_MOTOR_move+0xa72>
		__ticks = 1;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
    326c:	3f c0       	rjmp	.+126    	; 0x32ec <STEPPER_MOTOR_move+0xaf0>
	else if (__tmp > 65535)
    326e:	6f 81       	ldd	r22, Y+7	; 0x07
    3270:	78 85       	ldd	r23, Y+8	; 0x08
    3272:	89 85       	ldd	r24, Y+9	; 0x09
    3274:	9a 85       	ldd	r25, Y+10	; 0x0a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	3f ef       	ldi	r19, 0xFF	; 255
    327a:	4f e7       	ldi	r20, 0x7F	; 127
    327c:	57 e4       	ldi	r21, 0x47	; 71
    327e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	4c f5       	brge	.+82     	; 0x32d8 <STEPPER_MOTOR_move+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3286:	6b 85       	ldd	r22, Y+11	; 0x0b
    3288:	7c 85       	ldd	r23, Y+12	; 0x0c
    328a:	8d 85       	ldd	r24, Y+13	; 0x0d
    328c:	9e 85       	ldd	r25, Y+14	; 0x0e
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e2       	ldi	r20, 0x20	; 32
    3294:	51 e4       	ldi	r21, 0x41	; 65
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
    32ae:	0f c0       	rjmp	.+30     	; 0x32ce <STEPPER_MOTOR_move+0xad2>
    32b0:	89 e1       	ldi	r24, 0x19	; 25
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9c 83       	std	Y+4, r25	; 0x04
    32b6:	8b 83       	std	Y+3, r24	; 0x03
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <STEPPER_MOTOR_move+0xac0>
    32c0:	9c 83       	std	Y+4, r25	; 0x04
    32c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	69 f7       	brne	.-38     	; 0x32b0 <STEPPER_MOTOR_move+0xab4>
    32d6:	14 c0       	rjmp	.+40     	; 0x3300 <STEPPER_MOTOR_move+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <STEPPER_MOTOR_move+0xafc>
    32fc:	9a 83       	std	Y+2, r25	; 0x02
    32fe:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    3300:	de 01       	movw	r26, r28
    3302:	ae 58       	subi	r26, 0x8E	; 142
    3304:	bf 4f       	sbci	r27, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	ee 58       	subi	r30, 0x8E	; 142
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 81       	ld	r24, Z
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	01 96       	adiw	r24, 0x01	; 1
    3312:	11 96       	adiw	r26, 0x01	; 1
    3314:	9c 93       	st	X, r25
    3316:	8e 93       	st	-X, r24
    3318:	fe 01       	movw	r30, r28
    331a:	ea 58       	subi	r30, 0x8A	; 138
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	fe 01       	movw	r30, r28
    3326:	ee 58       	subi	r30, 0x8E	; 142
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	82 17       	cp	r24, r18
    3330:	93 07       	cpc	r25, r19
    3332:	0c f0       	brlt	.+2      	; 0x3336 <STEPPER_MOTOR_move+0xb3a>
    3334:	cd cd       	rjmp	.-1126   	; 0x2ed0 <STEPPER_MOTOR_move+0x6d4>
    3336:	04 c0       	rjmp	.+8      	; 0x3340 <STEPPER_MOTOR_move+0xb44>
                }
                
    }
    

else{u8 LocalErrorState = STD_TYPES_NOK;}
    3338:	fe 01       	movw	r30, r28
    333a:	ef 58       	subi	r30, 0x8F	; 143
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	10 82       	st	Z, r1
return LocalErrorState;
    3340:	fe 01       	movw	r30, r28
    3342:	e9 58       	subi	r30, 0x89	; 137
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	80 81       	ld	r24, Z
}
    3348:	c7 58       	subi	r28, 0x87	; 135
    334a:	df 4f       	sbci	r29, 0xFF	; 255
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	1f 91       	pop	r17
    335c:	0f 91       	pop	r16
    335e:	08 95       	ret

00003360 <main>:


void login(void);

int main (void)
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
	//DIO_voidInit();
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_INPUT);
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	62 e0       	ldi	r22, 0x02	; 2
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	0e 94 b8 06 	call	0xd70	; 0xd70 <DIO_voidSetPinDirection>

	GI_voidEnable();
    3372:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <GI_voidEnable>
	EXTI_EXTIEnable(EXTI_u8_INT2,EXTI_u8_RAISING_EDGE);
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	0e 94 05 0b 	call	0x160a	; 0x160a <EXTI_EXTIEnable>
	SET_BIT(SREG,7);
    337e:	af e5       	ldi	r26, 0x5F	; 95
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	ef e5       	ldi	r30, 0x5F	; 95
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	80 68       	ori	r24, 0x80	; 128
    338a:	8c 93       	st	X, r24
	EXTI_u8EXTISetCallBack(&login,EXTI_u8_INT2);
    338c:	8d ec       	ldi	r24, 0xCD	; 205
    338e:	99 e1       	ldi	r25, 0x19	; 25
    3390:	62 e0       	ldi	r22, 0x02	; 2
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	0e 94 94 0c 	call	0x1928	; 0x1928 <EXTI_u8EXTISetCallBack>
    3398:	ff cf       	rjmp	.-2      	; 0x3398 <main+0x38>

0000339a <login>:




 void login(void)
{
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	c2 59       	subi	r28, 0x92	; 146
    33a8:	d0 40       	sbci	r29, 0x00	; 0
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	DIO_voidInit();
    33b4:	0e 94 93 06 	call	0xd26	; 0xd26 <DIO_voidInit>
	LCD_voideInit();
    33b8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>
	LCD_PrintString("enter password");
    33bc:	80 e6       	ldi	r24, 0x60	; 96
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
	u8 password[4] = {'1','2','3','3'};
    33c4:	fe 01       	movw	r30, r28
    33c6:	e1 57       	subi	r30, 0x71	; 113
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	81 e3       	ldi	r24, 0x31	; 49
    33cc:	80 83       	st	Z, r24
    33ce:	fe 01       	movw	r30, r28
    33d0:	e1 57       	subi	r30, 0x71	; 113
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	82 e3       	ldi	r24, 0x32	; 50
    33d6:	81 83       	std	Z+1, r24	; 0x01
    33d8:	fe 01       	movw	r30, r28
    33da:	e1 57       	subi	r30, 0x71	; 113
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	83 e3       	ldi	r24, 0x33	; 51
    33e0:	82 83       	std	Z+2, r24	; 0x02
    33e2:	fe 01       	movw	r30, r28
    33e4:	e1 57       	subi	r30, 0x71	; 113
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	83 e3       	ldi	r24, 0x33	; 51
    33ea:	83 83       	std	Z+3, r24	; 0x03
	u8 index = 0;
    33ec:	fe 01       	movw	r30, r28
    33ee:	e3 57       	subi	r30, 0x73	; 115
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	10 82       	st	Z, r1

	while(1)
	{
		LCD_voidSendCmnd(0xC0);
    33f4:	80 ec       	ldi	r24, 0xC0	; 192
    33f6:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
    33fa:	2f c0       	rjmp	.+94     	; 0x345a <login+0xc0>
		while(index<4)
		{
			KPD_u8GetKeyState(&Local_u8Key);
    33fc:	ce 01       	movw	r24, r28
    33fe:	82 57       	subi	r24, 0x72	; 114
    3400:	9f 4f       	sbci	r25, 0xFF	; 255
    3402:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KPD_u8GetKeyState>

			  if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    3406:	fe 01       	movw	r30, r28
    3408:	e2 57       	subi	r30, 0x72	; 114
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	8f 3f       	cpi	r24, 0xFF	; 255
    3410:	21 f1       	breq	.+72     	; 0x345a <login+0xc0>
           LCD_voideInit();
    3412:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>

	         LCD_voidSendChar(Local_u8Key);
    3416:	fe 01       	movw	r30, r28
    3418:	e2 57       	subi	r30, 0x72	; 114
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	80 81       	ld	r24, Z
    341e:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_voidSendChar>
	         if (password[index] == Local_u8Key){
    3422:	fe 01       	movw	r30, r28
    3424:	e3 57       	subi	r30, 0x73	; 115
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 81       	ld	r24, Z
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	ce 01       	movw	r24, r28
    3430:	81 57       	subi	r24, 0x71	; 113
    3432:	9f 4f       	sbci	r25, 0xFF	; 255
    3434:	fc 01       	movw	r30, r24
    3436:	e2 0f       	add	r30, r18
    3438:	f3 1f       	adc	r31, r19
    343a:	90 81       	ld	r25, Z
    343c:	fe 01       	movw	r30, r28
    343e:	e2 57       	subi	r30, 0x72	; 114
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	98 17       	cp	r25, r24
    3446:	79 f4       	brne	.+30     	; 0x3466 <login+0xcc>
	        	 index++;
    3448:	de 01       	movw	r26, r28
    344a:	a3 57       	subi	r26, 0x73	; 115
    344c:	bf 4f       	sbci	r27, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	e3 57       	subi	r30, 0x73	; 115
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	8f 5f       	subi	r24, 0xFF	; 255
    3458:	8c 93       	st	X, r24
	u8 index = 0;

	while(1)
	{
		LCD_voidSendCmnd(0xC0);
		while(index<4)
    345a:	fe 01       	movw	r30, r28
    345c:	e3 57       	subi	r30, 0x73	; 115
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 81       	ld	r24, Z
    3462:	84 30       	cpi	r24, 0x04	; 4
    3464:	58 f2       	brcs	.-106    	; 0x33fc <login+0x62>
		}
	         else {break;}

	   }}

			  if(index >=4){
    3466:	fe 01       	movw	r30, r28
    3468:	e3 57       	subi	r30, 0x73	; 115
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	80 81       	ld	r24, Z
    346e:	84 30       	cpi	r24, 0x04	; 4
    3470:	08 f4       	brcc	.+2      	; 0x3474 <login+0xda>
    3472:	46 c7       	rjmp	.+3724   	; 0x4300 <login+0xf66>
				LCD_voideInit();
    3474:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>

				  LCD_PrintString("1-DC 2-steper");
    3478:	8f e6       	ldi	r24, 0x6F	; 111
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
				  LCD_voidSendCmnd(0xC0);
    3480:	80 ec       	ldi	r24, 0xC0	; 192
    3482:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
				  LCD_PrintString("3-exit");
    3486:	8d e7       	ldi	r24, 0x7D	; 125
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
				  while(1){
					KPD_u8GetKeyState(&Local_u8Key);
    348e:	ce 01       	movw	r24, r28
    3490:	82 57       	subi	r24, 0x72	; 114
    3492:	9f 4f       	sbci	r25, 0xFF	; 255
    3494:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KPD_u8GetKeyState>
					 if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    3498:	fe 01       	movw	r30, r28
    349a:	e2 57       	subi	r30, 0x72	; 114
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 81       	ld	r24, Z
    34a0:	8f 3f       	cpi	r24, 0xFF	; 255
    34a2:	a9 f3       	breq	.-22     	; 0x348e <login+0xf4>
						if(Local_u8Key=='1'){
    34a4:	fe 01       	movw	r30, r28
    34a6:	e2 57       	subi	r30, 0x72	; 114
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 81       	ld	r24, Z
    34ac:	81 33       	cpi	r24, 0x31	; 49
    34ae:	51 f5       	brne	.+84     	; 0x3504 <login+0x16a>
							LCD_voideInit();
    34b0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>
							LCD_PrintString("1-ccw");
    34b4:	84 e8       	ldi	r24, 0x84	; 132
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
							LCD_voidSendCmnd(0xC0);
    34bc:	80 ec       	ldi	r24, 0xC0	; 192
    34be:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
							LCD_PrintString("1-cw");
    34c2:	8a e8       	ldi	r24, 0x8A	; 138
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
							while(1){
								KPD_u8GetKeyState(&Local_u8Key);
    34ca:	ce 01       	movw	r24, r28
    34cc:	82 57       	subi	r24, 0x72	; 114
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KPD_u8GetKeyState>
								if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    34d4:	fe 01       	movw	r30, r28
    34d6:	e2 57       	subi	r30, 0x72	; 114
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	80 81       	ld	r24, Z
    34dc:	8f 3f       	cpi	r24, 0xFF	; 255
    34de:	a9 f3       	breq	.-22     	; 0x34ca <login+0x130>
									if(Local_u8Key=='1'){
    34e0:	fe 01       	movw	r30, r28
    34e2:	e2 57       	subi	r30, 0x72	; 114
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	81 33       	cpi	r24, 0x31	; 49
    34ea:	19 f4       	brne	.+6      	; 0x34f2 <login+0x158>
										DC_Motor_Rotate_Clockwise();
    34ec:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <DC_Motor_Rotate_Clockwise>
    34f0:	ce cf       	rjmp	.-100    	; 0x348e <login+0xf4>
										break;
									}
									else if (Local_u8Key=='2')
    34f2:	fe 01       	movw	r30, r28
    34f4:	e2 57       	subi	r30, 0x72	; 114
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	82 33       	cpi	r24, 0x32	; 50
    34fc:	31 f7       	brne	.-52     	; 0x34ca <login+0x130>
									{
										DC_Motor_Rotate_CounterClockwise();
    34fe:	0e 94 71 06 	call	0xce2	; 0xce2 <DC_Motor_Rotate_CounterClockwise>
    3502:	c5 cf       	rjmp	.-118    	; 0x348e <login+0xf4>
									}

								}
							}
						}
						else if (Local_u8Key=='2')
    3504:	fe 01       	movw	r30, r28
    3506:	e2 57       	subi	r30, 0x72	; 114
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	80 81       	ld	r24, Z
    350c:	82 33       	cpi	r24, 0x32	; 50
    350e:	09 f0       	breq	.+2      	; 0x3512 <login+0x178>
    3510:	be cf       	rjmp	.-132    	; 0x348e <login+0xf4>
						{
							LCD_voideInit();
    3512:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>
							LCD_PrintString("1-cw");
    3516:	8a e8       	ldi	r24, 0x8A	; 138
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
							LCD_voidSendCmnd(0xC0);
    351e:	80 ec       	ldi	r24, 0xC0	; 192
    3520:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
							LCD_PrintString("1-ccw");
    3524:	84 e8       	ldi	r24, 0x84	; 132
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
							while(1){
								KPD_u8GetKeyState(&Local_u8Key);
    352c:	ce 01       	movw	r24, r28
    352e:	82 57       	subi	r24, 0x72	; 114
    3530:	9f 4f       	sbci	r25, 0xFF	; 255
    3532:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KPD_u8GetKeyState>
								if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3536:	fe 01       	movw	r30, r28
    3538:	e2 57       	subi	r30, 0x72	; 114
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	80 81       	ld	r24, Z
    353e:	8f 3f       	cpi	r24, 0xFF	; 255
    3540:	a9 f3       	breq	.-22     	; 0x352c <login+0x192>
									if(Local_u8Key =='1'){
    3542:	fe 01       	movw	r30, r28
    3544:	e2 57       	subi	r30, 0x72	; 114
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	81 33       	cpi	r24, 0x31	; 49
    354c:	09 f0       	breq	.+2      	; 0x3550 <login+0x1b6>
    354e:	01 c4       	rjmp	.+2050   	; 0x3d52 <login+0x9b8>
										LCD_voideInit();
    3550:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>
							            LCD_PrintString("1-90 2-180 3-270");
    3554:	8f e8       	ldi	r24, 0x8F	; 143
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
							            LCD_voidSendCmnd(0xC0);
    355c:	80 ec       	ldi	r24, 0xC0	; 192
    355e:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
							            LCD_PrintString("4-360");
    3562:	80 ea       	ldi	r24, 0xA0	; 160
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
										while(1){
											KPD_u8GetKeyState(&Local_u8Key);
    356a:	ce 01       	movw	r24, r28
    356c:	82 57       	subi	r24, 0x72	; 114
    356e:	9f 4f       	sbci	r25, 0xFF	; 255
    3570:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KPD_u8GetKeyState>
											if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3574:	fe 01       	movw	r30, r28
    3576:	e2 57       	subi	r30, 0x72	; 114
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	80 81       	ld	r24, Z
    357c:	8f 3f       	cpi	r24, 0xFF	; 255
    357e:	b1 f2       	breq	.-84     	; 0x352c <login+0x192>
												if(Local_u8Key=='1'){
    3580:	fe 01       	movw	r30, r28
    3582:	e2 57       	subi	r30, 0x72	; 114
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	80 81       	ld	r24, Z
    3588:	81 33       	cpi	r24, 0x31	; 49
    358a:	09 f0       	breq	.+2      	; 0x358e <login+0x1f4>
    358c:	be c0       	rjmp	.+380    	; 0x370a <login+0x370>
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    358e:	82 e0       	ldi	r24, 0x02	; 2
    3590:	63 e0       	ldi	r22, 0x03	; 3
    3592:	41 e0       	ldi	r20, 0x01	; 1
    3594:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3598:	fe 01       	movw	r30, r28
    359a:	e7 57       	subi	r30, 0x77	; 119
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	a8 e4       	ldi	r26, 0x48	; 72
    35a4:	b3 e4       	ldi	r27, 0x43	; 67
    35a6:	80 83       	st	Z, r24
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	a2 83       	std	Z+2, r26	; 0x02
    35ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ae:	8e 01       	movw	r16, r28
    35b0:	0b 57       	subi	r16, 0x7B	; 123
    35b2:	1f 4f       	sbci	r17, 0xFF	; 255
    35b4:	fe 01       	movw	r30, r28
    35b6:	e7 57       	subi	r30, 0x77	; 119
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	60 81       	ld	r22, Z
    35bc:	71 81       	ldd	r23, Z+1	; 0x01
    35be:	82 81       	ldd	r24, Z+2	; 0x02
    35c0:	93 81       	ldd	r25, Z+3	; 0x03
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	4a e7       	ldi	r20, 0x7A	; 122
    35c8:	53 e4       	ldi	r21, 0x43	; 67
    35ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	f8 01       	movw	r30, r16
    35d4:	80 83       	st	Z, r24
    35d6:	91 83       	std	Z+1, r25	; 0x01
    35d8:	a2 83       	std	Z+2, r26	; 0x02
    35da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35dc:	fe 01       	movw	r30, r28
    35de:	eb 57       	subi	r30, 0x7B	; 123
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	60 81       	ld	r22, Z
    35e4:	71 81       	ldd	r23, Z+1	; 0x01
    35e6:	82 81       	ldd	r24, Z+2	; 0x02
    35e8:	93 81       	ldd	r25, Z+3	; 0x03
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e8       	ldi	r20, 0x80	; 128
    35f0:	5f e3       	ldi	r21, 0x3F	; 63
    35f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f6:	88 23       	and	r24, r24
    35f8:	44 f4       	brge	.+16     	; 0x360a <login+0x270>
		__ticks = 1;
    35fa:	fe 01       	movw	r30, r28
    35fc:	ed 57       	subi	r30, 0x7D	; 125
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
    3608:	64 c0       	rjmp	.+200    	; 0x36d2 <login+0x338>
	else if (__tmp > 65535)
    360a:	fe 01       	movw	r30, r28
    360c:	eb 57       	subi	r30, 0x7B	; 123
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	82 81       	ldd	r24, Z+2	; 0x02
    3616:	93 81       	ldd	r25, Z+3	; 0x03
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	3f ef       	ldi	r19, 0xFF	; 255
    361c:	4f e7       	ldi	r20, 0x7F	; 127
    361e:	57 e4       	ldi	r21, 0x47	; 71
    3620:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3624:	18 16       	cp	r1, r24
    3626:	0c f0       	brlt	.+2      	; 0x362a <login+0x290>
    3628:	43 c0       	rjmp	.+134    	; 0x36b0 <login+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362a:	fe 01       	movw	r30, r28
    362c:	e7 57       	subi	r30, 0x77	; 119
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	60 81       	ld	r22, Z
    3632:	71 81       	ldd	r23, Z+1	; 0x01
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e2       	ldi	r20, 0x20	; 32
    363e:	51 e4       	ldi	r21, 0x41	; 65
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	8e 01       	movw	r16, r28
    364a:	0d 57       	subi	r16, 0x7D	; 125
    364c:	1f 4f       	sbci	r17, 0xFF	; 255
    364e:	bc 01       	movw	r22, r24
    3650:	cd 01       	movw	r24, r26
    3652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	f8 01       	movw	r30, r16
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24
    3660:	1f c0       	rjmp	.+62     	; 0x36a0 <login+0x306>
    3662:	fe 01       	movw	r30, r28
    3664:	ef 57       	subi	r30, 0x7F	; 127
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	89 e1       	ldi	r24, 0x19	; 25
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
    3670:	fe 01       	movw	r30, r28
    3672:	ef 57       	subi	r30, 0x7F	; 127
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <login+0x2e0>
    367e:	fe 01       	movw	r30, r28
    3680:	ef 57       	subi	r30, 0x7F	; 127
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3688:	de 01       	movw	r26, r28
    368a:	ad 57       	subi	r26, 0x7D	; 125
    368c:	bf 4f       	sbci	r27, 0xFF	; 255
    368e:	fe 01       	movw	r30, r28
    3690:	ed 57       	subi	r30, 0x7D	; 125
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	11 96       	adiw	r26, 0x01	; 1
    369c:	9c 93       	st	X, r25
    369e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a0:	fe 01       	movw	r30, r28
    36a2:	ed 57       	subi	r30, 0x7D	; 125
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	00 97       	sbiw	r24, 0x00	; 0
    36ac:	d1 f6       	brne	.-76     	; 0x3662 <login+0x2c8>
    36ae:	27 c0       	rjmp	.+78     	; 0x36fe <login+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b0:	8e 01       	movw	r16, r28
    36b2:	0d 57       	subi	r16, 0x7D	; 125
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	fe 01       	movw	r30, r28
    36b8:	eb 57       	subi	r30, 0x7B	; 123
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	60 81       	ld	r22, Z
    36be:	71 81       	ldd	r23, Z+1	; 0x01
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	f8 01       	movw	r30, r16
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
    36d2:	de 01       	movw	r26, r28
    36d4:	a1 58       	subi	r26, 0x81	; 129
    36d6:	bf 4f       	sbci	r27, 0xFF	; 255
    36d8:	fe 01       	movw	r30, r28
    36da:	ed 57       	subi	r30, 0x7D	; 125
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	8d 93       	st	X+, r24
    36e4:	9c 93       	st	X, r25
    36e6:	fe 01       	movw	r30, r28
    36e8:	e1 58       	subi	r30, 0x81	; 129
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	91 81       	ldd	r25, Z+1	; 0x01
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <login+0x356>
    36f4:	fe 01       	movw	r30, r28
    36f6:	e1 58       	subi	r30, 0x81	; 129
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24
												_delay_ms(200);
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    36fe:	82 e0       	ldi	r24, 0x02	; 2
    3700:	64 e0       	ldi	r22, 0x04	; 4
    3702:	41 e0       	ldi	r20, 0x01	; 1
    3704:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3708:	11 cf       	rjmp	.-478    	; 0x352c <login+0x192>
												break;
												}
												else if (Local_u8Key=='2')
    370a:	fe 01       	movw	r30, r28
    370c:	e2 57       	subi	r30, 0x72	; 114
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 81       	ld	r24, Z
    3712:	82 33       	cpi	r24, 0x32	; 50
    3714:	59 f4       	brne	.+22     	; 0x372c <login+0x392>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3716:	82 e0       	ldi	r24, 0x02	; 2
    3718:	64 e0       	ldi	r22, 0x04	; 4
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3720:	82 e0       	ldi	r24, 0x02	; 2
    3722:	65 e0       	ldi	r22, 0x05	; 5
    3724:	41 e0       	ldi	r20, 0x01	; 1
    3726:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    372a:	00 cf       	rjmp	.-512    	; 0x352c <login+0x192>
													break;
												}
												else if (Local_u8Key=='3')
    372c:	fe 01       	movw	r30, r28
    372e:	e2 57       	subi	r30, 0x72	; 114
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	80 81       	ld	r24, Z
    3734:	83 33       	cpi	r24, 0x33	; 51
    3736:	09 f0       	breq	.+2      	; 0x373a <login+0x3a0>
    3738:	c8 c0       	rjmp	.+400    	; 0x38ca <login+0x530>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	64 e0       	ldi	r22, 0x04	; 4
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	65 e0       	ldi	r22, 0x05	; 5
    3748:	41 e0       	ldi	r20, 0x01	; 1
    374a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    374e:	fe 01       	movw	r30, r28
    3750:	e5 58       	subi	r30, 0x85	; 133
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	aa ef       	ldi	r26, 0xFA	; 250
    375a:	b4 e4       	ldi	r27, 0x44	; 68
    375c:	80 83       	st	Z, r24
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	a2 83       	std	Z+2, r26	; 0x02
    3762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3764:	8e 01       	movw	r16, r28
    3766:	09 58       	subi	r16, 0x89	; 137
    3768:	1f 4f       	sbci	r17, 0xFF	; 255
    376a:	fe 01       	movw	r30, r28
    376c:	e5 58       	subi	r30, 0x85	; 133
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	60 81       	ld	r22, Z
    3772:	71 81       	ldd	r23, Z+1	; 0x01
    3774:	82 81       	ldd	r24, Z+2	; 0x02
    3776:	93 81       	ldd	r25, Z+3	; 0x03
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	4a e7       	ldi	r20, 0x7A	; 122
    377e:	53 e4       	ldi	r21, 0x43	; 67
    3780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	f8 01       	movw	r30, r16
    378a:	80 83       	st	Z, r24
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	a2 83       	std	Z+2, r26	; 0x02
    3790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3792:	fe 01       	movw	r30, r28
    3794:	e9 58       	subi	r30, 0x89	; 137
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e8       	ldi	r20, 0x80	; 128
    37a6:	5f e3       	ldi	r21, 0x3F	; 63
    37a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ac:	88 23       	and	r24, r24
    37ae:	44 f4       	brge	.+16     	; 0x37c0 <login+0x426>
		__ticks = 1;
    37b0:	fe 01       	movw	r30, r28
    37b2:	eb 58       	subi	r30, 0x8B	; 139
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	80 83       	st	Z, r24
    37be:	64 c0       	rjmp	.+200    	; 0x3888 <login+0x4ee>
	else if (__tmp > 65535)
    37c0:	fe 01       	movw	r30, r28
    37c2:	e9 58       	subi	r30, 0x89	; 137
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	60 81       	ld	r22, Z
    37c8:	71 81       	ldd	r23, Z+1	; 0x01
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	93 81       	ldd	r25, Z+3	; 0x03
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	3f ef       	ldi	r19, 0xFF	; 255
    37d2:	4f e7       	ldi	r20, 0x7F	; 127
    37d4:	57 e4       	ldi	r21, 0x47	; 71
    37d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37da:	18 16       	cp	r1, r24
    37dc:	0c f0       	brlt	.+2      	; 0x37e0 <login+0x446>
    37de:	43 c0       	rjmp	.+134    	; 0x3866 <login+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e0:	fe 01       	movw	r30, r28
    37e2:	e5 58       	subi	r30, 0x85	; 133
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	60 81       	ld	r22, Z
    37e8:	71 81       	ldd	r23, Z+1	; 0x01
    37ea:	82 81       	ldd	r24, Z+2	; 0x02
    37ec:	93 81       	ldd	r25, Z+3	; 0x03
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e2       	ldi	r20, 0x20	; 32
    37f4:	51 e4       	ldi	r21, 0x41	; 65
    37f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	8e 01       	movw	r16, r28
    3800:	0b 58       	subi	r16, 0x8B	; 139
    3802:	1f 4f       	sbci	r17, 0xFF	; 255
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	f8 01       	movw	r30, r16
    3812:	91 83       	std	Z+1, r25	; 0x01
    3814:	80 83       	st	Z, r24
    3816:	1f c0       	rjmp	.+62     	; 0x3856 <login+0x4bc>
    3818:	fe 01       	movw	r30, r28
    381a:	ed 58       	subi	r30, 0x8D	; 141
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	89 e1       	ldi	r24, 0x19	; 25
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    3826:	fe 01       	movw	r30, r28
    3828:	ed 58       	subi	r30, 0x8D	; 141
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <login+0x496>
    3834:	fe 01       	movw	r30, r28
    3836:	ed 58       	subi	r30, 0x8D	; 141
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383e:	de 01       	movw	r26, r28
    3840:	ab 58       	subi	r26, 0x8B	; 139
    3842:	bf 4f       	sbci	r27, 0xFF	; 255
    3844:	fe 01       	movw	r30, r28
    3846:	eb 58       	subi	r30, 0x8B	; 139
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 81       	ld	r24, Z
    384c:	91 81       	ldd	r25, Z+1	; 0x01
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	11 96       	adiw	r26, 0x01	; 1
    3852:	9c 93       	st	X, r25
    3854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3856:	fe 01       	movw	r30, r28
    3858:	eb 58       	subi	r30, 0x8B	; 139
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	80 81       	ld	r24, Z
    385e:	91 81       	ldd	r25, Z+1	; 0x01
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	d1 f6       	brne	.-76     	; 0x3818 <login+0x47e>
    3864:	27 c0       	rjmp	.+78     	; 0x38b4 <login+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	8e 01       	movw	r16, r28
    3868:	0b 58       	subi	r16, 0x8B	; 139
    386a:	1f 4f       	sbci	r17, 0xFF	; 255
    386c:	fe 01       	movw	r30, r28
    386e:	e9 58       	subi	r30, 0x89	; 137
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	60 81       	ld	r22, Z
    3874:	71 81       	ldd	r23, Z+1	; 0x01
    3876:	82 81       	ldd	r24, Z+2	; 0x02
    3878:	93 81       	ldd	r25, Z+3	; 0x03
    387a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	f8 01       	movw	r30, r16
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	80 83       	st	Z, r24
    3888:	de 01       	movw	r26, r28
    388a:	af 58       	subi	r26, 0x8F	; 143
    388c:	bf 4f       	sbci	r27, 0xFF	; 255
    388e:	fe 01       	movw	r30, r28
    3890:	eb 58       	subi	r30, 0x8B	; 139
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	80 81       	ld	r24, Z
    3896:	91 81       	ldd	r25, Z+1	; 0x01
    3898:	8d 93       	st	X+, r24
    389a:	9c 93       	st	X, r25
    389c:	fe 01       	movw	r30, r28
    389e:	ef 58       	subi	r30, 0x8F	; 143
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	80 81       	ld	r24, Z
    38a4:	91 81       	ldd	r25, Z+1	; 0x01
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	f1 f7       	brne	.-4      	; 0x38a6 <login+0x50c>
    38aa:	fe 01       	movw	r30, r28
    38ac:	ef 58       	subi	r30, 0x8F	; 143
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    38b4:	82 e0       	ldi	r24, 0x02	; 2
    38b6:	64 e0       	ldi	r22, 0x04	; 4
    38b8:	40 e0       	ldi	r20, 0x00	; 0
    38ba:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    38be:	82 e0       	ldi	r24, 0x02	; 2
    38c0:	64 e0       	ldi	r22, 0x04	; 4
    38c2:	41 e0       	ldi	r20, 0x01	; 1
    38c4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    38c8:	31 ce       	rjmp	.-926    	; 0x352c <login+0x192>
													break;
												}
												else if (Local_u8Key=='4')
    38ca:	fe 01       	movw	r30, r28
    38cc:	e2 57       	subi	r30, 0x72	; 114
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	80 81       	ld	r24, Z
    38d2:	84 33       	cpi	r24, 0x34	; 52
    38d4:	09 f0       	breq	.+2      	; 0x38d8 <login+0x53e>
    38d6:	2a ce       	rjmp	.-940    	; 0x352c <login+0x192>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	64 e0       	ldi	r22, 0x04	; 4
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    38e2:	82 e0       	ldi	r24, 0x02	; 2
    38e4:	65 e0       	ldi	r22, 0x05	; 5
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    38ec:	fe 01       	movw	r30, r28
    38ee:	e3 59       	subi	r30, 0x93	; 147
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	aa ef       	ldi	r26, 0xFA	; 250
    38f8:	b4 e4       	ldi	r27, 0x44	; 68
    38fa:	80 83       	st	Z, r24
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	a2 83       	std	Z+2, r26	; 0x02
    3900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3902:	8e 01       	movw	r16, r28
    3904:	07 59       	subi	r16, 0x97	; 151
    3906:	1f 4f       	sbci	r17, 0xFF	; 255
    3908:	fe 01       	movw	r30, r28
    390a:	e3 59       	subi	r30, 0x93	; 147
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	60 81       	ld	r22, Z
    3910:	71 81       	ldd	r23, Z+1	; 0x01
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	93 81       	ldd	r25, Z+3	; 0x03
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	4a e7       	ldi	r20, 0x7A	; 122
    391c:	53 e4       	ldi	r21, 0x43	; 67
    391e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	f8 01       	movw	r30, r16
    3928:	80 83       	st	Z, r24
    392a:	91 83       	std	Z+1, r25	; 0x01
    392c:	a2 83       	std	Z+2, r26	; 0x02
    392e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3930:	fe 01       	movw	r30, r28
    3932:	e7 59       	subi	r30, 0x97	; 151
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	60 81       	ld	r22, Z
    3938:	71 81       	ldd	r23, Z+1	; 0x01
    393a:	82 81       	ldd	r24, Z+2	; 0x02
    393c:	93 81       	ldd	r25, Z+3	; 0x03
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e8       	ldi	r20, 0x80	; 128
    3944:	5f e3       	ldi	r21, 0x3F	; 63
    3946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394a:	88 23       	and	r24, r24
    394c:	44 f4       	brge	.+16     	; 0x395e <login+0x5c4>
		__ticks = 1;
    394e:	fe 01       	movw	r30, r28
    3950:	e9 59       	subi	r30, 0x99	; 153
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	91 83       	std	Z+1, r25	; 0x01
    395a:	80 83       	st	Z, r24
    395c:	64 c0       	rjmp	.+200    	; 0x3a26 <login+0x68c>
	else if (__tmp > 65535)
    395e:	fe 01       	movw	r30, r28
    3960:	e7 59       	subi	r30, 0x97	; 151
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	60 81       	ld	r22, Z
    3966:	71 81       	ldd	r23, Z+1	; 0x01
    3968:	82 81       	ldd	r24, Z+2	; 0x02
    396a:	93 81       	ldd	r25, Z+3	; 0x03
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	3f ef       	ldi	r19, 0xFF	; 255
    3970:	4f e7       	ldi	r20, 0x7F	; 127
    3972:	57 e4       	ldi	r21, 0x47	; 71
    3974:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3978:	18 16       	cp	r1, r24
    397a:	0c f0       	brlt	.+2      	; 0x397e <login+0x5e4>
    397c:	43 c0       	rjmp	.+134    	; 0x3a04 <login+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    397e:	fe 01       	movw	r30, r28
    3980:	e3 59       	subi	r30, 0x93	; 147
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	60 81       	ld	r22, Z
    3986:	71 81       	ldd	r23, Z+1	; 0x01
    3988:	82 81       	ldd	r24, Z+2	; 0x02
    398a:	93 81       	ldd	r25, Z+3	; 0x03
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e2       	ldi	r20, 0x20	; 32
    3992:	51 e4       	ldi	r21, 0x41	; 65
    3994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	8e 01       	movw	r16, r28
    399e:	09 59       	subi	r16, 0x99	; 153
    39a0:	1f 4f       	sbci	r17, 0xFF	; 255
    39a2:	bc 01       	movw	r22, r24
    39a4:	cd 01       	movw	r24, r26
    39a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	f8 01       	movw	r30, r16
    39b0:	91 83       	std	Z+1, r25	; 0x01
    39b2:	80 83       	st	Z, r24
    39b4:	1f c0       	rjmp	.+62     	; 0x39f4 <login+0x65a>
    39b6:	fe 01       	movw	r30, r28
    39b8:	eb 59       	subi	r30, 0x9B	; 155
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	89 e1       	ldi	r24, 0x19	; 25
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	80 83       	st	Z, r24
    39c4:	fe 01       	movw	r30, r28
    39c6:	eb 59       	subi	r30, 0x9B	; 155
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 81       	ld	r24, Z
    39cc:	91 81       	ldd	r25, Z+1	; 0x01
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <login+0x634>
    39d2:	fe 01       	movw	r30, r28
    39d4:	eb 59       	subi	r30, 0x9B	; 155
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	91 83       	std	Z+1, r25	; 0x01
    39da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39dc:	de 01       	movw	r26, r28
    39de:	a9 59       	subi	r26, 0x99	; 153
    39e0:	bf 4f       	sbci	r27, 0xFF	; 255
    39e2:	fe 01       	movw	r30, r28
    39e4:	e9 59       	subi	r30, 0x99	; 153
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	11 96       	adiw	r26, 0x01	; 1
    39f0:	9c 93       	st	X, r25
    39f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f4:	fe 01       	movw	r30, r28
    39f6:	e9 59       	subi	r30, 0x99	; 153
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	d1 f6       	brne	.-76     	; 0x39b6 <login+0x61c>
    3a02:	27 c0       	rjmp	.+78     	; 0x3a52 <login+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a04:	8e 01       	movw	r16, r28
    3a06:	09 59       	subi	r16, 0x99	; 153
    3a08:	1f 4f       	sbci	r17, 0xFF	; 255
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e7 59       	subi	r30, 0x97	; 151
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	82 81       	ldd	r24, Z+2	; 0x02
    3a16:	93 81       	ldd	r25, Z+3	; 0x03
    3a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	f8 01       	movw	r30, r16
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
    3a26:	de 01       	movw	r26, r28
    3a28:	ad 59       	subi	r26, 0x9D	; 157
    3a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e9 59       	subi	r30, 0x99	; 153
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	8d 93       	st	X+, r24
    3a38:	9c 93       	st	X, r25
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	ed 59       	subi	r30, 0x9D	; 157
    3a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a40:	80 81       	ld	r24, Z
    3a42:	91 81       	ldd	r25, Z+1	; 0x01
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	f1 f7       	brne	.-4      	; 0x3a44 <login+0x6aa>
    3a48:	fe 01       	movw	r30, r28
    3a4a:	ed 59       	subi	r30, 0x9D	; 157
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	91 83       	std	Z+1, r25	; 0x01
    3a50:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	65 e0       	ldi	r22, 0x05	; 5
    3a56:	41 e0       	ldi	r20, 0x01	; 1
    3a58:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	e1 5a       	subi	r30, 0xA1	; 161
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	a8 e4       	ldi	r26, 0x48	; 72
    3a68:	b3 e4       	ldi	r27, 0x43	; 67
    3a6a:	80 83       	st	Z, r24
    3a6c:	91 83       	std	Z+1, r25	; 0x01
    3a6e:	a2 83       	std	Z+2, r26	; 0x02
    3a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a72:	8e 01       	movw	r16, r28
    3a74:	05 5a       	subi	r16, 0xA5	; 165
    3a76:	1f 4f       	sbci	r17, 0xFF	; 255
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e1 5a       	subi	r30, 0xA1	; 161
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	60 81       	ld	r22, Z
    3a80:	71 81       	ldd	r23, Z+1	; 0x01
    3a82:	82 81       	ldd	r24, Z+2	; 0x02
    3a84:	93 81       	ldd	r25, Z+3	; 0x03
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	4a e7       	ldi	r20, 0x7A	; 122
    3a8c:	53 e4       	ldi	r21, 0x43	; 67
    3a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	f8 01       	movw	r30, r16
    3a98:	80 83       	st	Z, r24
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	a2 83       	std	Z+2, r26	; 0x02
    3a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e5 5a       	subi	r30, 0xA5	; 165
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	60 81       	ld	r22, Z
    3aa8:	71 81       	ldd	r23, Z+1	; 0x01
    3aaa:	82 81       	ldd	r24, Z+2	; 0x02
    3aac:	93 81       	ldd	r25, Z+3	; 0x03
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	40 e8       	ldi	r20, 0x80	; 128
    3ab4:	5f e3       	ldi	r21, 0x3F	; 63
    3ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aba:	88 23       	and	r24, r24
    3abc:	44 f4       	brge	.+16     	; 0x3ace <login+0x734>
		__ticks = 1;
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e7 5a       	subi	r30, 0xA7	; 167
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	80 83       	st	Z, r24
    3acc:	64 c0       	rjmp	.+200    	; 0x3b96 <login+0x7fc>
	else if (__tmp > 65535)
    3ace:	fe 01       	movw	r30, r28
    3ad0:	e5 5a       	subi	r30, 0xA5	; 165
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	60 81       	ld	r22, Z
    3ad6:	71 81       	ldd	r23, Z+1	; 0x01
    3ad8:	82 81       	ldd	r24, Z+2	; 0x02
    3ada:	93 81       	ldd	r25, Z+3	; 0x03
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	3f ef       	ldi	r19, 0xFF	; 255
    3ae0:	4f e7       	ldi	r20, 0x7F	; 127
    3ae2:	57 e4       	ldi	r21, 0x47	; 71
    3ae4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ae8:	18 16       	cp	r1, r24
    3aea:	0c f0       	brlt	.+2      	; 0x3aee <login+0x754>
    3aec:	43 c0       	rjmp	.+134    	; 0x3b74 <login+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aee:	fe 01       	movw	r30, r28
    3af0:	e1 5a       	subi	r30, 0xA1	; 161
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	60 81       	ld	r22, Z
    3af6:	71 81       	ldd	r23, Z+1	; 0x01
    3af8:	82 81       	ldd	r24, Z+2	; 0x02
    3afa:	93 81       	ldd	r25, Z+3	; 0x03
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	40 e2       	ldi	r20, 0x20	; 32
    3b02:	51 e4       	ldi	r21, 0x41	; 65
    3b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	8e 01       	movw	r16, r28
    3b0e:	07 5a       	subi	r16, 0xA7	; 167
    3b10:	1f 4f       	sbci	r17, 0xFF	; 255
    3b12:	bc 01       	movw	r22, r24
    3b14:	cd 01       	movw	r24, r26
    3b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	f8 01       	movw	r30, r16
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	80 83       	st	Z, r24
    3b24:	1f c0       	rjmp	.+62     	; 0x3b64 <login+0x7ca>
    3b26:	fe 01       	movw	r30, r28
    3b28:	e9 5a       	subi	r30, 0xA9	; 169
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	89 e1       	ldi	r24, 0x19	; 25
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	91 83       	std	Z+1, r25	; 0x01
    3b32:	80 83       	st	Z, r24
    3b34:	fe 01       	movw	r30, r28
    3b36:	e9 5a       	subi	r30, 0xA9	; 169
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 81       	ld	r24, Z
    3b3c:	91 81       	ldd	r25, Z+1	; 0x01
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	f1 f7       	brne	.-4      	; 0x3b3e <login+0x7a4>
    3b42:	fe 01       	movw	r30, r28
    3b44:	e9 5a       	subi	r30, 0xA9	; 169
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4c:	de 01       	movw	r26, r28
    3b4e:	a7 5a       	subi	r26, 0xA7	; 167
    3b50:	bf 4f       	sbci	r27, 0xFF	; 255
    3b52:	fe 01       	movw	r30, r28
    3b54:	e7 5a       	subi	r30, 0xA7	; 167
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	80 81       	ld	r24, Z
    3b5a:	91 81       	ldd	r25, Z+1	; 0x01
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	11 96       	adiw	r26, 0x01	; 1
    3b60:	9c 93       	st	X, r25
    3b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b64:	fe 01       	movw	r30, r28
    3b66:	e7 5a       	subi	r30, 0xA7	; 167
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	80 81       	ld	r24, Z
    3b6c:	91 81       	ldd	r25, Z+1	; 0x01
    3b6e:	00 97       	sbiw	r24, 0x00	; 0
    3b70:	d1 f6       	brne	.-76     	; 0x3b26 <login+0x78c>
    3b72:	27 c0       	rjmp	.+78     	; 0x3bc2 <login+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b74:	8e 01       	movw	r16, r28
    3b76:	07 5a       	subi	r16, 0xA7	; 167
    3b78:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e5 5a       	subi	r30, 0xA5	; 165
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	60 81       	ld	r22, Z
    3b82:	71 81       	ldd	r23, Z+1	; 0x01
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	f8 01       	movw	r30, r16
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
    3b96:	de 01       	movw	r26, r28
    3b98:	ab 5a       	subi	r26, 0xAB	; 171
    3b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e7 5a       	subi	r30, 0xA7	; 167
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	8d 93       	st	X+, r24
    3ba8:	9c 93       	st	X, r25
    3baa:	fe 01       	movw	r30, r28
    3bac:	eb 5a       	subi	r30, 0xAB	; 171
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	80 81       	ld	r24, Z
    3bb2:	91 81       	ldd	r25, Z+1	; 0x01
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	f1 f7       	brne	.-4      	; 0x3bb4 <login+0x81a>
    3bb8:	fe 01       	movw	r30, r28
    3bba:	eb 5a       	subi	r30, 0xAB	; 171
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	91 83       	std	Z+1, r25	; 0x01
    3bc0:	80 83       	st	Z, r24
													_delay_ms(200);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    3bc2:	82 e0       	ldi	r24, 0x02	; 2
    3bc4:	64 e0       	ldi	r22, 0x04	; 4
    3bc6:	40 e0       	ldi	r20, 0x00	; 0
    3bc8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	65 e0       	ldi	r22, 0x05	; 5
    3bd0:	41 e0       	ldi	r20, 0x01	; 1
    3bd2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	ef 5a       	subi	r30, 0xAF	; 175
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	aa ef       	ldi	r26, 0xFA	; 250
    3be2:	b4 e4       	ldi	r27, 0x44	; 68
    3be4:	80 83       	st	Z, r24
    3be6:	91 83       	std	Z+1, r25	; 0x01
    3be8:	a2 83       	std	Z+2, r26	; 0x02
    3bea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bec:	8e 01       	movw	r16, r28
    3bee:	03 5b       	subi	r16, 0xB3	; 179
    3bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	ef 5a       	subi	r30, 0xAF	; 175
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	4a e7       	ldi	r20, 0x7A	; 122
    3c06:	53 e4       	ldi	r21, 0x43	; 67
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	f8 01       	movw	r30, r16
    3c12:	80 83       	st	Z, r24
    3c14:	91 83       	std	Z+1, r25	; 0x01
    3c16:	a2 83       	std	Z+2, r26	; 0x02
    3c18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e3 5b       	subi	r30, 0xB3	; 179
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	60 81       	ld	r22, Z
    3c22:	71 81       	ldd	r23, Z+1	; 0x01
    3c24:	82 81       	ldd	r24, Z+2	; 0x02
    3c26:	93 81       	ldd	r25, Z+3	; 0x03
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e8       	ldi	r20, 0x80	; 128
    3c2e:	5f e3       	ldi	r21, 0x3F	; 63
    3c30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c34:	88 23       	and	r24, r24
    3c36:	44 f4       	brge	.+16     	; 0x3c48 <login+0x8ae>
		__ticks = 1;
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e5 5b       	subi	r30, 0xB5	; 181
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	91 83       	std	Z+1, r25	; 0x01
    3c44:	80 83       	st	Z, r24
    3c46:	64 c0       	rjmp	.+200    	; 0x3d10 <login+0x976>
	else if (__tmp > 65535)
    3c48:	fe 01       	movw	r30, r28
    3c4a:	e3 5b       	subi	r30, 0xB3	; 179
    3c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	82 81       	ldd	r24, Z+2	; 0x02
    3c54:	93 81       	ldd	r25, Z+3	; 0x03
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	3f ef       	ldi	r19, 0xFF	; 255
    3c5a:	4f e7       	ldi	r20, 0x7F	; 127
    3c5c:	57 e4       	ldi	r21, 0x47	; 71
    3c5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c62:	18 16       	cp	r1, r24
    3c64:	0c f0       	brlt	.+2      	; 0x3c68 <login+0x8ce>
    3c66:	43 c0       	rjmp	.+134    	; 0x3cee <login+0x954>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c68:	fe 01       	movw	r30, r28
    3c6a:	ef 5a       	subi	r30, 0xAF	; 175
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	60 81       	ld	r22, Z
    3c70:	71 81       	ldd	r23, Z+1	; 0x01
    3c72:	82 81       	ldd	r24, Z+2	; 0x02
    3c74:	93 81       	ldd	r25, Z+3	; 0x03
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e2       	ldi	r20, 0x20	; 32
    3c7c:	51 e4       	ldi	r21, 0x41	; 65
    3c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	8e 01       	movw	r16, r28
    3c88:	05 5b       	subi	r16, 0xB5	; 181
    3c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8c:	bc 01       	movw	r22, r24
    3c8e:	cd 01       	movw	r24, r26
    3c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	f8 01       	movw	r30, r16
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	80 83       	st	Z, r24
    3c9e:	1f c0       	rjmp	.+62     	; 0x3cde <login+0x944>
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e7 5b       	subi	r30, 0xB7	; 183
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	89 e1       	ldi	r24, 0x19	; 25
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	91 83       	std	Z+1, r25	; 0x01
    3cac:	80 83       	st	Z, r24
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e7 5b       	subi	r30, 0xB7	; 183
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	80 81       	ld	r24, Z
    3cb6:	91 81       	ldd	r25, Z+1	; 0x01
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	f1 f7       	brne	.-4      	; 0x3cb8 <login+0x91e>
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	e7 5b       	subi	r30, 0xB7	; 183
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc6:	de 01       	movw	r26, r28
    3cc8:	a5 5b       	subi	r26, 0xB5	; 181
    3cca:	bf 4f       	sbci	r27, 0xFF	; 255
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e5 5b       	subi	r30, 0xB5	; 181
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	80 81       	ld	r24, Z
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	11 96       	adiw	r26, 0x01	; 1
    3cda:	9c 93       	st	X, r25
    3cdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	fe 01       	movw	r30, r28
    3ce0:	e5 5b       	subi	r30, 0xB5	; 181
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	80 81       	ld	r24, Z
    3ce6:	91 81       	ldd	r25, Z+1	; 0x01
    3ce8:	00 97       	sbiw	r24, 0x00	; 0
    3cea:	d1 f6       	brne	.-76     	; 0x3ca0 <login+0x906>
    3cec:	27 c0       	rjmp	.+78     	; 0x3d3c <login+0x9a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cee:	8e 01       	movw	r16, r28
    3cf0:	05 5b       	subi	r16, 0xB5	; 181
    3cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e3 5b       	subi	r30, 0xB3	; 179
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	f8 01       	movw	r30, r16
    3d0c:	91 83       	std	Z+1, r25	; 0x01
    3d0e:	80 83       	st	Z, r24
    3d10:	de 01       	movw	r26, r28
    3d12:	a9 5b       	subi	r26, 0xB9	; 185
    3d14:	bf 4f       	sbci	r27, 0xFF	; 255
    3d16:	fe 01       	movw	r30, r28
    3d18:	e5 5b       	subi	r30, 0xB5	; 181
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	80 81       	ld	r24, Z
    3d1e:	91 81       	ldd	r25, Z+1	; 0x01
    3d20:	8d 93       	st	X+, r24
    3d22:	9c 93       	st	X, r25
    3d24:	fe 01       	movw	r30, r28
    3d26:	e9 5b       	subi	r30, 0xB9	; 185
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	80 81       	ld	r24, Z
    3d2c:	91 81       	ldd	r25, Z+1	; 0x01
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	f1 f7       	brne	.-4      	; 0x3d2e <login+0x994>
    3d32:	fe 01       	movw	r30, r28
    3d34:	e9 5b       	subi	r30, 0xB9	; 185
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    3d3c:	82 e0       	ldi	r24, 0x02	; 2
    3d3e:	63 e0       	ldi	r22, 0x03	; 3
    3d40:	41 e0       	ldi	r20, 0x01	; 1
    3d42:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    3d46:	82 e0       	ldi	r24, 0x02	; 2
    3d48:	65 e0       	ldi	r22, 0x05	; 5
    3d4a:	40 e0       	ldi	r20, 0x00	; 0
    3d4c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3d50:	ed cb       	rjmp	.-2086   	; 0x352c <login+0x192>

											}

										break;}
									}
									else if(Local_u8Key=='2'){
    3d52:	fe 01       	movw	r30, r28
    3d54:	e2 57       	subi	r30, 0x72	; 114
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	80 81       	ld	r24, Z
    3d5a:	82 33       	cpi	r24, 0x32	; 50
    3d5c:	09 f0       	breq	.+2      	; 0x3d60 <login+0x9c6>
    3d5e:	e6 cb       	rjmp	.-2100   	; 0x352c <login+0x192>
										LCD_voideInit();
    3d60:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>
							            LCD_PrintString("1-90 2-180 3-270");
    3d64:	8f e8       	ldi	r24, 0x8F	; 143
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
							            LCD_voidSendCmnd(0xC0);
    3d6c:	80 ec       	ldi	r24, 0xC0	; 192
    3d6e:	0e 94 43 11 	call	0x2286	; 0x2286 <LCD_voidSendCmnd>
							            LCD_PrintString("4-360");
    3d72:	80 ea       	ldi	r24, 0xA0	; 160
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
										while(1){
											KPD_u8GetKeyState(&Local_u8Key);
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	82 57       	subi	r24, 0x72	; 114
    3d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d80:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KPD_u8GetKeyState>
											if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3d84:	fe 01       	movw	r30, r28
    3d86:	e2 57       	subi	r30, 0x72	; 114
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	80 81       	ld	r24, Z
    3d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    3d8e:	09 f4       	brne	.+2      	; 0x3d92 <login+0x9f8>
    3d90:	cd cb       	rjmp	.-2150   	; 0x352c <login+0x192>
												if(Local_u8Key=='1'){
    3d92:	fe 01       	movw	r30, r28
    3d94:	e2 57       	subi	r30, 0x72	; 114
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 81       	ld	r24, Z
    3d9a:	81 33       	cpi	r24, 0x31	; 49
    3d9c:	09 f0       	breq	.+2      	; 0x3da0 <login+0xa06>
    3d9e:	90 c0       	rjmp	.+288    	; 0x3ec0 <login+0xb26>
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    3da0:	82 e0       	ldi	r24, 0x02	; 2
    3da2:	66 e0       	ldi	r22, 0x06	; 6
    3da4:	41 e0       	ldi	r20, 0x01	; 1
    3da6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3daa:	fe 01       	movw	r30, r28
    3dac:	ed 5b       	subi	r30, 0xBD	; 189
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	a8 e4       	ldi	r26, 0x48	; 72
    3db6:	b3 e4       	ldi	r27, 0x43	; 67
    3db8:	80 83       	st	Z, r24
    3dba:	91 83       	std	Z+1, r25	; 0x01
    3dbc:	a2 83       	std	Z+2, r26	; 0x02
    3dbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc0:	8e 01       	movw	r16, r28
    3dc2:	01 5c       	subi	r16, 0xC1	; 193
    3dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	ed 5b       	subi	r30, 0xBD	; 189
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	60 81       	ld	r22, Z
    3dce:	71 81       	ldd	r23, Z+1	; 0x01
    3dd0:	82 81       	ldd	r24, Z+2	; 0x02
    3dd2:	93 81       	ldd	r25, Z+3	; 0x03
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	4a e7       	ldi	r20, 0x7A	; 122
    3dda:	53 e4       	ldi	r21, 0x43	; 67
    3ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	f8 01       	movw	r30, r16
    3de6:	80 83       	st	Z, r24
    3de8:	91 83       	std	Z+1, r25	; 0x01
    3dea:	a2 83       	std	Z+2, r26	; 0x02
    3dec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dee:	fe 01       	movw	r30, r28
    3df0:	ff 96       	adiw	r30, 0x3f	; 63
    3df2:	60 81       	ld	r22, Z
    3df4:	71 81       	ldd	r23, Z+1	; 0x01
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e8       	ldi	r20, 0x80	; 128
    3e00:	5f e3       	ldi	r21, 0x3F	; 63
    3e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	2c f4       	brge	.+10     	; 0x3e14 <login+0xa7a>
		__ticks = 1;
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	9e af       	std	Y+62, r25	; 0x3e
    3e10:	8d af       	std	Y+61, r24	; 0x3d
    3e12:	46 c0       	rjmp	.+140    	; 0x3ea0 <login+0xb06>
	else if (__tmp > 65535)
    3e14:	fe 01       	movw	r30, r28
    3e16:	ff 96       	adiw	r30, 0x3f	; 63
    3e18:	60 81       	ld	r22, Z
    3e1a:	71 81       	ldd	r23, Z+1	; 0x01
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	3f ef       	ldi	r19, 0xFF	; 255
    3e24:	4f e7       	ldi	r20, 0x7F	; 127
    3e26:	57 e4       	ldi	r21, 0x47	; 71
    3e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e2c:	18 16       	cp	r1, r24
    3e2e:	64 f5       	brge	.+88     	; 0x3e88 <login+0xaee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e30:	fe 01       	movw	r30, r28
    3e32:	ed 5b       	subi	r30, 0xBD	; 189
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	60 81       	ld	r22, Z
    3e38:	71 81       	ldd	r23, Z+1	; 0x01
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	93 81       	ldd	r25, Z+3	; 0x03
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e2       	ldi	r20, 0x20	; 32
    3e44:	51 e4       	ldi	r21, 0x41	; 65
    3e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	bc 01       	movw	r22, r24
    3e50:	cd 01       	movw	r24, r26
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9e af       	std	Y+62, r25	; 0x3e
    3e5c:	8d af       	std	Y+61, r24	; 0x3d
    3e5e:	0f c0       	rjmp	.+30     	; 0x3e7e <login+0xae4>
    3e60:	89 e1       	ldi	r24, 0x19	; 25
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	9c af       	std	Y+60, r25	; 0x3c
    3e66:	8b af       	std	Y+59, r24	; 0x3b
    3e68:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	f1 f7       	brne	.-4      	; 0x3e6c <login+0xad2>
    3e70:	9c af       	std	Y+60, r25	; 0x3c
    3e72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e74:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e76:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	9e af       	std	Y+62, r25	; 0x3e
    3e7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e80:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	69 f7       	brne	.-38     	; 0x3e60 <login+0xac6>
    3e86:	16 c0       	rjmp	.+44     	; 0x3eb4 <login+0xb1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e88:	fe 01       	movw	r30, r28
    3e8a:	ff 96       	adiw	r30, 0x3f	; 63
    3e8c:	60 81       	ld	r22, Z
    3e8e:	71 81       	ldd	r23, Z+1	; 0x01
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	9e af       	std	Y+62, r25	; 0x3e
    3e9e:	8d af       	std	Y+61, r24	; 0x3d
    3ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ea4:	9a af       	std	Y+58, r25	; 0x3a
    3ea6:	89 af       	std	Y+57, r24	; 0x39
    3ea8:	89 ad       	ldd	r24, Y+57	; 0x39
    3eaa:	9a ad       	ldd	r25, Y+58	; 0x3a
    3eac:	01 97       	sbiw	r24, 0x01	; 1
    3eae:	f1 f7       	brne	.-4      	; 0x3eac <login+0xb12>
    3eb0:	9a af       	std	Y+58, r25	; 0x3a
    3eb2:	89 af       	std	Y+57, r24	; 0x39
												_delay_ms(200);
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3eb4:	82 e0       	ldi	r24, 0x02	; 2
    3eb6:	65 e0       	ldi	r22, 0x05	; 5
    3eb8:	41 e0       	ldi	r20, 0x01	; 1
    3eba:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3ebe:	36 cb       	rjmp	.-2452   	; 0x352c <login+0x192>
												break;
												}
												else if (Local_u8Key=='2')
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	e2 57       	subi	r30, 0x72	; 114
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	80 81       	ld	r24, Z
    3ec8:	82 33       	cpi	r24, 0x32	; 50
    3eca:	59 f4       	brne	.+22     	; 0x3ee2 <login+0xb48>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3ecc:	82 e0       	ldi	r24, 0x02	; 2
    3ece:	65 e0       	ldi	r22, 0x05	; 5
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	64 e0       	ldi	r22, 0x04	; 4
    3eda:	41 e0       	ldi	r20, 0x01	; 1
    3edc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3ee0:	25 cb       	rjmp	.-2486   	; 0x352c <login+0x192>
													break;
												}
												else if (Local_u8Key=='3')
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e2 57       	subi	r30, 0x72	; 114
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	83 33       	cpi	r24, 0x33	; 51
    3eec:	09 f0       	breq	.+2      	; 0x3ef0 <login+0xb56>
    3eee:	87 c0       	rjmp	.+270    	; 0x3ffe <login+0xc64>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3ef0:	82 e0       	ldi	r24, 0x02	; 2
    3ef2:	65 e0       	ldi	r22, 0x05	; 5
    3ef4:	41 e0       	ldi	r20, 0x01	; 1
    3ef6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	64 e0       	ldi	r22, 0x04	; 4
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	aa ef       	ldi	r26, 0xFA	; 250
    3f0a:	b4 e4       	ldi	r27, 0x44	; 68
    3f0c:	8d ab       	std	Y+53, r24	; 0x35
    3f0e:	9e ab       	std	Y+54, r25	; 0x36
    3f10:	af ab       	std	Y+55, r26	; 0x37
    3f12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f14:	6d a9       	ldd	r22, Y+53	; 0x35
    3f16:	7e a9       	ldd	r23, Y+54	; 0x36
    3f18:	8f a9       	ldd	r24, Y+55	; 0x37
    3f1a:	98 ad       	ldd	r25, Y+56	; 0x38
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	4a e7       	ldi	r20, 0x7A	; 122
    3f22:	53 e4       	ldi	r21, 0x43	; 67
    3f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	89 ab       	std	Y+49, r24	; 0x31
    3f2e:	9a ab       	std	Y+50, r25	; 0x32
    3f30:	ab ab       	std	Y+51, r26	; 0x33
    3f32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f34:	69 a9       	ldd	r22, Y+49	; 0x31
    3f36:	7a a9       	ldd	r23, Y+50	; 0x32
    3f38:	8b a9       	ldd	r24, Y+51	; 0x33
    3f3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e8       	ldi	r20, 0x80	; 128
    3f42:	5f e3       	ldi	r21, 0x3F	; 63
    3f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f48:	88 23       	and	r24, r24
    3f4a:	2c f4       	brge	.+10     	; 0x3f56 <login+0xbbc>
		__ticks = 1;
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	98 ab       	std	Y+48, r25	; 0x30
    3f52:	8f a7       	std	Y+47, r24	; 0x2f
    3f54:	3f c0       	rjmp	.+126    	; 0x3fd4 <login+0xc3a>
	else if (__tmp > 65535)
    3f56:	69 a9       	ldd	r22, Y+49	; 0x31
    3f58:	7a a9       	ldd	r23, Y+50	; 0x32
    3f5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3f5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	3f ef       	ldi	r19, 0xFF	; 255
    3f62:	4f e7       	ldi	r20, 0x7F	; 127
    3f64:	57 e4       	ldi	r21, 0x47	; 71
    3f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f6a:	18 16       	cp	r1, r24
    3f6c:	4c f5       	brge	.+82     	; 0x3fc0 <login+0xc26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6e:	6d a9       	ldd	r22, Y+53	; 0x35
    3f70:	7e a9       	ldd	r23, Y+54	; 0x36
    3f72:	8f a9       	ldd	r24, Y+55	; 0x37
    3f74:	98 ad       	ldd	r25, Y+56	; 0x38
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e2       	ldi	r20, 0x20	; 32
    3f7c:	51 e4       	ldi	r21, 0x41	; 65
    3f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	bc 01       	movw	r22, r24
    3f88:	cd 01       	movw	r24, r26
    3f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	98 ab       	std	Y+48, r25	; 0x30
    3f94:	8f a7       	std	Y+47, r24	; 0x2f
    3f96:	0f c0       	rjmp	.+30     	; 0x3fb6 <login+0xc1c>
    3f98:	89 e1       	ldi	r24, 0x19	; 25
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	9e a7       	std	Y+46, r25	; 0x2e
    3f9e:	8d a7       	std	Y+45, r24	; 0x2d
    3fa0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3fa2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <login+0xc0a>
    3fa8:	9e a7       	std	Y+46, r25	; 0x2e
    3faa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fac:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fae:	98 a9       	ldd	r25, Y+48	; 0x30
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	98 ab       	std	Y+48, r25	; 0x30
    3fb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	69 f7       	brne	.-38     	; 0x3f98 <login+0xbfe>
    3fbe:	14 c0       	rjmp	.+40     	; 0x3fe8 <login+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc0:	69 a9       	ldd	r22, Y+49	; 0x31
    3fc2:	7a a9       	ldd	r23, Y+50	; 0x32
    3fc4:	8b a9       	ldd	r24, Y+51	; 0x33
    3fc6:	9c a9       	ldd	r25, Y+52	; 0x34
    3fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	98 ab       	std	Y+48, r25	; 0x30
    3fd2:	8f a7       	std	Y+47, r24	; 0x2f
    3fd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fd6:	98 a9       	ldd	r25, Y+48	; 0x30
    3fd8:	9c a7       	std	Y+44, r25	; 0x2c
    3fda:	8b a7       	std	Y+43, r24	; 0x2b
    3fdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fde:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	f1 f7       	brne	.-4      	; 0x3fe0 <login+0xc46>
    3fe4:	9c a7       	std	Y+44, r25	; 0x2c
    3fe6:	8b a7       	std	Y+43, r24	; 0x2b
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    3fe8:	82 e0       	ldi	r24, 0x02	; 2
    3fea:	65 e0       	ldi	r22, 0x05	; 5
    3fec:	40 e0       	ldi	r20, 0x00	; 0
    3fee:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    3ff2:	82 e0       	ldi	r24, 0x02	; 2
    3ff4:	63 e0       	ldi	r22, 0x03	; 3
    3ff6:	41 e0       	ldi	r20, 0x01	; 1
    3ff8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    3ffc:	97 ca       	rjmp	.-2770   	; 0x352c <login+0x192>
													break;
												}
												else if (Local_u8Key=='4')
    3ffe:	fe 01       	movw	r30, r28
    4000:	e2 57       	subi	r30, 0x72	; 114
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	84 33       	cpi	r24, 0x34	; 52
    4008:	09 f0       	breq	.+2      	; 0x400c <login+0xc72>
    400a:	90 ca       	rjmp	.-2784   	; 0x352c <login+0x192>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    400c:	82 e0       	ldi	r24, 0x02	; 2
    400e:	65 e0       	ldi	r22, 0x05	; 5
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	66 e0       	ldi	r22, 0x06	; 6
    401a:	41 e0       	ldi	r20, 0x01	; 1
    401c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	aa ef       	ldi	r26, 0xFA	; 250
    4026:	b4 e4       	ldi	r27, 0x44	; 68
    4028:	8f a3       	std	Y+39, r24	; 0x27
    402a:	98 a7       	std	Y+40, r25	; 0x28
    402c:	a9 a7       	std	Y+41, r26	; 0x29
    402e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4030:	6f a1       	ldd	r22, Y+39	; 0x27
    4032:	78 a5       	ldd	r23, Y+40	; 0x28
    4034:	89 a5       	ldd	r24, Y+41	; 0x29
    4036:	9a a5       	ldd	r25, Y+42	; 0x2a
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	4a e7       	ldi	r20, 0x7A	; 122
    403e:	53 e4       	ldi	r21, 0x43	; 67
    4040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	8b a3       	std	Y+35, r24	; 0x23
    404a:	9c a3       	std	Y+36, r25	; 0x24
    404c:	ad a3       	std	Y+37, r26	; 0x25
    404e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4050:	6b a1       	ldd	r22, Y+35	; 0x23
    4052:	7c a1       	ldd	r23, Y+36	; 0x24
    4054:	8d a1       	ldd	r24, Y+37	; 0x25
    4056:	9e a1       	ldd	r25, Y+38	; 0x26
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e8       	ldi	r20, 0x80	; 128
    405e:	5f e3       	ldi	r21, 0x3F	; 63
    4060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4064:	88 23       	and	r24, r24
    4066:	2c f4       	brge	.+10     	; 0x4072 <login+0xcd8>
		__ticks = 1;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	9a a3       	std	Y+34, r25	; 0x22
    406e:	89 a3       	std	Y+33, r24	; 0x21
    4070:	3f c0       	rjmp	.+126    	; 0x40f0 <login+0xd56>
	else if (__tmp > 65535)
    4072:	6b a1       	ldd	r22, Y+35	; 0x23
    4074:	7c a1       	ldd	r23, Y+36	; 0x24
    4076:	8d a1       	ldd	r24, Y+37	; 0x25
    4078:	9e a1       	ldd	r25, Y+38	; 0x26
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	3f ef       	ldi	r19, 0xFF	; 255
    407e:	4f e7       	ldi	r20, 0x7F	; 127
    4080:	57 e4       	ldi	r21, 0x47	; 71
    4082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4086:	18 16       	cp	r1, r24
    4088:	4c f5       	brge	.+82     	; 0x40dc <login+0xd42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408a:	6f a1       	ldd	r22, Y+39	; 0x27
    408c:	78 a5       	ldd	r23, Y+40	; 0x28
    408e:	89 a5       	ldd	r24, Y+41	; 0x29
    4090:	9a a5       	ldd	r25, Y+42	; 0x2a
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	40 e2       	ldi	r20, 0x20	; 32
    4098:	51 e4       	ldi	r21, 0x41	; 65
    409a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	bc 01       	movw	r22, r24
    40a4:	cd 01       	movw	r24, r26
    40a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	9a a3       	std	Y+34, r25	; 0x22
    40b0:	89 a3       	std	Y+33, r24	; 0x21
    40b2:	0f c0       	rjmp	.+30     	; 0x40d2 <login+0xd38>
    40b4:	89 e1       	ldi	r24, 0x19	; 25
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	98 a3       	std	Y+32, r25	; 0x20
    40ba:	8f 8f       	std	Y+31, r24	; 0x1f
    40bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40be:	98 a1       	ldd	r25, Y+32	; 0x20
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <login+0xd26>
    40c4:	98 a3       	std	Y+32, r25	; 0x20
    40c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c8:	89 a1       	ldd	r24, Y+33	; 0x21
    40ca:	9a a1       	ldd	r25, Y+34	; 0x22
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	9a a3       	std	Y+34, r25	; 0x22
    40d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d2:	89 a1       	ldd	r24, Y+33	; 0x21
    40d4:	9a a1       	ldd	r25, Y+34	; 0x22
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	69 f7       	brne	.-38     	; 0x40b4 <login+0xd1a>
    40da:	14 c0       	rjmp	.+40     	; 0x4104 <login+0xd6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40dc:	6b a1       	ldd	r22, Y+35	; 0x23
    40de:	7c a1       	ldd	r23, Y+36	; 0x24
    40e0:	8d a1       	ldd	r24, Y+37	; 0x25
    40e2:	9e a1       	ldd	r25, Y+38	; 0x26
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	9a a3       	std	Y+34, r25	; 0x22
    40ee:	89 a3       	std	Y+33, r24	; 0x21
    40f0:	89 a1       	ldd	r24, Y+33	; 0x21
    40f2:	9a a1       	ldd	r25, Y+34	; 0x22
    40f4:	9e 8f       	std	Y+30, r25	; 0x1e
    40f6:	8d 8f       	std	Y+29, r24	; 0x1d
    40f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	f1 f7       	brne	.-4      	; 0x40fc <login+0xd62>
    4100:	9e 8f       	std	Y+30, r25	; 0x1e
    4102:	8d 8f       	std	Y+29, r24	; 0x1d
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	64 e0       	ldi	r22, 0x04	; 4
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	a8 e4       	ldi	r26, 0x48	; 72
    4114:	b3 e4       	ldi	r27, 0x43	; 67
    4116:	89 8f       	std	Y+25, r24	; 0x19
    4118:	9a 8f       	std	Y+26, r25	; 0x1a
    411a:	ab 8f       	std	Y+27, r26	; 0x1b
    411c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    411e:	69 8d       	ldd	r22, Y+25	; 0x19
    4120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	4a e7       	ldi	r20, 0x7A	; 122
    412c:	53 e4       	ldi	r21, 0x43	; 67
    412e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	8d 8b       	std	Y+21, r24	; 0x15
    4138:	9e 8b       	std	Y+22, r25	; 0x16
    413a:	af 8b       	std	Y+23, r26	; 0x17
    413c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    413e:	6d 89       	ldd	r22, Y+21	; 0x15
    4140:	7e 89       	ldd	r23, Y+22	; 0x16
    4142:	8f 89       	ldd	r24, Y+23	; 0x17
    4144:	98 8d       	ldd	r25, Y+24	; 0x18
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	40 e8       	ldi	r20, 0x80	; 128
    414c:	5f e3       	ldi	r21, 0x3F	; 63
    414e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4152:	88 23       	and	r24, r24
    4154:	2c f4       	brge	.+10     	; 0x4160 <login+0xdc6>
		__ticks = 1;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	9c 8b       	std	Y+20, r25	; 0x14
    415c:	8b 8b       	std	Y+19, r24	; 0x13
    415e:	3f c0       	rjmp	.+126    	; 0x41de <login+0xe44>
	else if (__tmp > 65535)
    4160:	6d 89       	ldd	r22, Y+21	; 0x15
    4162:	7e 89       	ldd	r23, Y+22	; 0x16
    4164:	8f 89       	ldd	r24, Y+23	; 0x17
    4166:	98 8d       	ldd	r25, Y+24	; 0x18
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	3f ef       	ldi	r19, 0xFF	; 255
    416c:	4f e7       	ldi	r20, 0x7F	; 127
    416e:	57 e4       	ldi	r21, 0x47	; 71
    4170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4174:	18 16       	cp	r1, r24
    4176:	4c f5       	brge	.+82     	; 0x41ca <login+0xe30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4178:	69 8d       	ldd	r22, Y+25	; 0x19
    417a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    417c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    417e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	40 e2       	ldi	r20, 0x20	; 32
    4186:	51 e4       	ldi	r21, 0x41	; 65
    4188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	bc 01       	movw	r22, r24
    4192:	cd 01       	movw	r24, r26
    4194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	9c 8b       	std	Y+20, r25	; 0x14
    419e:	8b 8b       	std	Y+19, r24	; 0x13
    41a0:	0f c0       	rjmp	.+30     	; 0x41c0 <login+0xe26>
    41a2:	89 e1       	ldi	r24, 0x19	; 25
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	9a 8b       	std	Y+18, r25	; 0x12
    41a8:	89 8b       	std	Y+17, r24	; 0x11
    41aa:	89 89       	ldd	r24, Y+17	; 0x11
    41ac:	9a 89       	ldd	r25, Y+18	; 0x12
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <login+0xe14>
    41b2:	9a 8b       	std	Y+18, r25	; 0x12
    41b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b6:	8b 89       	ldd	r24, Y+19	; 0x13
    41b8:	9c 89       	ldd	r25, Y+20	; 0x14
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	9c 8b       	std	Y+20, r25	; 0x14
    41be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c0:	8b 89       	ldd	r24, Y+19	; 0x13
    41c2:	9c 89       	ldd	r25, Y+20	; 0x14
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	69 f7       	brne	.-38     	; 0x41a2 <login+0xe08>
    41c8:	14 c0       	rjmp	.+40     	; 0x41f2 <login+0xe58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ca:	6d 89       	ldd	r22, Y+21	; 0x15
    41cc:	7e 89       	ldd	r23, Y+22	; 0x16
    41ce:	8f 89       	ldd	r24, Y+23	; 0x17
    41d0:	98 8d       	ldd	r25, Y+24	; 0x18
    41d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	9c 8b       	std	Y+20, r25	; 0x14
    41dc:	8b 8b       	std	Y+19, r24	; 0x13
    41de:	8b 89       	ldd	r24, Y+19	; 0x13
    41e0:	9c 89       	ldd	r25, Y+20	; 0x14
    41e2:	98 8b       	std	Y+16, r25	; 0x10
    41e4:	8f 87       	std	Y+15, r24	; 0x0f
    41e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e8:	98 89       	ldd	r25, Y+16	; 0x10
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <login+0xe50>
    41ee:	98 8b       	std	Y+16, r25	; 0x10
    41f0:	8f 87       	std	Y+15, r24	; 0x0f
													_delay_ms(200);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	65 e0       	ldi	r22, 0x05	; 5
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    41fc:	82 e0       	ldi	r24, 0x02	; 2
    41fe:	63 e0       	ldi	r22, 0x03	; 3
    4200:	41 e0       	ldi	r20, 0x01	; 1
    4202:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	aa ef       	ldi	r26, 0xFA	; 250
    420c:	b4 e4       	ldi	r27, 0x44	; 68
    420e:	8b 87       	std	Y+11, r24	; 0x0b
    4210:	9c 87       	std	Y+12, r25	; 0x0c
    4212:	ad 87       	std	Y+13, r26	; 0x0d
    4214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4216:	6b 85       	ldd	r22, Y+11	; 0x0b
    4218:	7c 85       	ldd	r23, Y+12	; 0x0c
    421a:	8d 85       	ldd	r24, Y+13	; 0x0d
    421c:	9e 85       	ldd	r25, Y+14	; 0x0e
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	4a e7       	ldi	r20, 0x7A	; 122
    4224:	53 e4       	ldi	r21, 0x43	; 67
    4226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422a:	dc 01       	movw	r26, r24
    422c:	cb 01       	movw	r24, r22
    422e:	8f 83       	std	Y+7, r24	; 0x07
    4230:	98 87       	std	Y+8, r25	; 0x08
    4232:	a9 87       	std	Y+9, r26	; 0x09
    4234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4236:	6f 81       	ldd	r22, Y+7	; 0x07
    4238:	78 85       	ldd	r23, Y+8	; 0x08
    423a:	89 85       	ldd	r24, Y+9	; 0x09
    423c:	9a 85       	ldd	r25, Y+10	; 0x0a
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	40 e8       	ldi	r20, 0x80	; 128
    4244:	5f e3       	ldi	r21, 0x3F	; 63
    4246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    424a:	88 23       	and	r24, r24
    424c:	2c f4       	brge	.+10     	; 0x4258 <login+0xebe>
		__ticks = 1;
    424e:	81 e0       	ldi	r24, 0x01	; 1
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	9e 83       	std	Y+6, r25	; 0x06
    4254:	8d 83       	std	Y+5, r24	; 0x05
    4256:	3f c0       	rjmp	.+126    	; 0x42d6 <login+0xf3c>
	else if (__tmp > 65535)
    4258:	6f 81       	ldd	r22, Y+7	; 0x07
    425a:	78 85       	ldd	r23, Y+8	; 0x08
    425c:	89 85       	ldd	r24, Y+9	; 0x09
    425e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	3f ef       	ldi	r19, 0xFF	; 255
    4264:	4f e7       	ldi	r20, 0x7F	; 127
    4266:	57 e4       	ldi	r21, 0x47	; 71
    4268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    426c:	18 16       	cp	r1, r24
    426e:	4c f5       	brge	.+82     	; 0x42c2 <login+0xf28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4270:	6b 85       	ldd	r22, Y+11	; 0x0b
    4272:	7c 85       	ldd	r23, Y+12	; 0x0c
    4274:	8d 85       	ldd	r24, Y+13	; 0x0d
    4276:	9e 85       	ldd	r25, Y+14	; 0x0e
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e2       	ldi	r20, 0x20	; 32
    427e:	51 e4       	ldi	r21, 0x41	; 65
    4280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	9e 83       	std	Y+6, r25	; 0x06
    4296:	8d 83       	std	Y+5, r24	; 0x05
    4298:	0f c0       	rjmp	.+30     	; 0x42b8 <login+0xf1e>
    429a:	89 e1       	ldi	r24, 0x19	; 25
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	9c 83       	std	Y+4, r25	; 0x04
    42a0:	8b 83       	std	Y+3, r24	; 0x03
    42a2:	8b 81       	ldd	r24, Y+3	; 0x03
    42a4:	9c 81       	ldd	r25, Y+4	; 0x04
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	f1 f7       	brne	.-4      	; 0x42a6 <login+0xf0c>
    42aa:	9c 83       	std	Y+4, r25	; 0x04
    42ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ae:	8d 81       	ldd	r24, Y+5	; 0x05
    42b0:	9e 81       	ldd	r25, Y+6	; 0x06
    42b2:	01 97       	sbiw	r24, 0x01	; 1
    42b4:	9e 83       	std	Y+6, r25	; 0x06
    42b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ba:	9e 81       	ldd	r25, Y+6	; 0x06
    42bc:	00 97       	sbiw	r24, 0x00	; 0
    42be:	69 f7       	brne	.-38     	; 0x429a <login+0xf00>
    42c0:	14 c0       	rjmp	.+40     	; 0x42ea <login+0xf50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c2:	6f 81       	ldd	r22, Y+7	; 0x07
    42c4:	78 85       	ldd	r23, Y+8	; 0x08
    42c6:	89 85       	ldd	r24, Y+9	; 0x09
    42c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	9e 83       	std	Y+6, r25	; 0x06
    42d4:	8d 83       	std	Y+5, r24	; 0x05
    42d6:	8d 81       	ldd	r24, Y+5	; 0x05
    42d8:	9e 81       	ldd	r25, Y+6	; 0x06
    42da:	9a 83       	std	Y+2, r25	; 0x02
    42dc:	89 83       	std	Y+1, r24	; 0x01
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	01 97       	sbiw	r24, 0x01	; 1
    42e4:	f1 f7       	brne	.-4      	; 0x42e2 <login+0xf48>
    42e6:	9a 83       	std	Y+2, r25	; 0x02
    42e8:	89 83       	std	Y+1, r24	; 0x01
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    42ea:	82 e0       	ldi	r24, 0x02	; 2
    42ec:	66 e0       	ldi	r22, 0x06	; 6
    42ee:	41 e0       	ldi	r20, 0x01	; 1
    42f0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    42f4:	82 e0       	ldi	r24, 0x02	; 2
    42f6:	64 e0       	ldi	r22, 0x04	; 4
    42f8:	40 e0       	ldi	r20, 0x00	; 0
    42fa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <DIO_voidSetPinValue>
    42fe:	16 c9       	rjmp	.-3540   	; 0x352c <login+0x192>

					 }

	}
			  }else{
				LCD_voideInit();
    4300:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <LCD_voideInit>
				  LCD_PrintString("incorrect");
    4304:	86 ea       	ldi	r24, 0xA6	; 166
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_PrintString>
				  break;
			  }

}
}
    430c:	ce 56       	subi	r28, 0x6E	; 110
    430e:	df 4f       	sbci	r29, 0xFF	; 255
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	f8 94       	cli
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	0f be       	out	0x3f, r0	; 63
    4318:	cd bf       	out	0x3d, r28	; 61
    431a:	cf 91       	pop	r28
    431c:	df 91       	pop	r29
    431e:	1f 91       	pop	r17
    4320:	0f 91       	pop	r16
    4322:	08 95       	ret

00004324 <__udivmodsi4>:
    4324:	a1 e2       	ldi	r26, 0x21	; 33
    4326:	1a 2e       	mov	r1, r26
    4328:	aa 1b       	sub	r26, r26
    432a:	bb 1b       	sub	r27, r27
    432c:	fd 01       	movw	r30, r26
    432e:	0d c0       	rjmp	.+26     	; 0x434a <__udivmodsi4_ep>

00004330 <__udivmodsi4_loop>:
    4330:	aa 1f       	adc	r26, r26
    4332:	bb 1f       	adc	r27, r27
    4334:	ee 1f       	adc	r30, r30
    4336:	ff 1f       	adc	r31, r31
    4338:	a2 17       	cp	r26, r18
    433a:	b3 07       	cpc	r27, r19
    433c:	e4 07       	cpc	r30, r20
    433e:	f5 07       	cpc	r31, r21
    4340:	20 f0       	brcs	.+8      	; 0x434a <__udivmodsi4_ep>
    4342:	a2 1b       	sub	r26, r18
    4344:	b3 0b       	sbc	r27, r19
    4346:	e4 0b       	sbc	r30, r20
    4348:	f5 0b       	sbc	r31, r21

0000434a <__udivmodsi4_ep>:
    434a:	66 1f       	adc	r22, r22
    434c:	77 1f       	adc	r23, r23
    434e:	88 1f       	adc	r24, r24
    4350:	99 1f       	adc	r25, r25
    4352:	1a 94       	dec	r1
    4354:	69 f7       	brne	.-38     	; 0x4330 <__udivmodsi4_loop>
    4356:	60 95       	com	r22
    4358:	70 95       	com	r23
    435a:	80 95       	com	r24
    435c:	90 95       	com	r25
    435e:	9b 01       	movw	r18, r22
    4360:	ac 01       	movw	r20, r24
    4362:	bd 01       	movw	r22, r26
    4364:	cf 01       	movw	r24, r30
    4366:	08 95       	ret

00004368 <__prologue_saves__>:
    4368:	2f 92       	push	r2
    436a:	3f 92       	push	r3
    436c:	4f 92       	push	r4
    436e:	5f 92       	push	r5
    4370:	6f 92       	push	r6
    4372:	7f 92       	push	r7
    4374:	8f 92       	push	r8
    4376:	9f 92       	push	r9
    4378:	af 92       	push	r10
    437a:	bf 92       	push	r11
    437c:	cf 92       	push	r12
    437e:	df 92       	push	r13
    4380:	ef 92       	push	r14
    4382:	ff 92       	push	r15
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	ca 1b       	sub	r28, r26
    4392:	db 0b       	sbc	r29, r27
    4394:	0f b6       	in	r0, 0x3f	; 63
    4396:	f8 94       	cli
    4398:	de bf       	out	0x3e, r29	; 62
    439a:	0f be       	out	0x3f, r0	; 63
    439c:	cd bf       	out	0x3d, r28	; 61
    439e:	09 94       	ijmp

000043a0 <__epilogue_restores__>:
    43a0:	2a 88       	ldd	r2, Y+18	; 0x12
    43a2:	39 88       	ldd	r3, Y+17	; 0x11
    43a4:	48 88       	ldd	r4, Y+16	; 0x10
    43a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    43a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    43aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    43ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    43ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    43b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    43b2:	b9 84       	ldd	r11, Y+9	; 0x09
    43b4:	c8 84       	ldd	r12, Y+8	; 0x08
    43b6:	df 80       	ldd	r13, Y+7	; 0x07
    43b8:	ee 80       	ldd	r14, Y+6	; 0x06
    43ba:	fd 80       	ldd	r15, Y+5	; 0x05
    43bc:	0c 81       	ldd	r16, Y+4	; 0x04
    43be:	1b 81       	ldd	r17, Y+3	; 0x03
    43c0:	aa 81       	ldd	r26, Y+2	; 0x02
    43c2:	b9 81       	ldd	r27, Y+1	; 0x01
    43c4:	ce 0f       	add	r28, r30
    43c6:	d1 1d       	adc	r29, r1
    43c8:	0f b6       	in	r0, 0x3f	; 63
    43ca:	f8 94       	cli
    43cc:	de bf       	out	0x3e, r29	; 62
    43ce:	0f be       	out	0x3f, r0	; 63
    43d0:	cd bf       	out	0x3d, r28	; 61
    43d2:	ed 01       	movw	r28, r26
    43d4:	08 95       	ret

000043d6 <_exit>:
    43d6:	f8 94       	cli

000043d8 <__stop_program>:
    43d8:	ff cf       	rjmp	.-2      	; 0x43d8 <__stop_program>
