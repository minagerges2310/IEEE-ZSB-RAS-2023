
Mina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00003eba  00003f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000300c  00000000  00000000  00003fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ce1  00000000  00000000  00006fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00007c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00007ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00007f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00009fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000b0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000c044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000c1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000c486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cd14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <main>
      7a:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 eb       	ldi	r26, 0xB0	; 176
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 eb       	ldi	r24, 0xB0	; 176
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 eb       	ldi	r22, 0xB0	; 176
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DC_Motor_Init>:
#include "DC_interface.h"
#include "DC_Private.h"
#include "DC_Config.h"

void DC_Motor_Init()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor initially
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <DC_Motor_Rotate_Clockwise>:

// Function to rotate the DC motor clockwise
void DC_Motor_Rotate_Clockwise()
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_DIR1, DIO_u8_HIGH); // Set direction pin 1 high
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_LOW);  // Set direction pin 2 low
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <DC_Motor_Rotate_CounterClockwise>:

// Function to rotate the DC motor counter-clockwise
void DC_Motor_Rotate_CounterClockwise()
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);  // Set direction pin 1 low
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_HIGH); // Set direction pin 2 high
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH); // Enable the motor
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	62 e0       	ldi	r22, 0x02	; 2
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <DC_Motor_Stop>:

// Function to stop the DC motor
void DC_Motor_Stop()
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_LOW); // Disable the motor
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	62 e0       	ldi	r22, 0x02	; 2
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_privret.h"

void DIO_voidInit(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
    DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,
     d1e:	ea e3       	ldi	r30, 0x3A	; 58
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	8f e0       	ldi	r24, 0x0F	; 15
     d24:	80 83       	st	Z, r24
                            DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
                            DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,
                            DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,
     d26:	e7 e3       	ldi	r30, 0x37	; 55
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	87 e0       	ldi	r24, 0x07	; 7
     d2c:	80 83       	st	Z, r24
                            DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
                            DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,
                            DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

      DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,
     d2e:	e4 e3       	ldi	r30, 0x34	; 52
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	8f e7       	ldi	r24, 0x7F	; 127
     d34:	80 83       	st	Z, r24
                            DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
                            DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,
                            DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION );

      DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,
     d36:	e1 e3       	ldi	r30, 0x31	; 49
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	80 83       	st	Z, r24
    DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION
     ,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION );

     DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,
     d3e:	eb e3       	ldi	r30, 0x3B	; 59
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	80 83       	st	Z, r24
    DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE
     ,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE );

      DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,
     d46:	e8 e3       	ldi	r30, 0x38	; 56
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	10 82       	st	Z, r1
    DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE
     ,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE );

      DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,
     d4c:	e5 e3       	ldi	r30, 0x35	; 53
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	10 82       	st	Z, r1
    DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE
     ,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE );

      DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,
     d52:	e2 e3       	ldi	r30, 0x32	; 50
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	10 82       	st	Z, r1
    DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE
     ,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE );


   
}
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinID, u8 Copy_u8PinDirection )
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	2e 97       	sbiw	r28, 0x0e	; 14
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	8a 83       	std	Y+2, r24	; 0x02
     d74:	6b 83       	std	Y+3, r22	; 0x03
     d76:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState = STD_TYPES_OK;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8PortId <= DIO_u8_PORTD ) &&  (Copy_u8PortId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	84 30       	cpi	r24, 0x04	; 4
     d80:	08 f0       	brcs	.+2      	; 0xd84 <DIO_voidSetPinDirection+0x26>
     d82:	0c c1       	rjmp	.+536    	; 0xf9c <DIO_voidSetPinDirection+0x23e>
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	88 30       	cpi	r24, 0x08	; 8
     d88:	08 f0       	brcs	.+2      	; 0xd8c <DIO_voidSetPinDirection+0x2e>
     d8a:	08 c1       	rjmp	.+528    	; 0xf9c <DIO_voidSetPinDirection+0x23e>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	21 f0       	breq	.+8      	; 0xd9a <DIO_voidSetPinDirection+0x3c>
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	88 23       	and	r24, r24
     d96:	09 f0       	breq	.+2      	; 0xd9a <DIO_voidSetPinDirection+0x3c>
     d98:	01 c1       	rjmp	.+514    	; 0xf9c <DIO_voidSetPinDirection+0x23e>
{
   switch (Copy_u8PortId)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	3e 87       	std	Y+14, r19	; 0x0e
     da2:	2d 87       	std	Y+13, r18	; 0x0d
     da4:	8d 85       	ldd	r24, Y+13	; 0x0d
     da6:	9e 85       	ldd	r25, Y+14	; 0x0e
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <DIO_voidSetPinDirection+0x52>
     dae:	4f c0       	rjmp	.+158    	; 0xe4e <DIO_voidSetPinDirection+0xf0>
     db0:	2d 85       	ldd	r18, Y+13	; 0x0d
     db2:	3e 85       	ldd	r19, Y+14	; 0x0e
     db4:	22 30       	cpi	r18, 0x02	; 2
     db6:	31 05       	cpc	r19, r1
     db8:	2c f4       	brge	.+10     	; 0xdc4 <DIO_voidSetPinDirection+0x66>
     dba:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	71 f0       	breq	.+28     	; 0xdde <DIO_voidSetPinDirection+0x80>
     dc2:	ed c0       	rjmp	.+474    	; 0xf9e <DIO_voidSetPinDirection+0x240>
     dc4:	2d 85       	ldd	r18, Y+13	; 0x0d
     dc6:	3e 85       	ldd	r19, Y+14	; 0x0e
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <DIO_voidSetPinDirection+0x72>
     dce:	77 c0       	rjmp	.+238    	; 0xebe <DIO_voidSetPinDirection+0x160>
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <DIO_voidSetPinDirection+0x7e>
     dda:	a9 c0       	rjmp	.+338    	; 0xf2e <DIO_voidSetPinDirection+0x1d0>
     ddc:	e0 c0       	rjmp	.+448    	; 0xf9e <DIO_voidSetPinDirection+0x240>
   {
     case DIO_u8_PORTA:
        switch (Copy_u8PinDirection)
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3c 87       	std	Y+12, r19	; 0x0c
     de6:	2b 87       	std	Y+11, r18	; 0x0b
     de8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dea:	9c 85       	ldd	r25, Y+12	; 0x0c
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	d1 f0       	breq	.+52     	; 0xe24 <DIO_voidSetPinDirection+0xc6>
     df0:	2b 85       	ldd	r18, Y+11	; 0x0b
     df2:	3c 85       	ldd	r19, Y+12	; 0x0c
     df4:	21 30       	cpi	r18, 0x01	; 1
     df6:	31 05       	cpc	r19, r1
     df8:	09 f0       	breq	.+2      	; 0xdfc <DIO_voidSetPinDirection+0x9e>
     dfa:	d1 c0       	rjmp	.+418    	; 0xf9e <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_voidSetPinDirection+0xbc>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_voidSetPinDirection+0xb8>
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	bd c0       	rjmp	.+378    	; 0xf9e <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinID );break;
     e24:	aa e3       	ldi	r26, 0x3A	; 58
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ea e3       	ldi	r30, 0x3A	; 58
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_voidSetPinDirection+0xe4>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_voidSetPinDirection+0xe0>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	a8 c0       	rjmp	.+336    	; 0xf9e <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinDirection)
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3a 87       	std	Y+10, r19	; 0x0a
     e56:	29 87       	std	Y+9, r18	; 0x09
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	d1 f0       	breq	.+52     	; 0xe94 <DIO_voidSetPinDirection+0x136>
     e60:	29 85       	ldd	r18, Y+9	; 0x09
     e62:	3a 85       	ldd	r19, Y+10	; 0x0a
     e64:	21 30       	cpi	r18, 0x01	; 1
     e66:	31 05       	cpc	r19, r1
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_voidSetPinDirection+0x10e>
     e6a:	99 c0       	rjmp	.+306    	; 0xf9e <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
     e6c:	a7 e3       	ldi	r26, 0x37	; 55
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e7 e3       	ldi	r30, 0x37	; 55
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_voidSetPinDirection+0x12c>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_voidSetPinDirection+0x128>
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	85 c0       	rjmp	.+266    	; 0xf9e <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinID );break;
     e94:	a7 e3       	ldi	r26, 0x37	; 55
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e7 e3       	ldi	r30, 0x37	; 55
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_voidSetPinDirection+0x154>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_voidSetPinDirection+0x150>
     eb6:	80 95       	com	r24
     eb8:	84 23       	and	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	70 c0       	rjmp	.+224    	; 0xf9e <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTC:
        switch (Copy_u8PinDirection)
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	38 87       	std	Y+8, r19	; 0x08
     ec6:	2f 83       	std	Y+7, r18	; 0x07
     ec8:	8f 81       	ldd	r24, Y+7	; 0x07
     eca:	98 85       	ldd	r25, Y+8	; 0x08
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	d1 f0       	breq	.+52     	; 0xf04 <DIO_voidSetPinDirection+0x1a6>
     ed0:	2f 81       	ldd	r18, Y+7	; 0x07
     ed2:	38 85       	ldd	r19, Y+8	; 0x08
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	09 f0       	breq	.+2      	; 0xedc <DIO_voidSetPinDirection+0x17e>
     eda:	61 c0       	rjmp	.+194    	; 0xf9e <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
     edc:	a4 e3       	ldi	r26, 0x34	; 52
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e4 e3       	ldi	r30, 0x34	; 52
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinDirection+0x19c>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinDirection+0x198>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	4d c0       	rjmp	.+154    	; 0xf9e <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinID );break;
     f04:	a4 e3       	ldi	r26, 0x34	; 52
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e4 e3       	ldi	r30, 0x34	; 52
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_voidSetPinDirection+0x1c4>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_voidSetPinDirection+0x1c0>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	38 c0       	rjmp	.+112    	; 0xf9e <DIO_voidSetPinDirection+0x240>

        }

    break;
    case DIO_u8_PORTD:
        switch (Copy_u8PinDirection)
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	3e 83       	std	Y+6, r19	; 0x06
     f36:	2d 83       	std	Y+5, r18	; 0x05
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	c9 f0       	breq	.+50     	; 0xf72 <DIO_voidSetPinDirection+0x214>
     f40:	2d 81       	ldd	r18, Y+5	; 0x05
     f42:	3e 81       	ldd	r19, Y+6	; 0x06
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	51 f5       	brne	.+84     	; 0xf9e <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_OUTPUT : SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
     f4a:	a1 e3       	ldi	r26, 0x31	; 49
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e1 e3       	ldi	r30, 0x31	; 49
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_voidSetPinDirection+0x20a>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_voidSetPinDirection+0x206>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	16 c0       	rjmp	.+44     	; 0xf9e <DIO_voidSetPinDirection+0x240>
         case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinID );break;
     f72:	a1 e3       	ldi	r26, 0x31	; 49
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e1 e3       	ldi	r30, 0x31	; 49
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_voidSetPinDirection+0x232>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_voidSetPinDirection+0x22e>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <DIO_voidSetPinDirection+0x240>

   }
}
else
{
    Local_u8ErrorState = STD_TYPES_NOK;
     f9c:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8ErrorState;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01

}
     fa0:	2e 96       	adiw	r28, 0x0e	; 14
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue     (u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	2e 97       	sbiw	r28, 0x0e	; 14
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	6b 83       	std	Y+3, r22	; 0x03
     fca:	4c 83       	std	Y+4, r20	; 0x04
    u8 local_u8ErrorState = STD_TYPES_OK;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_PinID <= DIO_u8_PIN7)
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <DIO_voidSetPinValue+0x26>
     fd6:	08 c1       	rjmp	.+528    	; 0x11e8 <DIO_voidSetPinValue+0x236>
    {
        
    switch (Copy_u8PortId)
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3e 87       	std	Y+14, r19	; 0x0e
     fe0:	2d 87       	std	Y+13, r18	; 0x0d
     fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <DIO_voidSetPinValue+0x3c>
     fec:	50 c0       	rjmp	.+160    	; 0x108e <DIO_voidSetPinValue+0xdc>
     fee:	2d 85       	ldd	r18, Y+13	; 0x0d
     ff0:	3e 85       	ldd	r19, Y+14	; 0x0e
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	2c f4       	brge	.+10     	; 0x1002 <DIO_voidSetPinValue+0x50>
     ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	71 f0       	breq	.+28     	; 0x101c <DIO_voidSetPinValue+0x6a>
    1000:	f1 c0       	rjmp	.+482    	; 0x11e4 <DIO_voidSetPinValue+0x232>
    1002:	2d 85       	ldd	r18, Y+13	; 0x0d
    1004:	3e 85       	ldd	r19, Y+14	; 0x0e
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_voidSetPinValue+0x5c>
    100c:	79 c0       	rjmp	.+242    	; 0x1100 <DIO_voidSetPinValue+0x14e>
    100e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1010:	9e 85       	ldd	r25, Y+14	; 0x0e
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <DIO_voidSetPinValue+0x68>
    1018:	ac c0       	rjmp	.+344    	; 0x1172 <DIO_voidSetPinValue+0x1c0>
    101a:	e4 c0       	rjmp	.+456    	; 0x11e4 <DIO_voidSetPinValue+0x232>
    {
    case DIO_u8_PORTA:
        switch (Copy_u8PinValue)
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3c 87       	std	Y+12, r19	; 0x0c
    1024:	2b 87       	std	Y+11, r18	; 0x0b
    1026:	8b 85       	ldd	r24, Y+11	; 0x0b
    1028:	9c 85       	ldd	r25, Y+12	; 0x0c
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	c9 f0       	breq	.+50     	; 0x1060 <DIO_voidSetPinValue+0xae>
    102e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1030:	3c 85       	ldd	r19, Y+12	; 0x0c
    1032:	21 30       	cpi	r18, 0x01	; 1
    1034:	31 05       	cpc	r19, r1
    1036:	49 f5       	brne	.+82     	; 0x108a <DIO_voidSetPinValue+0xd8>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    1038:	ab e3       	ldi	r26, 0x3B	; 59
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	eb e3       	ldi	r30, 0x3B	; 59
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_voidSetPinValue+0xa4>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_voidSetPinValue+0xa0>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	c5 c0       	rjmp	.+394    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTA_REG,Copy_PinID);
    1060:	ab e3       	ldi	r26, 0x3B	; 59
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e3       	ldi	r30, 0x3B	; 59
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_voidSetPinValue+0xcc>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_voidSetPinValue+0xc8>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	b0 c0       	rjmp	.+352    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	ae c0       	rjmp	.+348    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
    case DIO_u8_PORTB:
        switch (Copy_u8PinValue)
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3a 87       	std	Y+10, r19	; 0x0a
    1096:	29 87       	std	Y+9, r18	; 0x09
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	c9 f0       	breq	.+50     	; 0x10d2 <DIO_voidSetPinValue+0x120>
    10a0:	29 85       	ldd	r18, Y+9	; 0x09
    10a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	49 f5       	brne	.+82     	; 0x10fc <DIO_voidSetPinValue+0x14a>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    10aa:	a8 e3       	ldi	r26, 0x38	; 56
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e8 e3       	ldi	r30, 0x38	; 56
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_voidSetPinValue+0x116>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_voidSetPinValue+0x112>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	8c c0       	rjmp	.+280    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTB_REG,Copy_PinID);
    10d2:	a8 e3       	ldi	r26, 0x38	; 56
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e3       	ldi	r30, 0x38	; 56
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_voidSetPinValue+0x13e>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_voidSetPinValue+0x13a>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	77 c0       	rjmp	.+238    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	75 c0       	rjmp	.+234    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTC:
         switch (Copy_u8PinValue)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	38 87       	std	Y+8, r19	; 0x08
    1108:	2f 83       	std	Y+7, r18	; 0x07
    110a:	8f 81       	ldd	r24, Y+7	; 0x07
    110c:	98 85       	ldd	r25, Y+8	; 0x08
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	c9 f0       	breq	.+50     	; 0x1144 <DIO_voidSetPinValue+0x192>
    1112:	2f 81       	ldd	r18, Y+7	; 0x07
    1114:	38 85       	ldd	r19, Y+8	; 0x08
    1116:	21 30       	cpi	r18, 0x01	; 1
    1118:	31 05       	cpc	r19, r1
    111a:	49 f5       	brne	.+82     	; 0x116e <DIO_voidSetPinValue+0x1bc>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_voidSetPinValue+0x188>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_voidSetPinValue+0x184>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	53 c0       	rjmp	.+166    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTC_REG,Copy_PinID);
    1144:	a5 e3       	ldi	r26, 0x35	; 53
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e3       	ldi	r30, 0x35	; 53
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_voidSetPinValue+0x1b0>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_voidSetPinValue+0x1ac>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	3e c0       	rjmp	.+124    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    116e:	19 82       	std	Y+1, r1	; 0x01
    1170:	3c c0       	rjmp	.+120    	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    case DIO_u8_PORTD:
         switch (Copy_u8PinValue)
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3e 83       	std	Y+6, r19	; 0x06
    117a:	2d 83       	std	Y+5, r18	; 0x05
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	c9 f0       	breq	.+50     	; 0x11b6 <DIO_voidSetPinValue+0x204>
    1184:	2d 81       	ldd	r18, Y+5	; 0x05
    1186:	3e 81       	ldd	r19, Y+6	; 0x06
    1188:	21 30       	cpi	r18, 0x01	; 1
    118a:	31 05       	cpc	r19, r1
    118c:	49 f5       	brne	.+82     	; 0x11e0 <DIO_voidSetPinValue+0x22e>
        {
        case DIO_u8_HIGH:
           SET_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    118e:	a2 e3       	ldi	r26, 0x32	; 50
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_voidSetPinValue+0x1fa>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_voidSetPinValue+0x1f6>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	1a c0       	rjmp	.+52     	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        case DIO_u8_LOW:
           CLR_BIT(DIO_u8_PORTD_REG,Copy_PinID);
    11b6:	a2 e3       	ldi	r26, 0x32	; 50
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e2 e3       	ldi	r30, 0x32	; 50
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_voidSetPinValue+0x222>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_voidSetPinValue+0x21e>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        default: local_u8ErrorState = STD_TYPES_NOK;
    11e0:	19 82       	std	Y+1, r1	; 0x01
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <DIO_voidSetPinValue+0x238>
            break;
        }
        break;
        
    default: local_u8ErrorState = STD_TYPES_NOK;
    11e4:	19 82       	std	Y+1, r1	; 0x01
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <DIO_voidSetPinValue+0x238>
        
    }
    }
    else{
        local_u8ErrorState = STD_TYPES_NOK;
    11e8:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	2e 96       	adiw	r28, 0x0e	; 14
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_PinID, u8  *Copy_pu8PinValue)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	28 97       	sbiw	r28, 0x08	; 8
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	8b 83       	std	Y+3, r24	; 0x03
    1214:	6c 83       	std	Y+4, r22	; 0x04
    1216:	5e 83       	std	Y+6, r21	; 0x06
    1218:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ErrorState = STD_TYPES_OK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue;
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL))
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	84 30       	cpi	r24, 0x04	; 4
    1222:	08 f0       	brcs	.+2      	; 0x1226 <DIO_u8GetPinValue+0x28>
    1224:	9f c0       	rjmp	.+318    	; 0x1364 <DIO_u8GetPinValue+0x166>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	88 30       	cpi	r24, 0x08	; 8
    122a:	08 f0       	brcs	.+2      	; 0x122e <DIO_u8GetPinValue+0x30>
    122c:	9b c0       	rjmp	.+310    	; 0x1364 <DIO_u8GetPinValue+0x166>
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	09 f4       	brne	.+2      	; 0x1238 <DIO_u8GetPinValue+0x3a>
    1236:	96 c0       	rjmp	.+300    	; 0x1364 <DIO_u8GetPinValue+0x166>
    {
       switch (Copy_u8PortId)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	38 87       	std	Y+8, r19	; 0x08
    1240:	2f 83       	std	Y+7, r18	; 0x07
    1242:	4f 81       	ldd	r20, Y+7	; 0x07
    1244:	58 85       	ldd	r21, Y+8	; 0x08
    1246:	41 30       	cpi	r20, 0x01	; 1
    1248:	51 05       	cpc	r21, r1
    124a:	a9 f1       	breq	.+106    	; 0x12b6 <DIO_u8GetPinValue+0xb8>
    124c:	8f 81       	ldd	r24, Y+7	; 0x07
    124e:	98 85       	ldd	r25, Y+8	; 0x08
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	91 05       	cpc	r25, r1
    1254:	34 f4       	brge	.+12     	; 0x1262 <DIO_u8GetPinValue+0x64>
    1256:	2f 81       	ldd	r18, Y+7	; 0x07
    1258:	38 85       	ldd	r19, Y+8	; 0x08
    125a:	21 15       	cp	r18, r1
    125c:	31 05       	cpc	r19, r1
    125e:	71 f0       	breq	.+28     	; 0x127c <DIO_u8GetPinValue+0x7e>
    1260:	82 c0       	rjmp	.+260    	; 0x1366 <DIO_u8GetPinValue+0x168>
    1262:	4f 81       	ldd	r20, Y+7	; 0x07
    1264:	58 85       	ldd	r21, Y+8	; 0x08
    1266:	42 30       	cpi	r20, 0x02	; 2
    1268:	51 05       	cpc	r21, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <DIO_u8GetPinValue+0x70>
    126c:	41 c0       	rjmp	.+130    	; 0x12f0 <DIO_u8GetPinValue+0xf2>
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	98 85       	ldd	r25, Y+8	; 0x08
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <DIO_u8GetPinValue+0x7c>
    1278:	58 c0       	rjmp	.+176    	; 0x132a <DIO_u8GetPinValue+0x12c>
    127a:	75 c0       	rjmp	.+234    	; 0x1366 <DIO_u8GetPinValue+0x168>
       {
       case DIO_u8_PORTA:
        Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_PinID);
    127c:	e9 e3       	ldi	r30, 0x39	; 57
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_u8GetPinValue+0x96>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_u8GetPinValue+0x92>
    1298:	ca 01       	movw	r24, r20
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	88 23       	and	r24, r24
    12a2:	21 f4       	brne	.+8      	; 0x12ac <DIO_u8GetPinValue+0xae>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    12a4:	ed 81       	ldd	r30, Y+5	; 0x05
    12a6:	fe 81       	ldd	r31, Y+6	; 0x06
    12a8:	10 82       	st	Z, r1
    12aa:	5d c0       	rjmp	.+186    	; 0x1366 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    12ac:	ed 81       	ldd	r30, Y+5	; 0x05
    12ae:	fe 81       	ldd	r31, Y+6	; 0x06
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 83       	st	Z, r24
    12b4:	58 c0       	rjmp	.+176    	; 0x1366 <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTB:
        Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_PinID);
    12b6:	e6 e3       	ldi	r30, 0x36	; 54
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8GetPinValue+0xd0>
    12ca:	55 95       	asr	r21
    12cc:	47 95       	ror	r20
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_u8GetPinValue+0xcc>
    12d2:	ca 01       	movw	r24, r20
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	88 23       	and	r24, r24
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <DIO_u8GetPinValue+0xe8>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    12de:	ed 81       	ldd	r30, Y+5	; 0x05
    12e0:	fe 81       	ldd	r31, Y+6	; 0x06
    12e2:	10 82       	st	Z, r1
    12e4:	40 c0       	rjmp	.+128    	; 0x1366 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    12e6:	ed 81       	ldd	r30, Y+5	; 0x05
    12e8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 83       	st	Z, r24
    12ee:	3b c0       	rjmp	.+118    	; 0x1366 <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTC:
        Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_PinID);
    12f0:	e3 e3       	ldi	r30, 0x33	; 51
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_u8GetPinValue+0x10a>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_u8GetPinValue+0x106>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	88 23       	and	r24, r24
    1316:	21 f4       	brne	.+8      	; 0x1320 <DIO_u8GetPinValue+0x122>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    1318:	ed 81       	ldd	r30, Y+5	; 0x05
    131a:	fe 81       	ldd	r31, Y+6	; 0x06
    131c:	10 82       	st	Z, r1
    131e:	23 c0       	rjmp	.+70     	; 0x1366 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    1320:	ed 81       	ldd	r30, Y+5	; 0x05
    1322:	fe 81       	ldd	r31, Y+6	; 0x06
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 83       	st	Z, r24
    1328:	1e c0       	rjmp	.+60     	; 0x1366 <DIO_u8GetPinValue+0x168>
        }
        
        break;
        case DIO_u8_PORTD:
        Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_PinID);
    132a:	e0 e3       	ldi	r30, 0x30	; 48
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a9 01       	movw	r20, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_u8GetPinValue+0x144>
    133e:	55 95       	asr	r21
    1340:	47 95       	ror	r20
    1342:	8a 95       	dec	r24
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_u8GetPinValue+0x140>
    1346:	ca 01       	movw	r24, r20
    1348:	81 70       	andi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01
        if (Local_u8PinValue == 0)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	88 23       	and	r24, r24
    1350:	21 f4       	brne	.+8      	; 0x135a <DIO_u8GetPinValue+0x15c>
        {
            *Copy_pu8PinValue = DIO_u8_LOW;
    1352:	ed 81       	ldd	r30, Y+5	; 0x05
    1354:	fe 81       	ldd	r31, Y+6	; 0x06
    1356:	10 82       	st	Z, r1
    1358:	06 c0       	rjmp	.+12     	; 0x1366 <DIO_u8GetPinValue+0x168>
        }
        else{
            *Copy_pu8PinValue = DIO_u8_HIGH;
    135a:	ed 81       	ldd	r30, Y+5	; 0x05
    135c:	fe 81       	ldd	r31, Y+6	; 0x06
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 83       	st	Z, r24
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <DIO_u8GetPinValue+0x168>
       
       }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1364:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ErrorState;
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
} 
    1368:	28 96       	adiw	r28, 0x08	; 8
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortID, u8 Copy_u8PortDirection)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	2d 97       	sbiw	r28, 0x0d	; 13
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	8a 83       	std	Y+2, r24	; 0x02
    1390:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	21 f0       	breq	.+8      	; 0x13a4 <DIO_u8SetPortDirection+0x2a>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 23       	and	r24, r24
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <DIO_u8SetPortDirection+0x2a>
    13a2:	7f c0       	rjmp	.+254    	; 0x14a2 <DIO_u8SetPortDirection+0x128>
    {
        switch (Copy_u8PortID)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3d 87       	std	Y+13, r19	; 0x0d
    13ac:	2c 87       	std	Y+12, r18	; 0x0c
    13ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    13b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	71 f1       	breq	.+92     	; 0x1414 <DIO_u8SetPortDirection+0x9a>
    13b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <DIO_u8SetPortDirection+0x52>
    13c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	69 f0       	breq	.+26     	; 0x13e4 <DIO_u8SetPortDirection+0x6a>
    13ca:	69 c0       	rjmp	.+210    	; 0x149e <DIO_u8SetPortDirection+0x124>
    13cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	b1 f1       	breq	.+108    	; 0x1442 <DIO_u8SetPortDirection+0xc8>
    13d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <DIO_u8SetPortDirection+0x68>
    13e0:	47 c0       	rjmp	.+142    	; 0x1470 <DIO_u8SetPortDirection+0xf6>
    13e2:	5d c0       	rjmp	.+186    	; 0x149e <DIO_u8SetPortDirection+0x124>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PortDirection)
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3b 87       	std	Y+11, r19	; 0x0b
    13ec:	2a 87       	std	Y+10, r18	; 0x0a
    13ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	59 f0       	breq	.+22     	; 0x140c <DIO_u8SetPortDirection+0x92>
    13f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    13f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    13fa:	21 30       	cpi	r18, 0x01	; 1
    13fc:	31 05       	cpc	r19, r1
    13fe:	09 f0       	breq	.+2      	; 0x1402 <DIO_u8SetPortDirection+0x88>
    1400:	51 c0       	rjmp	.+162    	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRA_REG = 0xff;
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	80 83       	st	Z, r24
    140a:	4c c0       	rjmp	.+152    	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRA_REG = 0x00;
    140c:	ea e3       	ldi	r30, 0x3A	; 58
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	10 82       	st	Z, r1
    1412:	48 c0       	rjmp	.+144    	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTB:
            switch (Copy_u8PortDirection)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	39 87       	std	Y+9, r19	; 0x09
    141c:	28 87       	std	Y+8, r18	; 0x08
    141e:	88 85       	ldd	r24, Y+8	; 0x08
    1420:	99 85       	ldd	r25, Y+9	; 0x09
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	51 f0       	breq	.+20     	; 0x143a <DIO_u8SetPortDirection+0xc0>
    1426:	28 85       	ldd	r18, Y+8	; 0x08
    1428:	39 85       	ldd	r19, Y+9	; 0x09
    142a:	21 30       	cpi	r18, 0x01	; 1
    142c:	31 05       	cpc	r19, r1
    142e:	d1 f5       	brne	.+116    	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRB_REG = 0xff;
    1430:	e7 e3       	ldi	r30, 0x37	; 55
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 83       	st	Z, r24
    1438:	35 c0       	rjmp	.+106    	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRB_REG = 0x00;
    143a:	e7 e3       	ldi	r30, 0x37	; 55
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	10 82       	st	Z, r1
    1440:	31 c0       	rjmp	.+98     	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTC:
            switch (Copy_u8PortDirection)
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3f 83       	std	Y+7, r19	; 0x07
    144a:	2e 83       	std	Y+6, r18	; 0x06
    144c:	8e 81       	ldd	r24, Y+6	; 0x06
    144e:	9f 81       	ldd	r25, Y+7	; 0x07
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	51 f0       	breq	.+20     	; 0x1468 <DIO_u8SetPortDirection+0xee>
    1454:	2e 81       	ldd	r18, Y+6	; 0x06
    1456:	3f 81       	ldd	r19, Y+7	; 0x07
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	19 f5       	brne	.+70     	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRC_REG = 0xff;
    145e:	e4 e3       	ldi	r30, 0x34	; 52
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	80 83       	st	Z, r24
    1466:	1e c0       	rjmp	.+60     	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRC_REG = 0x00;
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	10 82       	st	Z, r1
    146e:	1a c0       	rjmp	.+52     	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
              case DIO_u8_PORTD:
            switch (Copy_u8PortDirection)
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3d 83       	std	Y+5, r19	; 0x05
    1478:	2c 83       	std	Y+4, r18	; 0x04
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	51 f0       	breq	.+20     	; 0x1496 <DIO_u8SetPortDirection+0x11c>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	21 30       	cpi	r18, 0x01	; 1
    1488:	31 05       	cpc	r19, r1
    148a:	61 f4       	brne	.+24     	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRD_REG = 0xff;
    148c:	e1 e3       	ldi	r30, 0x31	; 49
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	80 83       	st	Z, r24
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
                case DIO_u8_INPUT:
                DIO_u8_DDRD_REG = 0x00;
    1496:	e1 e3       	ldi	r30, 0x31	; 49
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	10 82       	st	Z, r1
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
            default: Local_u8ErrorState =STD_TYPES_NOK;
    149e:	19 82       	std	Y+1, r1	; 0x01
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <DIO_u8SetPortDirection+0x12a>
      
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    14a2:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a6:	2d 96       	adiw	r28, 0x0d	; 13
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue      (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_u8SetPortValue+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_u8SetPortValue+0x8>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	8a 83       	std	Y+2, r24	; 0x02
    14c8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortID)
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3d 83       	std	Y+5, r19	; 0x05
    14d6:	2c 83       	std	Y+4, r18	; 0x04
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	91 05       	cpc	r25, r1
    14e0:	d1 f0       	breq	.+52     	; 0x1516 <DIO_u8SetPortValue+0x5e>
    14e2:	2c 81       	ldd	r18, Y+4	; 0x04
    14e4:	3d 81       	ldd	r19, Y+5	; 0x05
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <DIO_u8SetPortValue+0x3e>
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	61 f0       	breq	.+24     	; 0x150c <DIO_u8SetPortValue+0x54>
    14f4:	1f c0       	rjmp	.+62     	; 0x1534 <DIO_u8SetPortValue+0x7c>
    14f6:	2c 81       	ldd	r18, Y+4	; 0x04
    14f8:	3d 81       	ldd	r19, Y+5	; 0x05
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <DIO_u8SetPortValue+0x68>
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	91 05       	cpc	r25, r1
    1508:	81 f0       	breq	.+32     	; 0x152a <DIO_u8SetPortValue+0x72>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <DIO_u8SetPortValue+0x7c>
    {
    case DIO_u8_PORTA:
        DIO_u8_PORTA_REG =Copy_u8PortValue;
    150c:	eb e3       	ldi	r30, 0x3B	; 59
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	80 83       	st	Z, r24
    1514:	10 c0       	rjmp	.+32     	; 0x1536 <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTB:
        DIO_u8_PORTB_REG =Copy_u8PortValue;
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	80 83       	st	Z, r24
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTC:
        DIO_u8_PORTC_REG =Copy_u8PortValue;
    1520:	e5 e3       	ldi	r30, 0x35	; 53
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	80 83       	st	Z, r24
    1528:	06 c0       	rjmp	.+12     	; 0x1536 <DIO_u8SetPortValue+0x7e>
        break;
        case DIO_u8_PORTD:
        DIO_u8_PORTD_REG =Copy_u8PortValue;
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 83       	st	Z, r24
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <DIO_u8SetPortValue+0x7e>
        break;
    
    default: Local_u8ErrorState =STD_TYPES_NOK;
    1534:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8ErrorState;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue      (u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <DIO_u8GetPortValue+0x6>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <DIO_u8GetPortValue+0x8>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <DIO_u8GetPortValue+0xa>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	7c 83       	std	Y+4, r23	; 0x04
    155a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8ReturnedPortValue != NULL)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	e9 f1       	breq	.+122    	; 0x15e2 <DIO_u8GetPortValue+0x9a>
    {
        switch (Copy_u8PortId)
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3e 83       	std	Y+6, r19	; 0x06
    1570:	2d 83       	std	Y+5, r18	; 0x05
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	e1 f0       	breq	.+56     	; 0x15b4 <DIO_u8GetPortValue+0x6c>
    157c:	2d 81       	ldd	r18, Y+5	; 0x05
    157e:	3e 81       	ldd	r19, Y+6	; 0x06
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	2c f4       	brge	.+10     	; 0x1590 <DIO_u8GetPortValue+0x48>
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	61 f0       	breq	.+24     	; 0x15a6 <DIO_u8GetPortValue+0x5e>
    158e:	27 c0       	rjmp	.+78     	; 0x15de <DIO_u8GetPortValue+0x96>
    1590:	2d 81       	ldd	r18, Y+5	; 0x05
    1592:	3e 81       	ldd	r19, Y+6	; 0x06
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	a1 f0       	breq	.+40     	; 0x15c2 <DIO_u8GetPortValue+0x7a>
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	91 05       	cpc	r25, r1
    15a2:	b1 f0       	breq	.+44     	; 0x15d0 <DIO_u8GetPortValue+0x88>
    15a4:	1c c0       	rjmp	.+56     	; 0x15de <DIO_u8GetPortValue+0x96>
        {
        case DIO_u8_PORTA:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINA_REG;
    15a6:	e9 e3       	ldi	r30, 0x39	; 57
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	eb 81       	ldd	r30, Y+3	; 0x03
    15ae:	fc 81       	ldd	r31, Y+4	; 0x04
    15b0:	80 83       	st	Z, r24
    15b2:	18 c0       	rjmp	.+48     	; 0x15e4 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTB:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINB_REG;
    15b4:	e6 e3       	ldi	r30, 0x36	; 54
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	eb 81       	ldd	r30, Y+3	; 0x03
    15bc:	fc 81       	ldd	r31, Y+4	; 0x04
    15be:	80 83       	st	Z, r24
    15c0:	11 c0       	rjmp	.+34     	; 0x15e4 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTC:
           *Copy_pu8ReturnedPortValue =DIO_u8_PINC_REG;
    15c2:	e3 e3       	ldi	r30, 0x33	; 51
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ca:	fc 81       	ldd	r31, Y+4	; 0x04
    15cc:	80 83       	st	Z, r24
    15ce:	0a c0       	rjmp	.+20     	; 0x15e4 <DIO_u8GetPortValue+0x9c>
            break;
            case DIO_u8_PORTD:
           *Copy_pu8ReturnedPortValue =DIO_u8_PIND_REG;
    15d0:	e0 e3       	ldi	r30, 0x30	; 48
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	eb 81       	ldd	r30, Y+3	; 0x03
    15d8:	fc 81       	ldd	r31, Y+4	; 0x04
    15da:	80 83       	st	Z, r24
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <DIO_u8GetPortValue+0x9c>
            break;
        
        default: Local_u8ErrorState =STD_TYPES_NOK;
    15de:	19 82       	std	Y+1, r1	; 0x01
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <DIO_u8GetPortValue+0x9c>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    }
    
    return Local_u8ErrorState;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e6:	26 96       	adiw	r28, 0x06	; 6
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <KPD_u8GetKeyState>:
u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
u8 KPD_Au8ColsPins[4]={KPD_u8_c1_PIN,KPD_u8_c2_PIN,KPD_u8_c3_PIN,KPD_u8_c4_PIN};


u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	65 97       	sbiw	r28, 0x15	; 21
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	9d 8b       	std	Y+21, r25	; 0x15
    160e:	8c 8b       	std	Y+20, r24	; 0x14

    u8 Local_u8ErrorState = STD_TYPES_OK;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
    1614:	1f 86       	std	Y+15, r1	; 0x0f
if(Copy_pu8ReturnedKey != NULL)
    1616:	8c 89       	ldd	r24, Y+20	; 0x14
    1618:	9d 89       	ldd	r25, Y+21	; 0x15
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	09 f4       	brne	.+2      	; 0x1620 <KPD_u8GetKeyState+0x28>
    161e:	f0 c0       	rjmp	.+480    	; 0x1800 <KPD_u8GetKeyState+0x208>
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1620:	ec 89       	ldd	r30, Y+20	; 0x14
    1622:	fd 89       	ldd	r31, Y+21	; 0x15
    1624:	8f ef       	ldi	r24, 0xFF	; 255
    1626:	80 83       	st	Z, r24
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1628:	19 8a       	std	Y+17, r1	; 0x11
    162a:	e5 c0       	rjmp	.+458    	; 0x17f6 <KPD_u8GetKeyState+0x1fe>
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    162c:	89 89       	ldd	r24, Y+17	; 0x11
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	fc 01       	movw	r30, r24
    1634:	e8 53       	subi	r30, 0x38	; 56
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	90 81       	ld	r25, Z
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	69 2f       	mov	r22, r25
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    1644:	18 8a       	std	Y+16, r1	; 0x10
    1646:	c1 c0       	rjmp	.+386    	; 0x17ca <KPD_u8GetKeyState+0x1d2>
        {
            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1648:	88 89       	ldd	r24, Y+16	; 0x10
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	e4 53       	subi	r30, 0x34	; 52
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	90 81       	ld	r25, Z
    1656:	9e 01       	movw	r18, r28
    1658:	2d 5e       	subi	r18, 0xED	; 237
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	69 2f       	mov	r22, r25
    1660:	a9 01       	movw	r20, r18
    1662:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_u8GetPinValue>
            if(Local_u8PinValue == DIO_u8_LOW)
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	88 23       	and	r24, r24
    166a:	09 f0       	breq	.+2      	; 0x166e <KPD_u8GetKeyState+0x76>
    166c:	ab c0       	rjmp	.+342    	; 0x17c4 <KPD_u8GetKeyState+0x1cc>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 ea       	ldi	r26, 0xA0	; 160
    1674:	b1 e4       	ldi	r27, 0x41	; 65
    1676:	8b 87       	std	Y+11, r24	; 0x0b
    1678:	9c 87       	std	Y+12, r25	; 0x0c
    167a:	ad 87       	std	Y+13, r26	; 0x0d
    167c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1680:	7c 85       	ldd	r23, Y+12	; 0x0c
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a e7       	ldi	r20, 0x7A	; 122
    168c:	53 e4       	ldi	r21, 0x43	; 67
    168e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8f 83       	std	Y+7, r24	; 0x07
    1698:	98 87       	std	Y+8, r25	; 0x08
    169a:	a9 87       	std	Y+9, r26	; 0x09
    169c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169e:	6f 81       	ldd	r22, Y+7	; 0x07
    16a0:	78 85       	ldd	r23, Y+8	; 0x08
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	3f c0       	rjmp	.+126    	; 0x173e <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	4c f5       	brge	.+82     	; 0x172a <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16da:	7c 85       	ldd	r23, Y+12	; 0x0c
    16dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16de:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <KPD_u8GetKeyState+0x128>
    1702:	89 e1       	ldi	r24, 0x19	; 25
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <KPD_u8GetKeyState+0x116>
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f7       	brne	.-38     	; 0x1702 <KPD_u8GetKeyState+0x10a>
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <KPD_u8GetKeyState+0x152>
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	89 83       	std	Y+1, r24	; 0x01
            {
                //debouncing//
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1752:	88 89       	ldd	r24, Y+16	; 0x10
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	fc 01       	movw	r30, r24
    175a:	e4 53       	subi	r30, 0x34	; 52
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	90 81       	ld	r25, Z
    1760:	9e 01       	movw	r18, r28
    1762:	2d 5e       	subi	r18, 0xED	; 237
    1764:	3f 4f       	sbci	r19, 0xFF	; 255
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	69 2f       	mov	r22, r25
    176a:	a9 01       	movw	r20, r18
    176c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_u8GetPinValue>
    1770:	0f c0       	rjmp	.+30     	; 0x1790 <KPD_u8GetKeyState+0x198>


                while (Local_u8PinValue == DIO_u8_LOW)
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1772:	88 89       	ldd	r24, Y+16	; 0x10
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	fc 01       	movw	r30, r24
    177a:	e4 53       	subi	r30, 0x34	; 52
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	90 81       	ld	r25, Z
    1780:	9e 01       	movw	r18, r28
    1782:	2d 5e       	subi	r18, 0xED	; 237
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	69 2f       	mov	r22, r25
    178a:	a9 01       	movw	r20, r18
    178c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_u8GetPinValue>
                _delay_ms(20);
                //chech if the pin is still low//
                 DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);


                while (Local_u8PinValue == DIO_u8_LOW)
    1790:	8b 89       	ldd	r24, Y+19	; 0x13
    1792:	88 23       	and	r24, r24
    1794:	71 f3       	breq	.-36     	; 0x1772 <KPD_u8GetKeyState+0x17a>
                {
                  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);

                }
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1796:	89 89       	ldd	r24, Y+17	; 0x11
    1798:	48 2f       	mov	r20, r24
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	88 89       	ldd	r24, Y+16	; 0x10
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	ca 01       	movw	r24, r20
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	82 0f       	add	r24, r18
    17ae:	93 1f       	adc	r25, r19
    17b0:	fc 01       	movw	r30, r24
    17b2:	e8 54       	subi	r30, 0x48	; 72
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	ec 89       	ldd	r30, Y+20	; 0x14
    17ba:	fd 89       	ldd	r31, Y+21	; 0x15
    17bc:	80 83       	st	Z, r24
                Local_u8Flag =1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	8f 87       	std	Y+15, r24	; 0x0f
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <KPD_u8GetKeyState+0x1da>
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
     {
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
        /*check which input pin has 0*/
        for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++)
    17c4:	88 89       	ldd	r24, Y+16	; 0x10
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	88 8b       	std	Y+16, r24	; 0x10
    17ca:	88 89       	ldd	r24, Y+16	; 0x10
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <KPD_u8GetKeyState+0x1da>
    17d0:	3b cf       	rjmp	.-394    	; 0x1648 <KPD_u8GetKeyState+0x50>
                *Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
                Local_u8Flag =1;
                break;
            }
        }
        DIO_voidSetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    17d2:	89 89       	ldd	r24, Y+17	; 0x11
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	fc 01       	movw	r30, r24
    17da:	e8 53       	subi	r30, 0x38	; 56
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	90 81       	ld	r25, Z
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	69 2f       	mov	r22, r25
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
        if(Local_u8Flag == 1)
    17ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	49 f0       	breq	.+18     	; 0x1802 <KPD_u8GetKeyState+0x20a>
    u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag =0;
if(Copy_pu8ReturnedKey != NULL)
{
    *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
     /*activate each row*/
     for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    17f0:	89 89       	ldd	r24, Y+17	; 0x11
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	89 8b       	std	Y+17, r24	; 0x11
    17f6:	89 89       	ldd	r24, Y+17	; 0x11
    17f8:	84 30       	cpi	r24, 0x04	; 4
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <KPD_u8GetKeyState+0x206>
    17fc:	17 cf       	rjmp	.-466    	; 0x162c <KPD_u8GetKeyState+0x34>
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <KPD_u8GetKeyState+0x20a>

     }

}
else{
    Local_u8ErrorState = STD_TYPES_NOK;
    1800:	1a 8a       	std	Y+18, r1	; 0x12
}

   return Local_u8ErrorState;
    1802:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1804:	65 96       	adiw	r28, 0x15	; 21
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <LCD_voideInit>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_voideInit(void)
{
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	cc 54       	subi	r28, 0x4C	; 76
    1824:	d0 40       	sbci	r29, 0x00	; 0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	fe 01       	movw	r30, r28
    1832:	e7 5b       	subi	r30, 0xB7	; 183
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	ac e0       	ldi	r26, 0x0C	; 12
    183c:	b2 e4       	ldi	r27, 0x42	; 66
    183e:	80 83       	st	Z, r24
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	a2 83       	std	Z+2, r26	; 0x02
    1844:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1846:	8e 01       	movw	r16, r28
    1848:	0b 5b       	subi	r16, 0xBB	; 187
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	fe 01       	movw	r30, r28
    184e:	e7 5b       	subi	r30, 0xB7	; 183
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a e7       	ldi	r20, 0x7A	; 122
    1860:	53 e4       	ldi	r21, 0x43	; 67
    1862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	f8 01       	movw	r30, r16
    186c:	80 83       	st	Z, r24
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	a2 83       	std	Z+2, r26	; 0x02
    1872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1874:	fe 01       	movw	r30, r28
    1876:	eb 5b       	subi	r30, 0xBB	; 187
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	44 f4       	brge	.+16     	; 0x18a2 <LCD_voideInit+0x8c>
		__ticks = 1;
    1892:	fe 01       	movw	r30, r28
    1894:	ed 5b       	subi	r30, 0xBD	; 189
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
    18a0:	64 c0       	rjmp	.+200    	; 0x196a <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    18a2:	fe 01       	movw	r30, r28
    18a4:	eb 5b       	subi	r30, 0xBB	; 187
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	4f e7       	ldi	r20, 0x7F	; 127
    18b6:	57 e4       	ldi	r21, 0x47	; 71
    18b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18bc:	18 16       	cp	r1, r24
    18be:	0c f0       	brlt	.+2      	; 0x18c2 <LCD_voideInit+0xac>
    18c0:	43 c0       	rjmp	.+134    	; 0x1948 <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	fe 01       	movw	r30, r28
    18c4:	e7 5b       	subi	r30, 0xB7	; 183
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	60 81       	ld	r22, Z
    18ca:	71 81       	ldd	r23, Z+1	; 0x01
    18cc:	82 81       	ldd	r24, Z+2	; 0x02
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8e 01       	movw	r16, r28
    18e2:	0d 5b       	subi	r16, 0xBD	; 189
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	1f c0       	rjmp	.+62     	; 0x1938 <LCD_voideInit+0x122>
    18fa:	fe 01       	movw	r30, r28
    18fc:	ef 5b       	subi	r30, 0xBF	; 191
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	89 e1       	ldi	r24, 0x19	; 25
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	fe 01       	movw	r30, r28
    190a:	ef 5b       	subi	r30, 0xBF	; 191
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD_voideInit+0xfc>
    1916:	fe 01       	movw	r30, r28
    1918:	ef 5b       	subi	r30, 0xBF	; 191
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	de 01       	movw	r26, r28
    1922:	ad 5b       	subi	r26, 0xBD	; 189
    1924:	bf 4f       	sbci	r27, 0xFF	; 255
    1926:	fe 01       	movw	r30, r28
    1928:	ed 5b       	subi	r30, 0xBD	; 189
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	9c 93       	st	X, r25
    1936:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	fe 01       	movw	r30, r28
    193a:	ed 5b       	subi	r30, 0xBD	; 189
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	d1 f6       	brne	.-76     	; 0x18fa <LCD_voideInit+0xe4>
    1946:	24 c0       	rjmp	.+72     	; 0x1990 <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	8e 01       	movw	r16, r28
    194a:	0d 5b       	subi	r16, 0xBD	; 189
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	eb 5b       	subi	r30, 0xBB	; 187
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	f8 01       	movw	r30, r16
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
    196a:	fe 01       	movw	r30, r28
    196c:	ed 5b       	subi	r30, 0xBD	; 189
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	fe 01       	movw	r30, r28
    1976:	ff 96       	adiw	r30, 0x3f	; 63
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	fe 01       	movw	r30, r28
    197e:	ff 96       	adiw	r30, 0x3f	; 63
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_voideInit+0x16e>
    1988:	fe 01       	movw	r30, r28
    198a:	ff 96       	adiw	r30, 0x3f	; 63
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    _delay_ms(35);
    LCD_voidSendCmnd(0b00111000);
    1990:	88 e3       	ldi	r24, 0x38	; 56
    1992:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e2       	ldi	r26, 0x20	; 32
    199c:	b2 e4       	ldi	r27, 0x42	; 66
    199e:	8b af       	std	Y+59, r24	; 0x3b
    19a0:	9c af       	std	Y+60, r25	; 0x3c
    19a2:	ad af       	std	Y+61, r26	; 0x3d
    19a4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19a6:	6b ad       	ldd	r22, Y+59	; 0x3b
    19a8:	7c ad       	ldd	r23, Y+60	; 0x3c
    19aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ae:	2b ea       	ldi	r18, 0xAB	; 171
    19b0:	3a ea       	ldi	r19, 0xAA	; 170
    19b2:	4a ea       	ldi	r20, 0xAA	; 170
    19b4:	5e e3       	ldi	r21, 0x3E	; 62
    19b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8f ab       	std	Y+55, r24	; 0x37
    19c0:	98 af       	std	Y+56, r25	; 0x38
    19c2:	a9 af       	std	Y+57, r26	; 0x39
    19c4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19c6:	6f a9       	ldd	r22, Y+55	; 0x37
    19c8:	78 ad       	ldd	r23, Y+56	; 0x38
    19ca:	89 ad       	ldd	r24, Y+57	; 0x39
    19cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	1c f4       	brge	.+6      	; 0x19e4 <LCD_voideInit+0x1ce>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	8e ab       	std	Y+54, r24	; 0x36
    19e2:	91 c0       	rjmp	.+290    	; 0x1b06 <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    19e4:	6f a9       	ldd	r22, Y+55	; 0x37
    19e6:	78 ad       	ldd	r23, Y+56	; 0x38
    19e8:	89 ad       	ldd	r24, Y+57	; 0x39
    19ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	0c f0       	brlt	.+2      	; 0x19fe <LCD_voideInit+0x1e8>
    19fc:	7b c0       	rjmp	.+246    	; 0x1af4 <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    19fe:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a00:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a e7       	ldi	r20, 0x7A	; 122
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8a ab       	std	Y+50, r24	; 0x32
    1a18:	9b ab       	std	Y+51, r25	; 0x33
    1a1a:	ac ab       	std	Y+52, r26	; 0x34
    1a1c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6a a9       	ldd	r22, Y+50	; 0x32
    1a20:	7b a9       	ldd	r23, Y+51	; 0x33
    1a22:	8c a9       	ldd	r24, Y+52	; 0x34
    1a24:	9d a9       	ldd	r25, Y+53	; 0x35
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8e a7       	std	Y+46, r24	; 0x2e
    1a38:	9f a7       	std	Y+47, r25	; 0x2f
    1a3a:	a8 ab       	std	Y+48, r26	; 0x30
    1a3c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a3e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a40:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a42:	88 a9       	ldd	r24, Y+48	; 0x30
    1a44:	99 a9       	ldd	r25, Y+49	; 0x31
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_voideInit+0x24a>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9d a7       	std	Y+45, r25	; 0x2d
    1a5c:	8c a7       	std	Y+44, r24	; 0x2c
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    1a60:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a62:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a64:	88 a9       	ldd	r24, Y+48	; 0x30
    1a66:	99 a9       	ldd	r25, Y+49	; 0x31
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6a a9       	ldd	r22, Y+50	; 0x32
    1a7a:	7b a9       	ldd	r23, Y+51	; 0x33
    1a7c:	8c a9       	ldd	r24, Y+52	; 0x34
    1a7e:	9d a9       	ldd	r25, Y+53	; 0x35
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9d a7       	std	Y+45, r25	; 0x2d
    1a9e:	8c a7       	std	Y+44, r24	; 0x2c
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_voideInit+0x2aa>
    1aa2:	89 e1       	ldi	r24, 0x19	; 25
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9b a7       	std	Y+43, r25	; 0x2b
    1aa8:	8a a7       	std	Y+42, r24	; 0x2a
    1aaa:	8a a5       	ldd	r24, Y+42	; 0x2a
    1aac:	9b a5       	ldd	r25, Y+43	; 0x2b
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_voideInit+0x298>
    1ab2:	9b a7       	std	Y+43, r25	; 0x2b
    1ab4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ab8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9d a7       	std	Y+45, r25	; 0x2d
    1abe:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ac2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_voideInit+0x28c>
    1ac8:	24 c0       	rjmp	.+72     	; 0x1b12 <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6e a5       	ldd	r22, Y+46	; 0x2e
    1acc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ace:	88 a9       	ldd	r24, Y+48	; 0x30
    1ad0:	99 a9       	ldd	r25, Y+49	; 0x31
    1ad2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9d a7       	std	Y+45, r25	; 0x2d
    1adc:	8c a7       	std	Y+44, r24	; 0x2c
    1ade:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ae0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ae2:	99 a7       	std	Y+41, r25	; 0x29
    1ae4:	88 a7       	std	Y+40, r24	; 0x28
    1ae6:	88 a5       	ldd	r24, Y+40	; 0x28
    1ae8:	99 a5       	ldd	r25, Y+41	; 0x29
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_voideInit+0x2d4>
    1aee:	99 a7       	std	Y+41, r25	; 0x29
    1af0:	88 a7       	std	Y+40, r24	; 0x28
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1af4:	6f a9       	ldd	r22, Y+55	; 0x37
    1af6:	78 ad       	ldd	r23, Y+56	; 0x38
    1af8:	89 ad       	ldd	r24, Y+57	; 0x39
    1afa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8e ab       	std	Y+54, r24	; 0x36
    1b06:	8e a9       	ldd	r24, Y+54	; 0x36
    1b08:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b0a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b0c:	8a 95       	dec	r24
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_voideInit+0x2f6>
    1b10:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_voidSendCmnd(0b00001111);
    1b12:	8f e0       	ldi	r24, 0x0F	; 15
    1b14:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e2       	ldi	r26, 0x20	; 32
    1b1e:	b2 e4       	ldi	r27, 0x42	; 66
    1b20:	8b a3       	std	Y+35, r24	; 0x23
    1b22:	9c a3       	std	Y+36, r25	; 0x24
    1b24:	ad a3       	std	Y+37, r26	; 0x25
    1b26:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b28:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b30:	2b ea       	ldi	r18, 0xAB	; 171
    1b32:	3a ea       	ldi	r19, 0xAA	; 170
    1b34:	4a ea       	ldi	r20, 0xAA	; 170
    1b36:	5e e3       	ldi	r21, 0x3E	; 62
    1b38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8f 8f       	std	Y+31, r24	; 0x1f
    1b42:	98 a3       	std	Y+32, r25	; 0x20
    1b44:	a9 a3       	std	Y+33, r26	; 0x21
    1b46:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b48:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b4a:	78 a1       	ldd	r23, Y+32	; 0x20
    1b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	1c f4       	brge	.+6      	; 0x1b66 <LCD_voideInit+0x350>
		__ticks = 1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	8e 8f       	std	Y+30, r24	; 0x1e
    1b64:	91 c0       	rjmp	.+290    	; 0x1c88 <LCD_voideInit+0x472>
	else if (__tmp > 255)
    1b66:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b68:	78 a1       	ldd	r23, Y+32	; 0x20
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	0c f0       	brlt	.+2      	; 0x1b80 <LCD_voideInit+0x36a>
    1b7e:	7b c0       	rjmp	.+246    	; 0x1c76 <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1b80:	6b a1       	ldd	r22, Y+35	; 0x23
    1b82:	7c a1       	ldd	r23, Y+36	; 0x24
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	54 e4       	ldi	r21, 0x44	; 68
    1b90:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8a 8f       	std	Y+26, r24	; 0x1a
    1b9a:	9b 8f       	std	Y+27, r25	; 0x1b
    1b9c:	ac 8f       	std	Y+28, r26	; 0x1c
    1b9e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ba2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ba4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ba6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8e 8b       	std	Y+22, r24	; 0x16
    1bba:	9f 8b       	std	Y+23, r25	; 0x17
    1bbc:	a8 8f       	std	Y+24, r26	; 0x18
    1bbe:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1bc0:	6e 89       	ldd	r22, Y+22	; 0x16
    1bc2:	7f 89       	ldd	r23, Y+23	; 0x17
    1bc4:	88 8d       	ldd	r24, Y+24	; 0x18
    1bc6:	99 8d       	ldd	r25, Y+25	; 0x19
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_voideInit+0x3cc>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9d 8b       	std	Y+21, r25	; 0x15
    1bde:	8c 8b       	std	Y+20, r24	; 0x14
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    1be2:	6e 89       	ldd	r22, Y+22	; 0x16
    1be4:	7f 89       	ldd	r23, Y+23	; 0x17
    1be6:	88 8d       	ldd	r24, Y+24	; 0x18
    1be8:	99 8d       	ldd	r25, Y+25	; 0x19
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bfc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bfe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9d 8b       	std	Y+21, r25	; 0x15
    1c20:	8c 8b       	std	Y+20, r24	; 0x14
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_voideInit+0x42c>
    1c24:	89 e1       	ldi	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9b 8b       	std	Y+19, r25	; 0x13
    1c2a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_voideInit+0x41a>
    1c34:	9b 8b       	std	Y+19, r25	; 0x13
    1c36:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8c 89       	ldd	r24, Y+20	; 0x14
    1c3a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9d 8b       	std	Y+21, r25	; 0x15
    1c40:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8c 89       	ldd	r24, Y+20	; 0x14
    1c44:	9d 89       	ldd	r25, Y+21	; 0x15
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_voideInit+0x40e>
    1c4a:	24 c0       	rjmp	.+72     	; 0x1c94 <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6e 89       	ldd	r22, Y+22	; 0x16
    1c4e:	7f 89       	ldd	r23, Y+23	; 0x17
    1c50:	88 8d       	ldd	r24, Y+24	; 0x18
    1c52:	99 8d       	ldd	r25, Y+25	; 0x19
    1c54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9d 8b       	std	Y+21, r25	; 0x15
    1c5e:	8c 8b       	std	Y+20, r24	; 0x14
    1c60:	8c 89       	ldd	r24, Y+20	; 0x14
    1c62:	9d 89       	ldd	r25, Y+21	; 0x15
    1c64:	99 8b       	std	Y+17, r25	; 0x11
    1c66:	88 8b       	std	Y+16, r24	; 0x10
    1c68:	88 89       	ldd	r24, Y+16	; 0x10
    1c6a:	99 89       	ldd	r25, Y+17	; 0x11
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_voideInit+0x456>
    1c70:	99 8b       	std	Y+17, r25	; 0x11
    1c72:	88 8b       	std	Y+16, r24	; 0x10
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c76:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c78:	78 a1       	ldd	r23, Y+32	; 0x20
    1c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8e 8f       	std	Y+30, r24	; 0x1e
    1c88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8e:	8a 95       	dec	r24
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_voideInit+0x478>
    1c92:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_voidSendCmnd(0x01);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 ea       	ldi	r26, 0xA0	; 160
    1ca0:	b0 e4       	ldi	r27, 0x40	; 64
    1ca2:	8b 87       	std	Y+11, r24	; 0x0b
    1ca4:	9c 87       	std	Y+12, r25	; 0x0c
    1ca6:	ad 87       	std	Y+13, r26	; 0x0d
    1ca8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a e7       	ldi	r20, 0x7A	; 122
    1cb8:	53 e4       	ldi	r21, 0x43	; 67
    1cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8f 83       	std	Y+7, r24	; 0x07
    1cc4:	98 87       	std	Y+8, r25	; 0x08
    1cc6:	a9 87       	std	Y+9, r26	; 0x09
    1cc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <LCD_voideInit+0x4d6>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <LCD_voideInit+0x536>
    1d2e:	89 e1       	ldi	r24, 0x19	; 25
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_voideInit+0x524>
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <LCD_voideInit+0x518>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_voideInit+0x560>
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidSendCmnd(0b00000110);
    1d7e:	86 e0       	ldi	r24, 0x06	; 6
    1d80:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>

}
    1d84:	c4 5b       	subi	r28, 0xB4	; 180
    1d86:	df 4f       	sbci	r29, 0xFF	; 255
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	08 95       	ret

00001d9c <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	69 97       	sbiw	r28, 0x19	; 25
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
    /* Rs = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD,Copy_u8Cmnd);
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dca:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	62 e0       	ldi	r22, 0x02	; 2
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e8       	ldi	r26, 0x80	; 128
    1dde:	bf e3       	ldi	r27, 0x3F	; 63
    1de0:	8d 8b       	std	Y+21, r24	; 0x15
    1de2:	9e 8b       	std	Y+22, r25	; 0x16
    1de4:	af 8b       	std	Y+23, r26	; 0x17
    1de6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1de8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dea:	7e 89       	ldd	r23, Y+22	; 0x16
    1dec:	8f 89       	ldd	r24, Y+23	; 0x17
    1dee:	98 8d       	ldd	r25, Y+24	; 0x18
    1df0:	2b ea       	ldi	r18, 0xAB	; 171
    1df2:	3a ea       	ldi	r19, 0xAA	; 170
    1df4:	4a ea       	ldi	r20, 0xAA	; 170
    1df6:	5e e3       	ldi	r21, 0x3E	; 62
    1df8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	89 8b       	std	Y+17, r24	; 0x11
    1e02:	9a 8b       	std	Y+18, r25	; 0x12
    1e04:	ab 8b       	std	Y+19, r26	; 0x13
    1e06:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e08:	69 89       	ldd	r22, Y+17	; 0x11
    1e0a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	1c f4       	brge	.+6      	; 0x1e26 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	88 8b       	std	Y+16, r24	; 0x10
    1e24:	91 c0       	rjmp	.+290    	; 0x1f48 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1e26:	69 89       	ldd	r22, Y+17	; 0x11
    1e28:	7a 89       	ldd	r23, Y+18	; 0x12
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	53 e4       	ldi	r21, 0x43	; 67
    1e36:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	0c f0       	brlt	.+2      	; 0x1e40 <LCD_voidSendCmnd+0xa4>
    1e3e:	7b c0       	rjmp	.+246    	; 0x1f36 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e40:	6d 89       	ldd	r22, Y+21	; 0x15
    1e42:	7e 89       	ldd	r23, Y+22	; 0x16
    1e44:	8f 89       	ldd	r24, Y+23	; 0x17
    1e46:	98 8d       	ldd	r25, Y+24	; 0x18
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4a e7       	ldi	r20, 0x7A	; 122
    1e4e:	54 e4       	ldi	r21, 0x44	; 68
    1e50:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8c 87       	std	Y+12, r24	; 0x0c
    1e5a:	9d 87       	std	Y+13, r25	; 0x0d
    1e5c:	ae 87       	std	Y+14, r26	; 0x0e
    1e5e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e62:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e64:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e66:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	53 e4       	ldi	r21, 0x43	; 67
    1e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	88 87       	std	Y+8, r24	; 0x08
    1e7a:	99 87       	std	Y+9, r25	; 0x09
    1e7c:	aa 87       	std	Y+10, r26	; 0x0a
    1e7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e80:	68 85       	ldd	r22, Y+8	; 0x08
    1e82:	79 85       	ldd	r23, Y+9	; 0x09
    1e84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9f 83       	std	Y+7, r25	; 0x07
    1e9e:	8e 83       	std	Y+6, r24	; 0x06
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1ea2:	68 85       	ldd	r22, Y+8	; 0x08
    1ea4:	79 85       	ldd	r23, Y+9	; 0x09
    1ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ebc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ebe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ec0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9f 83       	std	Y+7, r25	; 0x07
    1ee0:	8e 83       	std	Y+6, r24	; 0x06
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_voidSendCmnd+0x166>
    1ee4:	89 e1       	ldi	r24, 0x19	; 25
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9d 83       	std	Y+5, r25	; 0x05
    1eea:	8c 83       	std	Y+4, r24	; 0x04
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_voidSendCmnd+0x154>
    1ef4:	9d 83       	std	Y+5, r25	; 0x05
    1ef6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    1efa:	9f 81       	ldd	r25, Y+7	; 0x07
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9f 83       	std	Y+7, r25	; 0x07
    1f00:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8e 81       	ldd	r24, Y+6	; 0x06
    1f04:	9f 81       	ldd	r25, Y+7	; 0x07
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_voidSendCmnd+0x148>
    1f0a:	24 c0       	rjmp	.+72     	; 0x1f54 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	68 85       	ldd	r22, Y+8	; 0x08
    1f0e:	79 85       	ldd	r23, Y+9	; 0x09
    1f10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9f 83       	std	Y+7, r25	; 0x07
    1f1e:	8e 83       	std	Y+6, r24	; 0x06
    1f20:	8e 81       	ldd	r24, Y+6	; 0x06
    1f22:	9f 81       	ldd	r25, Y+7	; 0x07
    1f24:	9b 83       	std	Y+3, r25	; 0x03
    1f26:	8a 83       	std	Y+2, r24	; 0x02
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_voidSendCmnd+0x190>
    1f30:	9b 83       	std	Y+3, r25	; 0x03
    1f32:	8a 83       	std	Y+2, r24	; 0x02
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f36:	69 89       	ldd	r22, Y+17	; 0x11
    1f38:	7a 89       	ldd	r23, Y+18	; 0x12
    1f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	88 8b       	std	Y+16, r24	; 0x10
    1f48:	88 89       	ldd	r24, Y+16	; 0x10
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	8a 95       	dec	r24
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_voidSendCmnd+0x1b2>
    1f52:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
        _delay_us(1);


#endif
}
    1f5e:	69 96       	adiw	r28, 0x19	; 25
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	69 97       	sbiw	r28, 0x19	; 25
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_BIT
     /* Rs = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD,Copy_u8Char);
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8d 8b       	std	Y+21, r24	; 0x15
    1fb6:	9e 8b       	std	Y+22, r25	; 0x16
    1fb8:	af 8b       	std	Y+23, r26	; 0x17
    1fba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	2b ea       	ldi	r18, 0xAB	; 171
    1fc6:	3a ea       	ldi	r19, 0xAA	; 170
    1fc8:	4a ea       	ldi	r20, 0xAA	; 170
    1fca:	5e e3       	ldi	r21, 0x3E	; 62
    1fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	89 8b       	std	Y+17, r24	; 0x11
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	ab 8b       	std	Y+19, r26	; 0x13
    1fda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fdc:	69 89       	ldd	r22, Y+17	; 0x11
    1fde:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	1c f4       	brge	.+6      	; 0x1ffa <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	88 8b       	std	Y+16, r24	; 0x10
    1ff8:	91 c0       	rjmp	.+290    	; 0x211c <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1ffa:	69 89       	ldd	r22, Y+17	; 0x11
    1ffc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	0c f0       	brlt	.+2      	; 0x2014 <LCD_voidSendChar+0xa4>
    2012:	7b c0       	rjmp	.+246    	; 0x210a <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8c 87       	std	Y+12, r24	; 0x0c
    202e:	9d 87       	std	Y+13, r25	; 0x0d
    2030:	ae 87       	std	Y+14, r26	; 0x0e
    2032:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6c 85       	ldd	r22, Y+12	; 0x0c
    2036:	7d 85       	ldd	r23, Y+13	; 0x0d
    2038:	8e 85       	ldd	r24, Y+14	; 0x0e
    203a:	9f 85       	ldd	r25, Y+15	; 0x0f
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	53 e4       	ldi	r21, 0x43	; 67
    2044:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	88 87       	std	Y+8, r24	; 0x08
    204e:	99 87       	std	Y+9, r25	; 0x09
    2050:	aa 87       	std	Y+10, r26	; 0x0a
    2052:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2054:	68 85       	ldd	r22, Y+8	; 0x08
    2056:	79 85       	ldd	r23, Y+9	; 0x09
    2058:	8a 85       	ldd	r24, Y+10	; 0x0a
    205a:	9b 85       	ldd	r25, Y+11	; 0x0b
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_voidSendChar+0x106>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9f 83       	std	Y+7, r25	; 0x07
    2072:	8e 83       	std	Y+6, r24	; 0x06
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2076:	68 85       	ldd	r22, Y+8	; 0x08
    2078:	79 85       	ldd	r23, Y+9	; 0x09
    207a:	8a 85       	ldd	r24, Y+10	; 0x0a
    207c:	9b 85       	ldd	r25, Y+11	; 0x0b
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2090:	7d 85       	ldd	r23, Y+13	; 0x0d
    2092:	8e 85       	ldd	r24, Y+14	; 0x0e
    2094:	9f 85       	ldd	r25, Y+15	; 0x0f
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9f 83       	std	Y+7, r25	; 0x07
    20b4:	8e 83       	std	Y+6, r24	; 0x06
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_voidSendChar+0x166>
    20b8:	89 e1       	ldi	r24, 0x19	; 25
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9d 83       	std	Y+5, r25	; 0x05
    20be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	9d 81       	ldd	r25, Y+5	; 0x05
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_voidSendChar+0x154>
    20c8:	9d 83       	std	Y+5, r25	; 0x05
    20ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	9f 81       	ldd	r25, Y+7	; 0x07
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9f 83       	std	Y+7, r25	; 0x07
    20d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8e 81       	ldd	r24, Y+6	; 0x06
    20d8:	9f 81       	ldd	r25, Y+7	; 0x07
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_voidSendChar+0x148>
    20de:	24 c0       	rjmp	.+72     	; 0x2128 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	68 85       	ldd	r22, Y+8	; 0x08
    20e2:	79 85       	ldd	r23, Y+9	; 0x09
    20e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9f 83       	std	Y+7, r25	; 0x07
    20f2:	8e 83       	std	Y+6, r24	; 0x06
    20f4:	8e 81       	ldd	r24, Y+6	; 0x06
    20f6:	9f 81       	ldd	r25, Y+7	; 0x07
    20f8:	9b 83       	std	Y+3, r25	; 0x03
    20fa:	8a 83       	std	Y+2, r24	; 0x02
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_voidSendChar+0x190>
    2104:	9b 83       	std	Y+3, r25	; 0x03
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210a:	69 89       	ldd	r22, Y+17	; 0x11
    210c:	7a 89       	ldd	r23, Y+18	; 0x12
    210e:	8b 89       	ldd	r24, Y+19	; 0x13
    2110:	9c 89       	ldd	r25, Y+20	; 0x14
    2112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	88 8b       	std	Y+16, r24	; 0x10
    211c:	88 89       	ldd	r24, Y+16	; 0x10
    211e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	8a 95       	dec	r24
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_voidSendChar+0x1b2>
    2126:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	62 e0       	ldi	r22, 0x02	; 2
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
      DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);


#endif

}
    2132:	69 96       	adiw	r28, 0x19	; 25
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <LCD_PrintString>:


void LCD_PrintString(const char *str)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <LCD_PrintString+0x6>
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	9b 83       	std	Y+3, r25	; 0x03
    2152:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2154:	19 82       	std	Y+1, r1	; 0x01
    2156:	0e c0       	rjmp	.+28     	; 0x2174 <LCD_PrintString+0x30>
	while (str[i] != '\0')
	{
		LCD_voidSendChar(str[i]);
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	fc 01       	movw	r30, r24
    2164:	e2 0f       	add	r30, r18
    2166:	f3 1f       	adc	r31, r19
    2168:	80 81       	ld	r24, Z
    216a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_voidSendChar>
		i++;
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	89 83       	std	Y+1, r24	; 0x01


void LCD_PrintString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	9b 81       	ldd	r25, Y+3	; 0x03
    217e:	fc 01       	movw	r30, r24
    2180:	e2 0f       	add	r30, r18
    2182:	f3 1f       	adc	r31, r19
    2184:	80 81       	ld	r24, Z
    2186:	88 23       	and	r24, r24
    2188:	39 f7       	brne	.-50     	; 0x2158 <LCD_PrintString+0x14>
        default :  local_u8Errorstate=STD_TYPES_OK;
    }
}
else { local_u8Errorstate=STD_TYPES_OK;}
return local_u8Errorstate;}
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LCD_u8GoToXY.1387>:
	_delay_ms(2);
}


u8 LCD_u8GoToXY(u8 COPY_u8LineNum,u8 Copy_u8location)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <LCD_u8GoToXY.1387+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <LCD_u8GoToXY.1387+0x8>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Errorstate=STD_TYPES_OK;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	89 83       	std	Y+1, r24	; 0x01
    if(COPY_u8LineNum <=39){
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	88 32       	cpi	r24, 0x28	; 40
    21b0:	e8 f4       	brcc	.+58     	; 0x21ec <LCD_u8GoToXY.1387+0x56>
    switch(COPY_u8LineNum)
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	3d 83       	std	Y+5, r19	; 0x05
    21ba:	2c 83       	std	Y+4, r18	; 0x04
    21bc:	8c 81       	ldd	r24, Y+4	; 0x04
    21be:	9d 81       	ldd	r25, Y+5	; 0x05
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	91 05       	cpc	r25, r1
    21c4:	31 f0       	breq	.+12     	; 0x21d2 <LCD_u8GoToXY.1387+0x3c>
    21c6:	2c 81       	ldd	r18, Y+4	; 0x04
    21c8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ca:	22 30       	cpi	r18, 0x02	; 2
    21cc:	31 05       	cpc	r19, r1
    21ce:	31 f0       	breq	.+12     	; 0x21dc <LCD_u8GoToXY.1387+0x46>
    21d0:	0a c0       	rjmp	.+20     	; 0x21e6 <LCD_u8GoToXY.1387+0x50>
    {
        case LCD_u8_LINE1: LCD_voidSendCmnd(0x80+Copy_u8location);  break;
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	80 58       	subi	r24, 0x80	; 128
    21d6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
    21da:	0a c0       	rjmp	.+20     	; 0x21f0 <LCD_u8GoToXY.1387+0x5a>
        case LCD_u8_LINE2: LCD_voidSendCmnd(0xC0+Copy_u8location);  break;
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	80 54       	subi	r24, 0x40	; 64
    21e0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <LCD_u8GoToXY.1387+0x5a>
        default :  local_u8Errorstate=STD_TYPES_OK;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <LCD_u8GoToXY.1387+0x5a>
    }
}
else { local_u8Errorstate=STD_TYPES_OK;}
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	89 83       	std	Y+1, r24	; 0x01
return local_u8Errorstate;}
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <LCD_voidClr.1383>:
		LCD_voidSendChar(str[i]);
		i++;
	}


void LCD_voidClr(){
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	2e 97       	sbiw	r28, 0x0e	; 14
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0x01);
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e0       	ldi	r26, 0x00	; 0
    2222:	b0 e4       	ldi	r27, 0x40	; 64
    2224:	8b 87       	std	Y+11, r24	; 0x0b
    2226:	9c 87       	std	Y+12, r25	; 0x0c
    2228:	ad 87       	std	Y+13, r26	; 0x0d
    222a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	53 e4       	ldi	r21, 0x43	; 67
    223c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8f 83       	std	Y+7, r24	; 0x07
    2246:	98 87       	std	Y+8, r25	; 0x08
    2248:	a9 87       	std	Y+9, r26	; 0x09
    224a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_voidClr.1383+0x6c>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_voidClr.1383+0xea>
	else if (__tmp > 65535)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_voidClr.1383+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6b 85       	ldd	r22, Y+11	; 0x0b
    2288:	7c 85       	ldd	r23, Y+12	; 0x0c
    228a:	8d 85       	ldd	r24, Y+13	; 0x0d
    228c:	9e 85       	ldd	r25, Y+14	; 0x0e
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_voidClr.1383+0xcc>
    22b0:	89 e1       	ldi	r24, 0x19	; 25
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_voidClr.1383+0xba>
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_voidClr.1383+0xae>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_voidClr.1383+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_voidClr.1383+0xf6>
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2300:	2e 96       	adiw	r28, 0x0e	; 14
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <STEPPER_MOTOR_move>:
//	DIO_voidSetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
//
//}

u8 STEPPER_MOTOR_move(u8 copy_u8direction,u8 copy_u8angle)
{
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	c9 57       	subi	r28, 0x79	; 121
    2320:	d0 40       	sbci	r29, 0x00	; 0
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	fe 01       	movw	r30, r28
    232e:	e8 58       	subi	r30, 0x88	; 136
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 83       	st	Z, r24
    2334:	fe 01       	movw	r30, r28
    2336:	e7 58       	subi	r30, 0x87	; 135
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	60 83       	st	Z, r22
    u8 LocalErrorState = STD_TYPES_OK;
    233c:	fe 01       	movw	r30, r28
    233e:	e9 58       	subi	r30, 0x89	; 137
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	80 83       	st	Z, r24
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    2346:	fe 01       	movw	r30, r28
    2348:	e7 58       	subi	r30, 0x87	; 135
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	07 2e       	mov	r0, r23
    2358:	7b e0       	ldi	r23, 0x0B	; 11
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	aa 1f       	adc	r26, r26
    2360:	bb 1f       	adc	r27, r27
    2362:	7a 95       	dec	r23
    2364:	d1 f7       	brne	.-12     	; 0x235a <STEPPER_MOTOR_move+0x48>
    2366:	70 2d       	mov	r23, r0
    2368:	28 e6       	ldi	r18, 0x68	; 104
    236a:	31 e0       	ldi	r19, 0x01	; 1
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__udivmodsi4>
    2378:	da 01       	movw	r26, r20
    237a:	c9 01       	movw	r24, r18
    237c:	fe 01       	movw	r30, r28
    237e:	ea 58       	subi	r30, 0x8A	; 138
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 83       	st	Z, r24
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    2384:	fe 01       	movw	r30, r28
    2386:	e8 58       	subi	r30, 0x88	; 136
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 81       	ld	r24, Z
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	39 f0       	breq	.+14     	; 0x239e <STEPPER_MOTOR_move+0x8c>
    2390:	fe 01       	movw	r30, r28
    2392:	e8 58       	subi	r30, 0x88	; 136
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	88 23       	and	r24, r24
    239a:	09 f0       	breq	.+2      	; 0x239e <STEPPER_MOTOR_move+0x8c>
    239c:	58 c5       	rjmp	.+2736   	; 0x2e4e <STEPPER_MOTOR_move+0xb3c>
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
    239e:	fe 01       	movw	r30, r28
    23a0:	e8 58       	subi	r30, 0x88	; 136
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	09 f0       	breq	.+2      	; 0x23ac <STEPPER_MOTOR_move+0x9a>
    23aa:	10 c3       	rjmp	.+1568   	; 0x29cc <STEPPER_MOTOR_move+0x6ba>
            {
                for(int i=0; i>=Local_u8Steps; i++)
    23ac:	fe 01       	movw	r30, r28
    23ae:	ec 58       	subi	r30, 0x8C	; 140
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	11 82       	std	Z+1, r1	; 0x01
    23b4:	10 82       	st	Z, r1
    23b6:	fa c2       	rjmp	.+1524   	; 0x29ac <STEPPER_MOTOR_move+0x69a>
                {
                    
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	63 e0       	ldi	r22, 0x03	; 3
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	64 e0       	ldi	r22, 0x04	; 4
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	65 e0       	ldi	r22, 0x05	; 5
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	66 e0       	ldi	r22, 0x06	; 6
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    23e0:	fe 01       	movw	r30, r28
    23e2:	e3 59       	subi	r30, 0x93	; 147
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e2       	ldi	r26, 0x20	; 32
    23ec:	b1 e4       	ldi	r27, 0x41	; 65
    23ee:	80 83       	st	Z, r24
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	a2 83       	std	Z+2, r26	; 0x02
    23f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	8e 01       	movw	r16, r28
    23f8:	07 59       	subi	r16, 0x97	; 151
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	fe 01       	movw	r30, r28
    23fe:	e3 59       	subi	r30, 0x93	; 147
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	60 81       	ld	r22, Z
    2404:	71 81       	ldd	r23, Z+1	; 0x01
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a e7       	ldi	r20, 0x7A	; 122
    2410:	53 e4       	ldi	r21, 0x43	; 67
    2412:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	f8 01       	movw	r30, r16
    241c:	80 83       	st	Z, r24
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	a2 83       	std	Z+2, r26	; 0x02
    2422:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2424:	fe 01       	movw	r30, r28
    2426:	e7 59       	subi	r30, 0x97	; 151
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e8       	ldi	r20, 0x80	; 128
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    243e:	88 23       	and	r24, r24
    2440:	44 f4       	brge	.+16     	; 0x2452 <STEPPER_MOTOR_move+0x140>
		__ticks = 1;
    2442:	fe 01       	movw	r30, r28
    2444:	e9 59       	subi	r30, 0x99	; 153
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	64 c0       	rjmp	.+200    	; 0x251a <STEPPER_MOTOR_move+0x208>
	else if (__tmp > 65535)
    2452:	fe 01       	movw	r30, r28
    2454:	e7 59       	subi	r30, 0x97	; 151
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	0c f0       	brlt	.+2      	; 0x2472 <STEPPER_MOTOR_move+0x160>
    2470:	43 c0       	rjmp	.+134    	; 0x24f8 <STEPPER_MOTOR_move+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	fe 01       	movw	r30, r28
    2474:	e3 59       	subi	r30, 0x93	; 147
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8e 01       	movw	r16, r28
    2492:	09 59       	subi	r16, 0x99	; 153
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	f8 01       	movw	r30, r16
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	1f c0       	rjmp	.+62     	; 0x24e8 <STEPPER_MOTOR_move+0x1d6>
    24aa:	fe 01       	movw	r30, r28
    24ac:	eb 59       	subi	r30, 0x9B	; 155
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	89 e1       	ldi	r24, 0x19	; 25
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	80 83       	st	Z, r24
    24b8:	fe 01       	movw	r30, r28
    24ba:	eb 59       	subi	r30, 0x9B	; 155
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <STEPPER_MOTOR_move+0x1b0>
    24c6:	fe 01       	movw	r30, r28
    24c8:	eb 59       	subi	r30, 0x9B	; 155
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d0:	de 01       	movw	r26, r28
    24d2:	a9 59       	subi	r26, 0x99	; 153
    24d4:	bf 4f       	sbci	r27, 0xFF	; 255
    24d6:	fe 01       	movw	r30, r28
    24d8:	e9 59       	subi	r30, 0x99	; 153
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	11 96       	adiw	r26, 0x01	; 1
    24e4:	9c 93       	st	X, r25
    24e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	fe 01       	movw	r30, r28
    24ea:	e9 59       	subi	r30, 0x99	; 153
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	d1 f6       	brne	.-76     	; 0x24aa <STEPPER_MOTOR_move+0x198>
    24f6:	27 c0       	rjmp	.+78     	; 0x2546 <STEPPER_MOTOR_move+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f8:	8e 01       	movw	r16, r28
    24fa:	09 59       	subi	r16, 0x99	; 153
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
    24fe:	fe 01       	movw	r30, r28
    2500:	e7 59       	subi	r30, 0x97	; 151
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	f8 01       	movw	r30, r16
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
    251a:	de 01       	movw	r26, r28
    251c:	ad 59       	subi	r26, 0x9D	; 157
    251e:	bf 4f       	sbci	r27, 0xFF	; 255
    2520:	fe 01       	movw	r30, r28
    2522:	e9 59       	subi	r30, 0x99	; 153
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	8d 93       	st	X+, r24
    252c:	9c 93       	st	X, r25
    252e:	fe 01       	movw	r30, r28
    2530:	ed 59       	subi	r30, 0x9D	; 157
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <STEPPER_MOTOR_move+0x226>
    253c:	fe 01       	movw	r30, r28
    253e:	ed 59       	subi	r30, 0x9D	; 157
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	63 e0       	ldi	r22, 0x03	; 3
    254a:	41 e0       	ldi	r20, 0x01	; 1
    254c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	64 e0       	ldi	r22, 0x04	; 4
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	65 e0       	ldi	r22, 0x05	; 5
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	66 e0       	ldi	r22, 0x06	; 6
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    256e:	fe 01       	movw	r30, r28
    2570:	e1 5a       	subi	r30, 0xA1	; 161
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e2       	ldi	r26, 0x20	; 32
    257a:	b1 e4       	ldi	r27, 0x41	; 65
    257c:	80 83       	st	Z, r24
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	a2 83       	std	Z+2, r26	; 0x02
    2582:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2584:	8e 01       	movw	r16, r28
    2586:	05 5a       	subi	r16, 0xA5	; 165
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	e1 5a       	subi	r30, 0xA1	; 161
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	53 e4       	ldi	r21, 0x43	; 67
    25a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	f8 01       	movw	r30, r16
    25aa:	80 83       	st	Z, r24
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	a2 83       	std	Z+2, r26	; 0x02
    25b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b2:	fe 01       	movw	r30, r28
    25b4:	e5 5a       	subi	r30, 0xA5	; 165
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	44 f4       	brge	.+16     	; 0x25e0 <STEPPER_MOTOR_move+0x2ce>
		__ticks = 1;
    25d0:	fe 01       	movw	r30, r28
    25d2:	e7 5a       	subi	r30, 0xA7	; 167
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
    25de:	64 c0       	rjmp	.+200    	; 0x26a8 <STEPPER_MOTOR_move+0x396>
	else if (__tmp > 65535)
    25e0:	fe 01       	movw	r30, r28
    25e2:	e5 5a       	subi	r30, 0xA5	; 165
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	0c f0       	brlt	.+2      	; 0x2600 <STEPPER_MOTOR_move+0x2ee>
    25fe:	43 c0       	rjmp	.+134    	; 0x2686 <STEPPER_MOTOR_move+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	fe 01       	movw	r30, r28
    2602:	e1 5a       	subi	r30, 0xA1	; 161
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	8e 01       	movw	r16, r28
    2620:	07 5a       	subi	r16, 0xA7	; 167
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	f8 01       	movw	r30, r16
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	1f c0       	rjmp	.+62     	; 0x2676 <STEPPER_MOTOR_move+0x364>
    2638:	fe 01       	movw	r30, r28
    263a:	e9 5a       	subi	r30, 0xA9	; 169
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	89 e1       	ldi	r24, 0x19	; 25
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	fe 01       	movw	r30, r28
    2648:	e9 5a       	subi	r30, 0xA9	; 169
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <STEPPER_MOTOR_move+0x33e>
    2654:	fe 01       	movw	r30, r28
    2656:	e9 5a       	subi	r30, 0xA9	; 169
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	de 01       	movw	r26, r28
    2660:	a7 5a       	subi	r26, 0xA7	; 167
    2662:	bf 4f       	sbci	r27, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e7 5a       	subi	r30, 0xA7	; 167
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	9c 93       	st	X, r25
    2674:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5a       	subi	r30, 0xA7	; 167
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	d1 f6       	brne	.-76     	; 0x2638 <STEPPER_MOTOR_move+0x326>
    2684:	27 c0       	rjmp	.+78     	; 0x26d4 <STEPPER_MOTOR_move+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2686:	8e 01       	movw	r16, r28
    2688:	07 5a       	subi	r16, 0xA7	; 167
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	fe 01       	movw	r30, r28
    268e:	e5 5a       	subi	r30, 0xA5	; 165
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	f8 01       	movw	r30, r16
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	de 01       	movw	r26, r28
    26aa:	ab 5a       	subi	r26, 0xAB	; 171
    26ac:	bf 4f       	sbci	r27, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5a       	subi	r30, 0xA7	; 167
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	8d 93       	st	X+, r24
    26ba:	9c 93       	st	X, r25
    26bc:	fe 01       	movw	r30, r28
    26be:	eb 5a       	subi	r30, 0xAB	; 171
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <STEPPER_MOTOR_move+0x3b4>
    26ca:	fe 01       	movw	r30, r28
    26cc:	eb 5a       	subi	r30, 0xAB	; 171
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	63 e0       	ldi	r22, 0x03	; 3
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	64 e0       	ldi	r22, 0x04	; 4
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	65 e0       	ldi	r22, 0x05	; 5
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	66 e0       	ldi	r22, 0x06	; 6
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    26fc:	fe 01       	movw	r30, r28
    26fe:	ef 5a       	subi	r30, 0xAF	; 175
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a0 e2       	ldi	r26, 0x20	; 32
    2708:	b1 e4       	ldi	r27, 0x41	; 65
    270a:	80 83       	st	Z, r24
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	a2 83       	std	Z+2, r26	; 0x02
    2710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	8e 01       	movw	r16, r28
    2714:	03 5b       	subi	r16, 0xB3	; 179
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	ef 5a       	subi	r30, 0xAF	; 175
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a e7       	ldi	r20, 0x7A	; 122
    272c:	53 e4       	ldi	r21, 0x43	; 67
    272e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	80 83       	st	Z, r24
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	a2 83       	std	Z+2, r26	; 0x02
    273e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2740:	fe 01       	movw	r30, r28
    2742:	e3 5b       	subi	r30, 0xB3	; 179
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	44 f4       	brge	.+16     	; 0x276e <STEPPER_MOTOR_move+0x45c>
		__ticks = 1;
    275e:	fe 01       	movw	r30, r28
    2760:	e5 5b       	subi	r30, 0xB5	; 181
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	64 c0       	rjmp	.+200    	; 0x2836 <STEPPER_MOTOR_move+0x524>
	else if (__tmp > 65535)
    276e:	fe 01       	movw	r30, r28
    2770:	e3 5b       	subi	r30, 0xB3	; 179
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	3f ef       	ldi	r19, 0xFF	; 255
    2780:	4f e7       	ldi	r20, 0x7F	; 127
    2782:	57 e4       	ldi	r21, 0x47	; 71
    2784:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2788:	18 16       	cp	r1, r24
    278a:	0c f0       	brlt	.+2      	; 0x278e <STEPPER_MOTOR_move+0x47c>
    278c:	43 c0       	rjmp	.+134    	; 0x2814 <STEPPER_MOTOR_move+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278e:	fe 01       	movw	r30, r28
    2790:	ef 5a       	subi	r30, 0xAF	; 175
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8e 01       	movw	r16, r28
    27ae:	05 5b       	subi	r16, 0xB5	; 181
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	f8 01       	movw	r30, r16
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
    27c4:	1f c0       	rjmp	.+62     	; 0x2804 <STEPPER_MOTOR_move+0x4f2>
    27c6:	fe 01       	movw	r30, r28
    27c8:	e7 5b       	subi	r30, 0xB7	; 183
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	89 e1       	ldi	r24, 0x19	; 25
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
    27d4:	fe 01       	movw	r30, r28
    27d6:	e7 5b       	subi	r30, 0xB7	; 183
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <STEPPER_MOTOR_move+0x4cc>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e7 5b       	subi	r30, 0xB7	; 183
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	de 01       	movw	r26, r28
    27ee:	a5 5b       	subi	r26, 0xB5	; 181
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e5 5b       	subi	r30, 0xB5	; 181
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	11 96       	adiw	r26, 0x01	; 1
    2800:	9c 93       	st	X, r25
    2802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	fe 01       	movw	r30, r28
    2806:	e5 5b       	subi	r30, 0xB5	; 181
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	d1 f6       	brne	.-76     	; 0x27c6 <STEPPER_MOTOR_move+0x4b4>
    2812:	27 c0       	rjmp	.+78     	; 0x2862 <STEPPER_MOTOR_move+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	8e 01       	movw	r16, r28
    2816:	05 5b       	subi	r16, 0xB5	; 181
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	fe 01       	movw	r30, r28
    281c:	e3 5b       	subi	r30, 0xB3	; 179
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	f8 01       	movw	r30, r16
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	de 01       	movw	r26, r28
    2838:	a9 5b       	subi	r26, 0xB9	; 185
    283a:	bf 4f       	sbci	r27, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e5 5b       	subi	r30, 0xB5	; 181
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	8d 93       	st	X+, r24
    2848:	9c 93       	st	X, r25
    284a:	fe 01       	movw	r30, r28
    284c:	e9 5b       	subi	r30, 0xB9	; 185
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <STEPPER_MOTOR_move+0x542>
    2858:	fe 01       	movw	r30, r28
    285a:	e9 5b       	subi	r30, 0xB9	; 185
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2862:	82 e0       	ldi	r24, 0x02	; 2
    2864:	63 e0       	ldi	r22, 0x03	; 3
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	64 e0       	ldi	r22, 0x04	; 4
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	65 e0       	ldi	r22, 0x05	; 5
    287a:	41 e0       	ldi	r20, 0x01	; 1
    287c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	66 e0       	ldi	r22, 0x06	; 6
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    288a:	fe 01       	movw	r30, r28
    288c:	ed 5b       	subi	r30, 0xBD	; 189
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 e2       	ldi	r26, 0x20	; 32
    2896:	b1 e4       	ldi	r27, 0x41	; 65
    2898:	80 83       	st	Z, r24
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	a2 83       	std	Z+2, r26	; 0x02
    289e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	8e 01       	movw	r16, r28
    28a2:	01 5c       	subi	r16, 0xC1	; 193
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	fe 01       	movw	r30, r28
    28a8:	ed 5b       	subi	r30, 0xBD	; 189
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a e7       	ldi	r20, 0x7A	; 122
    28ba:	53 e4       	ldi	r21, 0x43	; 67
    28bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 83       	st	Z, r24
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	a2 83       	std	Z+2, r26	; 0x02
    28cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ce:	fe 01       	movw	r30, r28
    28d0:	ff 96       	adiw	r30, 0x3f	; 63
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	2c f4       	brge	.+10     	; 0x28f4 <STEPPER_MOTOR_move+0x5e2>
		__ticks = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9e af       	std	Y+62, r25	; 0x3e
    28f0:	8d af       	std	Y+61, r24	; 0x3d
    28f2:	46 c0       	rjmp	.+140    	; 0x2980 <STEPPER_MOTOR_move+0x66e>
	else if (__tmp > 65535)
    28f4:	fe 01       	movw	r30, r28
    28f6:	ff 96       	adiw	r30, 0x3f	; 63
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	57 e4       	ldi	r21, 0x47	; 71
    2908:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    290c:	18 16       	cp	r1, r24
    290e:	64 f5       	brge	.+88     	; 0x2968 <STEPPER_MOTOR_move+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2910:	fe 01       	movw	r30, r28
    2912:	ed 5b       	subi	r30, 0xBD	; 189
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9e af       	std	Y+62, r25	; 0x3e
    293c:	8d af       	std	Y+61, r24	; 0x3d
    293e:	0f c0       	rjmp	.+30     	; 0x295e <STEPPER_MOTOR_move+0x64c>
    2940:	89 e1       	ldi	r24, 0x19	; 25
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9c af       	std	Y+60, r25	; 0x3c
    2946:	8b af       	std	Y+59, r24	; 0x3b
    2948:	8b ad       	ldd	r24, Y+59	; 0x3b
    294a:	9c ad       	ldd	r25, Y+60	; 0x3c
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <STEPPER_MOTOR_move+0x63a>
    2950:	9c af       	std	Y+60, r25	; 0x3c
    2952:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8d ad       	ldd	r24, Y+61	; 0x3d
    2956:	9e ad       	ldd	r25, Y+62	; 0x3e
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	9e af       	std	Y+62, r25	; 0x3e
    295c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2960:	9e ad       	ldd	r25, Y+62	; 0x3e
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <STEPPER_MOTOR_move+0x62e>
    2966:	16 c0       	rjmp	.+44     	; 0x2994 <STEPPER_MOTOR_move+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	fe 01       	movw	r30, r28
    296a:	ff 96       	adiw	r30, 0x3f	; 63
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e af       	std	Y+62, r25	; 0x3e
    297e:	8d af       	std	Y+61, r24	; 0x3d
    2980:	8d ad       	ldd	r24, Y+61	; 0x3d
    2982:	9e ad       	ldd	r25, Y+62	; 0x3e
    2984:	9a af       	std	Y+58, r25	; 0x3a
    2986:	89 af       	std	Y+57, r24	; 0x39
    2988:	89 ad       	ldd	r24, Y+57	; 0x39
    298a:	9a ad       	ldd	r25, Y+58	; 0x3a
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <STEPPER_MOTOR_move+0x67a>
    2990:	9a af       	std	Y+58, r25	; 0x3a
    2992:	89 af       	std	Y+57, r24	; 0x39
    u8 Local_u8Steps = (copy_u8angle *DEGREE_PER_STEP)/360;
    if((copy_u8angle>=0 && copy_u8angle<=360) && (copy_u8direction==STEPPER_MOTOR_CW || copy_u8direction==STEPPER_MOTOR_CCW ))
    {
         if(copy_u8direction==STEPPER_MOTOR_CW)
            {
                for(int i=0; i>=Local_u8Steps; i++)
    2994:	de 01       	movw	r26, r28
    2996:	ac 58       	subi	r26, 0x8C	; 140
    2998:	bf 4f       	sbci	r27, 0xFF	; 255
    299a:	fe 01       	movw	r30, r28
    299c:	ec 58       	subi	r30, 0x8C	; 140
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	11 96       	adiw	r26, 0x01	; 1
    29a8:	9c 93       	st	X, r25
    29aa:	8e 93       	st	-X, r24
    29ac:	fe 01       	movw	r30, r28
    29ae:	ea 58       	subi	r30, 0x8A	; 138
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	28 2f       	mov	r18, r24
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	fe 01       	movw	r30, r28
    29ba:	ec 58       	subi	r30, 0x8C	; 140
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	82 17       	cp	r24, r18
    29c4:	93 07       	cpc	r25, r19
    29c6:	0c f0       	brlt	.+2      	; 0x29ca <STEPPER_MOTOR_move+0x6b8>
    29c8:	f7 cc       	rjmp	.-1554   	; 0x23b8 <STEPPER_MOTOR_move+0xa6>
    29ca:	45 c2       	rjmp	.+1162   	; 0x2e56 <STEPPER_MOTOR_move+0xb44>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
    29cc:	fe 01       	movw	r30, r28
    29ce:	e8 58       	subi	r30, 0x88	; 136
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 81       	ld	r24, Z
    29d4:	88 23       	and	r24, r24
    29d6:	09 f0       	breq	.+2      	; 0x29da <STEPPER_MOTOR_move+0x6c8>
    29d8:	3e c2       	rjmp	.+1148   	; 0x2e56 <STEPPER_MOTOR_move+0xb44>
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    29da:	fe 01       	movw	r30, r28
    29dc:	ee 58       	subi	r30, 0x8E	; 142
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	11 82       	std	Z+1, r1	; 0x01
    29e2:	10 82       	st	Z, r1
    29e4:	24 c2       	rjmp	.+1096   	; 0x2e2e <STEPPER_MOTOR_move+0xb1c>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	63 e0       	ldi	r22, 0x03	; 3
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	64 e0       	ldi	r22, 0x04	; 4
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	65 e0       	ldi	r22, 0x05	; 5
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_LOW);
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	66 e0       	ldi	r22, 0x06	; 6
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 e2       	ldi	r26, 0x20	; 32
    2a14:	b1 e4       	ldi	r27, 0x41	; 65
    2a16:	8d ab       	std	Y+53, r24	; 0x35
    2a18:	9e ab       	std	Y+54, r25	; 0x36
    2a1a:	af ab       	std	Y+55, r26	; 0x37
    2a1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a20:	7e a9       	ldd	r23, Y+54	; 0x36
    2a22:	8f a9       	ldd	r24, Y+55	; 0x37
    2a24:	98 ad       	ldd	r25, Y+56	; 0x38
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a e7       	ldi	r20, 0x7A	; 122
    2a2c:	53 e4       	ldi	r21, 0x43	; 67
    2a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	89 ab       	std	Y+49, r24	; 0x31
    2a38:	9a ab       	std	Y+50, r25	; 0x32
    2a3a:	ab ab       	std	Y+51, r26	; 0x33
    2a3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a40:	7a a9       	ldd	r23, Y+50	; 0x32
    2a42:	8b a9       	ldd	r24, Y+51	; 0x33
    2a44:	9c a9       	ldd	r25, Y+52	; 0x34
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <STEPPER_MOTOR_move+0x74e>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	98 ab       	std	Y+48, r25	; 0x30
    2a5c:	8f a7       	std	Y+47, r24	; 0x2f
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <STEPPER_MOTOR_move+0x7cc>
	else if (__tmp > 65535)
    2a60:	69 a9       	ldd	r22, Y+49	; 0x31
    2a62:	7a a9       	ldd	r23, Y+50	; 0x32
    2a64:	8b a9       	ldd	r24, Y+51	; 0x33
    2a66:	9c a9       	ldd	r25, Y+52	; 0x34
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	4c f5       	brge	.+82     	; 0x2aca <STEPPER_MOTOR_move+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	6d a9       	ldd	r22, Y+53	; 0x35
    2a7a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	98 ab       	std	Y+48, r25	; 0x30
    2a9e:	8f a7       	std	Y+47, r24	; 0x2f
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <STEPPER_MOTOR_move+0x7ae>
    2aa2:	89 e1       	ldi	r24, 0x19	; 25
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9e a7       	std	Y+46, r25	; 0x2e
    2aa8:	8d a7       	std	Y+45, r24	; 0x2d
    2aaa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aac:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <STEPPER_MOTOR_move+0x79c>
    2ab2:	9e a7       	std	Y+46, r25	; 0x2e
    2ab4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	98 ab       	std	Y+48, r25	; 0x30
    2abe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <STEPPER_MOTOR_move+0x790>
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <STEPPER_MOTOR_move+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	69 a9       	ldd	r22, Y+49	; 0x31
    2acc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ace:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	98 ab       	std	Y+48, r25	; 0x30
    2adc:	8f a7       	std	Y+47, r24	; 0x2f
    2ade:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae2:	9c a7       	std	Y+44, r25	; 0x2c
    2ae4:	8b a7       	std	Y+43, r24	; 0x2b
    2ae6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ae8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <STEPPER_MOTOR_move+0x7d8>
    2aee:	9c a7       	std	Y+44, r25	; 0x2c
    2af0:	8b a7       	std	Y+43, r24	; 0x2b
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	63 e0       	ldi	r22, 0x03	; 3
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	64 e0       	ldi	r22, 0x04	; 4
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_LOW);
    2b06:	82 e0       	ldi	r24, 0x02	; 2
    2b08:	65 e0       	ldi	r22, 0x05	; 5
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	66 e0       	ldi	r22, 0x06	; 6
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a0 e2       	ldi	r26, 0x20	; 32
    2b20:	b1 e4       	ldi	r27, 0x41	; 65
    2b22:	8f a3       	std	Y+39, r24	; 0x27
    2b24:	98 a7       	std	Y+40, r25	; 0x28
    2b26:	a9 a7       	std	Y+41, r26	; 0x29
    2b28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b2c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b2e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b30:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	4a e7       	ldi	r20, 0x7A	; 122
    2b38:	53 e4       	ldi	r21, 0x43	; 67
    2b3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	8b a3       	std	Y+35, r24	; 0x23
    2b44:	9c a3       	std	Y+36, r25	; 0x24
    2b46:	ad a3       	std	Y+37, r26	; 0x25
    2b48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b50:	9e a1       	ldd	r25, Y+38	; 0x26
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e8       	ldi	r20, 0x80	; 128
    2b58:	5f e3       	ldi	r21, 0x3F	; 63
    2b5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b5e:	88 23       	and	r24, r24
    2b60:	2c f4       	brge	.+10     	; 0x2b6c <STEPPER_MOTOR_move+0x85a>
		__ticks = 1;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	9a a3       	std	Y+34, r25	; 0x22
    2b68:	89 a3       	std	Y+33, r24	; 0x21
    2b6a:	3f c0       	rjmp	.+126    	; 0x2bea <STEPPER_MOTOR_move+0x8d8>
	else if (__tmp > 65535)
    2b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b70:	8d a1       	ldd	r24, Y+37	; 0x25
    2b72:	9e a1       	ldd	r25, Y+38	; 0x26
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b80:	18 16       	cp	r1, r24
    2b82:	4c f5       	brge	.+82     	; 0x2bd6 <STEPPER_MOTOR_move+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b84:	6f a1       	ldd	r22, Y+39	; 0x27
    2b86:	78 a5       	ldd	r23, Y+40	; 0x28
    2b88:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e2       	ldi	r20, 0x20	; 32
    2b92:	51 e4       	ldi	r21, 0x41	; 65
    2b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	cd 01       	movw	r24, r26
    2ba0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9a a3       	std	Y+34, r25	; 0x22
    2baa:	89 a3       	std	Y+33, r24	; 0x21
    2bac:	0f c0       	rjmp	.+30     	; 0x2bcc <STEPPER_MOTOR_move+0x8ba>
    2bae:	89 e1       	ldi	r24, 0x19	; 25
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	98 a3       	std	Y+32, r25	; 0x20
    2bb4:	8f 8f       	std	Y+31, r24	; 0x1f
    2bb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bb8:	98 a1       	ldd	r25, Y+32	; 0x20
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <STEPPER_MOTOR_move+0x8a8>
    2bbe:	98 a3       	std	Y+32, r25	; 0x20
    2bc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	9a a3       	std	Y+34, r25	; 0x22
    2bca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bce:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	69 f7       	brne	.-38     	; 0x2bae <STEPPER_MOTOR_move+0x89c>
    2bd4:	14 c0       	rjmp	.+40     	; 0x2bfe <STEPPER_MOTOR_move+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bda:	8d a1       	ldd	r24, Y+37	; 0x25
    2bdc:	9e a1       	ldd	r25, Y+38	; 0x26
    2bde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9a a3       	std	Y+34, r25	; 0x22
    2be8:	89 a3       	std	Y+33, r24	; 0x21
    2bea:	89 a1       	ldd	r24, Y+33	; 0x21
    2bec:	9a a1       	ldd	r25, Y+34	; 0x22
    2bee:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf0:	8d 8f       	std	Y+29, r24	; 0x1d
    2bf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <STEPPER_MOTOR_move+0x8e4>
    2bfa:	9e 8f       	std	Y+30, r25	; 0x1e
    2bfc:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_HIGH);
    2bfe:	82 e0       	ldi	r24, 0x02	; 2
    2c00:	63 e0       	ldi	r22, 0x03	; 3
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_LOW);
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	64 e0       	ldi	r22, 0x04	; 4
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	65 e0       	ldi	r22, 0x05	; 5
    2c16:	41 e0       	ldi	r20, 0x01	; 1
    2c18:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	66 e0       	ldi	r22, 0x06	; 6
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 e2       	ldi	r26, 0x20	; 32
    2c2c:	b1 e4       	ldi	r27, 0x41	; 65
    2c2e:	89 8f       	std	Y+25, r24	; 0x19
    2c30:	9a 8f       	std	Y+26, r25	; 0x1a
    2c32:	ab 8f       	std	Y+27, r26	; 0x1b
    2c34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c36:	69 8d       	ldd	r22, Y+25	; 0x19
    2c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a e7       	ldi	r20, 0x7A	; 122
    2c44:	53 e4       	ldi	r21, 0x43	; 67
    2c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8d 8b       	std	Y+21, r24	; 0x15
    2c50:	9e 8b       	std	Y+22, r25	; 0x16
    2c52:	af 8b       	std	Y+23, r26	; 0x17
    2c54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c56:	6d 89       	ldd	r22, Y+21	; 0x15
    2c58:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	2c f4       	brge	.+10     	; 0x2c78 <STEPPER_MOTOR_move+0x966>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
    2c76:	3f c0       	rjmp	.+126    	; 0x2cf6 <STEPPER_MOTOR_move+0x9e4>
	else if (__tmp > 65535)
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	3f ef       	ldi	r19, 0xFF	; 255
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	57 e4       	ldi	r21, 0x47	; 71
    2c88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	4c f5       	brge	.+82     	; 0x2ce2 <STEPPER_MOTOR_move+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c90:	69 8d       	ldd	r22, Y+25	; 0x19
    2c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9c 8b       	std	Y+20, r25	; 0x14
    2cb6:	8b 8b       	std	Y+19, r24	; 0x13
    2cb8:	0f c0       	rjmp	.+30     	; 0x2cd8 <STEPPER_MOTOR_move+0x9c6>
    2cba:	89 e1       	ldi	r24, 0x19	; 25
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	9a 8b       	std	Y+18, r25	; 0x12
    2cc0:	89 8b       	std	Y+17, r24	; 0x11
    2cc2:	89 89       	ldd	r24, Y+17	; 0x11
    2cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <STEPPER_MOTOR_move+0x9b4>
    2cca:	9a 8b       	std	Y+18, r25	; 0x12
    2ccc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cce:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9c 8b       	std	Y+20, r25	; 0x14
    2cd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	69 f7       	brne	.-38     	; 0x2cba <STEPPER_MOTOR_move+0x9a8>
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <STEPPER_MOTOR_move+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfa:	98 8b       	std	Y+16, r25	; 0x10
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
    2cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d00:	98 89       	ldd	r25, Y+16	; 0x10
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <STEPPER_MOTOR_move+0x9f0>
    2d06:	98 8b       	std	Y+16, r25	; 0x10
    2d08:	8f 87       	std	Y+15, r24	; 0x0f
                    _delay_ms(10);
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_u8_LOW);
    2d0a:	82 e0       	ldi	r24, 0x02	; 2
    2d0c:	63 e0       	ldi	r22, 0x03	; 3
    2d0e:	40 e0       	ldi	r20, 0x00	; 0
    2d10:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_u8_HIGH);
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	64 e0       	ldi	r22, 0x04	; 4
    2d18:	41 e0       	ldi	r20, 0x01	; 1
    2d1a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_u8_HIGH);
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	65 e0       	ldi	r22, 0x05	; 5
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
                    DIO_voidSetPinValue (STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_u8_HIGH);
    2d28:	82 e0       	ldi	r24, 0x02	; 2
    2d2a:	66 e0       	ldi	r22, 0x06	; 6
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a0 e2       	ldi	r26, 0x20	; 32
    2d38:	b1 e4       	ldi	r27, 0x41	; 65
    2d3a:	8b 87       	std	Y+11, r24	; 0x0b
    2d3c:	9c 87       	std	Y+12, r25	; 0x0c
    2d3e:	ad 87       	std	Y+13, r26	; 0x0d
    2d40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	4a e7       	ldi	r20, 0x7A	; 122
    2d50:	53 e4       	ldi	r21, 0x43	; 67
    2d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	8f 83       	std	Y+7, r24	; 0x07
    2d5c:	98 87       	std	Y+8, r25	; 0x08
    2d5e:	a9 87       	std	Y+9, r26	; 0x09
    2d60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d62:	6f 81       	ldd	r22, Y+7	; 0x07
    2d64:	78 85       	ldd	r23, Y+8	; 0x08
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	2c f4       	brge	.+10     	; 0x2d84 <STEPPER_MOTOR_move+0xa72>
		__ticks = 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9e 83       	std	Y+6, r25	; 0x06
    2d80:	8d 83       	std	Y+5, r24	; 0x05
    2d82:	3f c0       	rjmp	.+126    	; 0x2e02 <STEPPER_MOTOR_move+0xaf0>
	else if (__tmp > 65535)
    2d84:	6f 81       	ldd	r22, Y+7	; 0x07
    2d86:	78 85       	ldd	r23, Y+8	; 0x08
    2d88:	89 85       	ldd	r24, Y+9	; 0x09
    2d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	4c f5       	brge	.+82     	; 0x2dee <STEPPER_MOTOR_move+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <STEPPER_MOTOR_move+0xad2>
    2dc6:	89 e1       	ldi	r24, 0x19	; 25
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	9c 83       	std	Y+4, r25	; 0x04
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <STEPPER_MOTOR_move+0xac0>
    2dd6:	9c 83       	std	Y+4, r25	; 0x04
    2dd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <STEPPER_MOTOR_move+0xab4>
    2dec:	14 c0       	rjmp	.+40     	; 0x2e16 <STEPPER_MOTOR_move+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	6f 81       	ldd	r22, Y+7	; 0x07
    2df0:	78 85       	ldd	r23, Y+8	; 0x08
    2df2:	89 85       	ldd	r24, Y+9	; 0x09
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	8d 83       	std	Y+5, r24	; 0x05
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	9e 81       	ldd	r25, Y+6	; 0x06
    2e06:	9a 83       	std	Y+2, r25	; 0x02
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <STEPPER_MOTOR_move+0xafc>
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(10);
                }
            }
                else if (copy_u8direction==STEPPER_MOTOR_CCW)
                {
                    for(int i=0; i>=Local_u8Steps; i++){
    2e16:	de 01       	movw	r26, r28
    2e18:	ae 58       	subi	r26, 0x8E	; 142
    2e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ee 58       	subi	r30, 0x8E	; 142
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	9c 93       	st	X, r25
    2e2c:	8e 93       	st	-X, r24
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ea 58       	subi	r30, 0x8A	; 138
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	28 2f       	mov	r18, r24
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ee 58       	subi	r30, 0x8E	; 142
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	82 17       	cp	r24, r18
    2e46:	93 07       	cpc	r25, r19
    2e48:	0c f0       	brlt	.+2      	; 0x2e4c <STEPPER_MOTOR_move+0xb3a>
    2e4a:	cd cd       	rjmp	.-1126   	; 0x29e6 <STEPPER_MOTOR_move+0x6d4>
    2e4c:	04 c0       	rjmp	.+8      	; 0x2e56 <STEPPER_MOTOR_move+0xb44>
                }
                
    }
    

else{u8 LocalErrorState = STD_TYPES_NOK;}
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ef 58       	subi	r30, 0x8F	; 143
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	10 82       	st	Z, r1
return LocalErrorState;
    2e56:	fe 01       	movw	r30, r28
    2e58:	e9 58       	subi	r30, 0x89	; 137
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
}
    2e5e:	c7 58       	subi	r28, 0x87	; 135
    2e60:	df 4f       	sbci	r29, 0xFF	; 255
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	08 95       	ret

00002e76 <main>:
#include <util/delay.h>



int main(void)
{
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	c2 59       	subi	r28, 0x92	; 146
    2e84:	d0 40       	sbci	r29, 0x00	; 0
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	DIO_voidInit();
    2e90:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_voidInit>
	LCD_voideInit();
    2e94:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>
	LCD_PrintString("enter password");
    2e98:	80 e6       	ldi	r24, 0x60	; 96
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
	u8 password[4] = {'1','2','3','3'};
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e1 57       	subi	r30, 0x71	; 113
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	81 e3       	ldi	r24, 0x31	; 49
    2ea8:	80 83       	st	Z, r24
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e1 57       	subi	r30, 0x71	; 113
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	82 e3       	ldi	r24, 0x32	; 50
    2eb2:	81 83       	std	Z+1, r24	; 0x01
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e1 57       	subi	r30, 0x71	; 113
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	83 e3       	ldi	r24, 0x33	; 51
    2ebc:	82 83       	std	Z+2, r24	; 0x02
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e1 57       	subi	r30, 0x71	; 113
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	83 e3       	ldi	r24, 0x33	; 51
    2ec6:	83 83       	std	Z+3, r24	; 0x03
	u8 index = 0;
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e3 57       	subi	r30, 0x73	; 115
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	10 82       	st	Z, r1

	while(1)
	{
		LCD_voidSendCmnd(0xC0);
    2ed0:	80 ec       	ldi	r24, 0xC0	; 192
    2ed2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
    2ed6:	2f c0       	rjmp	.+94     	; 0x2f36 <main+0xc0>
		while(index<4)
		{
			KPD_u8GetKeyState(&Local_u8Key);
    2ed8:	ce 01       	movw	r24, r28
    2eda:	82 57       	subi	r24, 0x72	; 114
    2edc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ede:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <KPD_u8GetKeyState>

			  if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e2 57       	subi	r30, 0x72	; 114
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	8f 3f       	cpi	r24, 0xFF	; 255
    2eec:	21 f1       	breq	.+72     	; 0x2f36 <main+0xc0>
           LCD_voideInit();
    2eee:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>

	         LCD_voidSendChar(Local_u8Key);
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e2 57       	subi	r30, 0x72	; 114
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	80 81       	ld	r24, Z
    2efa:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_voidSendChar>
	         if (password[index] == Local_u8Key){
    2efe:	fe 01       	movw	r30, r28
    2f00:	e3 57       	subi	r30, 0x73	; 115
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 81       	ld	r24, Z
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	81 57       	subi	r24, 0x71	; 113
    2f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f10:	fc 01       	movw	r30, r24
    2f12:	e2 0f       	add	r30, r18
    2f14:	f3 1f       	adc	r31, r19
    2f16:	90 81       	ld	r25, Z
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e2 57       	subi	r30, 0x72	; 114
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	98 17       	cp	r25, r24
    2f22:	79 f4       	brne	.+30     	; 0x2f42 <main+0xcc>
	        	 index++;
    2f24:	de 01       	movw	r26, r28
    2f26:	a3 57       	subi	r26, 0x73	; 115
    2f28:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e3 57       	subi	r30, 0x73	; 115
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	8c 93       	st	X, r24
	u8 index = 0;

	while(1)
	{
		LCD_voidSendCmnd(0xC0);
		while(index<4)
    2f36:	fe 01       	movw	r30, r28
    2f38:	e3 57       	subi	r30, 0x73	; 115
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	84 30       	cpi	r24, 0x04	; 4
    2f40:	58 f2       	brcs	.-106    	; 0x2ed8 <main+0x62>
		}
	         else {break;}

	   }}

			  if(index >=4){
    2f42:	fe 01       	movw	r30, r28
    2f44:	e3 57       	subi	r30, 0x73	; 115
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	84 30       	cpi	r24, 0x04	; 4
    2f4c:	08 f4       	brcc	.+2      	; 0x2f50 <main+0xda>
    2f4e:	46 c7       	rjmp	.+3724   	; 0x3ddc <main+0xf66>
				LCD_voideInit();
    2f50:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>

				  LCD_PrintString("1-DC 2-steper");
    2f54:	8f e6       	ldi	r24, 0x6F	; 111
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
				  LCD_voidSendCmnd(0xC0);
    2f5c:	80 ec       	ldi	r24, 0xC0	; 192
    2f5e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
				  LCD_PrintString("3-exit");
    2f62:	8d e7       	ldi	r24, 0x7D	; 125
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
				  while(1){
					KPD_u8GetKeyState(&Local_u8Key);
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	82 57       	subi	r24, 0x72	; 114
    2f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f70:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <KPD_u8GetKeyState>
					 if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    2f74:	fe 01       	movw	r30, r28
    2f76:	e2 57       	subi	r30, 0x72	; 114
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f7e:	a9 f3       	breq	.-22     	; 0x2f6a <main+0xf4>
						if(Local_u8Key=='1'){
    2f80:	fe 01       	movw	r30, r28
    2f82:	e2 57       	subi	r30, 0x72	; 114
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	81 33       	cpi	r24, 0x31	; 49
    2f8a:	51 f5       	brne	.+84     	; 0x2fe0 <main+0x16a>
							LCD_voideInit();
    2f8c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>
							LCD_PrintString("1-ccw");
    2f90:	84 e8       	ldi	r24, 0x84	; 132
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
							LCD_voidSendCmnd(0xC0);
    2f98:	80 ec       	ldi	r24, 0xC0	; 192
    2f9a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
							LCD_PrintString("1-cw");
    2f9e:	8a e8       	ldi	r24, 0x8A	; 138
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
							while(1){
								KPD_u8GetKeyState(&Local_u8Key);
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	82 57       	subi	r24, 0x72	; 114
    2faa:	9f 4f       	sbci	r25, 0xFF	; 255
    2fac:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <KPD_u8GetKeyState>
								if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED){
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e2 57       	subi	r30, 0x72	; 114
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    2fba:	a9 f3       	breq	.-22     	; 0x2fa6 <main+0x130>
									if(Local_u8Key=='1'){
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e2 57       	subi	r30, 0x72	; 114
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 81       	ld	r24, Z
    2fc4:	81 33       	cpi	r24, 0x31	; 49
    2fc6:	19 f4       	brne	.+6      	; 0x2fce <main+0x158>
										DC_Motor_Rotate_Clockwise();
    2fc8:	0e 94 53 06 	call	0xca6	; 0xca6 <DC_Motor_Rotate_Clockwise>
    2fcc:	ce cf       	rjmp	.-100    	; 0x2f6a <main+0xf4>
										break;
									}
									else if (Local_u8Key=='2')
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e2 57       	subi	r30, 0x72	; 114
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 81       	ld	r24, Z
    2fd6:	82 33       	cpi	r24, 0x32	; 50
    2fd8:	31 f7       	brne	.-52     	; 0x2fa6 <main+0x130>
									{
										DC_Motor_Rotate_CounterClockwise();
    2fda:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DC_Motor_Rotate_CounterClockwise>
    2fde:	c5 cf       	rjmp	.-118    	; 0x2f6a <main+0xf4>
									}
									
								}
							}
						}
						else if (Local_u8Key=='2')
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e2 57       	subi	r30, 0x72	; 114
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 81       	ld	r24, Z
    2fe8:	82 33       	cpi	r24, 0x32	; 50
    2fea:	09 f0       	breq	.+2      	; 0x2fee <main+0x178>
    2fec:	be cf       	rjmp	.-132    	; 0x2f6a <main+0xf4>
						{
							LCD_voideInit();
    2fee:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>
							LCD_PrintString("1-cw");
    2ff2:	8a e8       	ldi	r24, 0x8A	; 138
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
							LCD_voidSendCmnd(0xC0);
    2ffa:	80 ec       	ldi	r24, 0xC0	; 192
    2ffc:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
							LCD_PrintString("1-ccw");
    3000:	84 e8       	ldi	r24, 0x84	; 132
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
							while(1){
								KPD_u8GetKeyState(&Local_u8Key);
    3008:	ce 01       	movw	r24, r28
    300a:	82 57       	subi	r24, 0x72	; 114
    300c:	9f 4f       	sbci	r25, 0xFF	; 255
    300e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <KPD_u8GetKeyState>
								if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3012:	fe 01       	movw	r30, r28
    3014:	e2 57       	subi	r30, 0x72	; 114
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	80 81       	ld	r24, Z
    301a:	8f 3f       	cpi	r24, 0xFF	; 255
    301c:	a9 f3       	breq	.-22     	; 0x3008 <main+0x192>
									if(Local_u8Key =='1'){
    301e:	fe 01       	movw	r30, r28
    3020:	e2 57       	subi	r30, 0x72	; 114
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	80 81       	ld	r24, Z
    3026:	81 33       	cpi	r24, 0x31	; 49
    3028:	09 f0       	breq	.+2      	; 0x302c <main+0x1b6>
    302a:	01 c4       	rjmp	.+2050   	; 0x382e <main+0x9b8>
										LCD_voideInit();
    302c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>
							            LCD_PrintString("1-90 2-180 3-270");
    3030:	8f e8       	ldi	r24, 0x8F	; 143
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
							            LCD_voidSendCmnd(0xC0);
    3038:	80 ec       	ldi	r24, 0xC0	; 192
    303a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
							            LCD_PrintString("4-360");
    303e:	80 ea       	ldi	r24, 0xA0	; 160
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
										while(1){
											KPD_u8GetKeyState(&Local_u8Key);
    3046:	ce 01       	movw	r24, r28
    3048:	82 57       	subi	r24, 0x72	; 114
    304a:	9f 4f       	sbci	r25, 0xFF	; 255
    304c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <KPD_u8GetKeyState>
											if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3050:	fe 01       	movw	r30, r28
    3052:	e2 57       	subi	r30, 0x72	; 114
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	8f 3f       	cpi	r24, 0xFF	; 255
    305a:	b1 f2       	breq	.-84     	; 0x3008 <main+0x192>
												if(Local_u8Key=='1'){
    305c:	fe 01       	movw	r30, r28
    305e:	e2 57       	subi	r30, 0x72	; 114
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	81 33       	cpi	r24, 0x31	; 49
    3066:	09 f0       	breq	.+2      	; 0x306a <main+0x1f4>
    3068:	be c0       	rjmp	.+380    	; 0x31e6 <main+0x370>
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    306a:	82 e0       	ldi	r24, 0x02	; 2
    306c:	63 e0       	ldi	r22, 0x03	; 3
    306e:	41 e0       	ldi	r20, 0x01	; 1
    3070:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3074:	fe 01       	movw	r30, r28
    3076:	e7 57       	subi	r30, 0x77	; 119
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	a8 e4       	ldi	r26, 0x48	; 72
    3080:	b3 e4       	ldi	r27, 0x43	; 67
    3082:	80 83       	st	Z, r24
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	a2 83       	std	Z+2, r26	; 0x02
    3088:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308a:	8e 01       	movw	r16, r28
    308c:	0b 57       	subi	r16, 0x7B	; 123
    308e:	1f 4f       	sbci	r17, 0xFF	; 255
    3090:	fe 01       	movw	r30, r28
    3092:	e7 57       	subi	r30, 0x77	; 119
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	60 81       	ld	r22, Z
    3098:	71 81       	ldd	r23, Z+1	; 0x01
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	93 81       	ldd	r25, Z+3	; 0x03
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	4a e7       	ldi	r20, 0x7A	; 122
    30a4:	53 e4       	ldi	r21, 0x43	; 67
    30a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	f8 01       	movw	r30, r16
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30b8:	fe 01       	movw	r30, r28
    30ba:	eb 57       	subi	r30, 0x7B	; 123
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e8       	ldi	r20, 0x80	; 128
    30cc:	5f e3       	ldi	r21, 0x3F	; 63
    30ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30d2:	88 23       	and	r24, r24
    30d4:	44 f4       	brge	.+16     	; 0x30e6 <main+0x270>
		__ticks = 1;
    30d6:	fe 01       	movw	r30, r28
    30d8:	ed 57       	subi	r30, 0x7D	; 125
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	64 c0       	rjmp	.+200    	; 0x31ae <main+0x338>
	else if (__tmp > 65535)
    30e6:	fe 01       	movw	r30, r28
    30e8:	eb 57       	subi	r30, 0x7B	; 123
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	3f ef       	ldi	r19, 0xFF	; 255
    30f8:	4f e7       	ldi	r20, 0x7F	; 127
    30fa:	57 e4       	ldi	r21, 0x47	; 71
    30fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3100:	18 16       	cp	r1, r24
    3102:	0c f0       	brlt	.+2      	; 0x3106 <main+0x290>
    3104:	43 c0       	rjmp	.+134    	; 0x318c <main+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3106:	fe 01       	movw	r30, r28
    3108:	e7 57       	subi	r30, 0x77	; 119
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 81       	ld	r22, Z
    310e:	71 81       	ldd	r23, Z+1	; 0x01
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e2       	ldi	r20, 0x20	; 32
    311a:	51 e4       	ldi	r21, 0x41	; 65
    311c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	8e 01       	movw	r16, r28
    3126:	0d 57       	subi	r16, 0x7D	; 125
    3128:	1f 4f       	sbci	r17, 0xFF	; 255
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	f8 01       	movw	r30, r16
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
    313c:	1f c0       	rjmp	.+62     	; 0x317c <main+0x306>
    313e:	fe 01       	movw	r30, r28
    3140:	ef 57       	subi	r30, 0x7F	; 127
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	89 e1       	ldi	r24, 0x19	; 25
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	80 83       	st	Z, r24
    314c:	fe 01       	movw	r30, r28
    314e:	ef 57       	subi	r30, 0x7F	; 127
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <main+0x2e0>
    315a:	fe 01       	movw	r30, r28
    315c:	ef 57       	subi	r30, 0x7F	; 127
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3164:	de 01       	movw	r26, r28
    3166:	ad 57       	subi	r26, 0x7D	; 125
    3168:	bf 4f       	sbci	r27, 0xFF	; 255
    316a:	fe 01       	movw	r30, r28
    316c:	ed 57       	subi	r30, 0x7D	; 125
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	11 96       	adiw	r26, 0x01	; 1
    3178:	9c 93       	st	X, r25
    317a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317c:	fe 01       	movw	r30, r28
    317e:	ed 57       	subi	r30, 0x7D	; 125
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	d1 f6       	brne	.-76     	; 0x313e <main+0x2c8>
    318a:	27 c0       	rjmp	.+78     	; 0x31da <main+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	8e 01       	movw	r16, r28
    318e:	0d 57       	subi	r16, 0x7D	; 125
    3190:	1f 4f       	sbci	r17, 0xFF	; 255
    3192:	fe 01       	movw	r30, r28
    3194:	eb 57       	subi	r30, 0x7B	; 123
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	60 81       	ld	r22, Z
    319a:	71 81       	ldd	r23, Z+1	; 0x01
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	93 81       	ldd	r25, Z+3	; 0x03
    31a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	f8 01       	movw	r30, r16
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
    31ae:	de 01       	movw	r26, r28
    31b0:	a1 58       	subi	r26, 0x81	; 129
    31b2:	bf 4f       	sbci	r27, 0xFF	; 255
    31b4:	fe 01       	movw	r30, r28
    31b6:	ed 57       	subi	r30, 0x7D	; 125
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	8d 93       	st	X+, r24
    31c0:	9c 93       	st	X, r25
    31c2:	fe 01       	movw	r30, r28
    31c4:	e1 58       	subi	r30, 0x81	; 129
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	80 81       	ld	r24, Z
    31ca:	91 81       	ldd	r25, Z+1	; 0x01
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <main+0x356>
    31d0:	fe 01       	movw	r30, r28
    31d2:	e1 58       	subi	r30, 0x81	; 129
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
												_delay_ms(200);
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	64 e0       	ldi	r22, 0x04	; 4
    31de:	41 e0       	ldi	r20, 0x01	; 1
    31e0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    31e4:	11 cf       	rjmp	.-478    	; 0x3008 <main+0x192>
												break;
												}
												else if (Local_u8Key=='2')
    31e6:	fe 01       	movw	r30, r28
    31e8:	e2 57       	subi	r30, 0x72	; 114
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	80 81       	ld	r24, Z
    31ee:	82 33       	cpi	r24, 0x32	; 50
    31f0:	59 f4       	brne	.+22     	; 0x3208 <main+0x392>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    31f2:	82 e0       	ldi	r24, 0x02	; 2
    31f4:	64 e0       	ldi	r22, 0x04	; 4
    31f6:	41 e0       	ldi	r20, 0x01	; 1
    31f8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    31fc:	82 e0       	ldi	r24, 0x02	; 2
    31fe:	65 e0       	ldi	r22, 0x05	; 5
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3206:	00 cf       	rjmp	.-512    	; 0x3008 <main+0x192>
													break;
												}
												else if (Local_u8Key=='3')
    3208:	fe 01       	movw	r30, r28
    320a:	e2 57       	subi	r30, 0x72	; 114
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 81       	ld	r24, Z
    3210:	83 33       	cpi	r24, 0x33	; 51
    3212:	09 f0       	breq	.+2      	; 0x3216 <main+0x3a0>
    3214:	c8 c0       	rjmp	.+400    	; 0x33a6 <main+0x530>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3216:	82 e0       	ldi	r24, 0x02	; 2
    3218:	64 e0       	ldi	r22, 0x04	; 4
    321a:	41 e0       	ldi	r20, 0x01	; 1
    321c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3220:	82 e0       	ldi	r24, 0x02	; 2
    3222:	65 e0       	ldi	r22, 0x05	; 5
    3224:	41 e0       	ldi	r20, 0x01	; 1
    3226:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    322a:	fe 01       	movw	r30, r28
    322c:	e5 58       	subi	r30, 0x85	; 133
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	aa ef       	ldi	r26, 0xFA	; 250
    3236:	b4 e4       	ldi	r27, 0x44	; 68
    3238:	80 83       	st	Z, r24
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	a2 83       	std	Z+2, r26	; 0x02
    323e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3240:	8e 01       	movw	r16, r28
    3242:	09 58       	subi	r16, 0x89	; 137
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	fe 01       	movw	r30, r28
    3248:	e5 58       	subi	r30, 0x85	; 133
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	4a e7       	ldi	r20, 0x7A	; 122
    325a:	53 e4       	ldi	r21, 0x43	; 67
    325c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	f8 01       	movw	r30, r16
    3266:	80 83       	st	Z, r24
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	a2 83       	std	Z+2, r26	; 0x02
    326c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    326e:	fe 01       	movw	r30, r28
    3270:	e9 58       	subi	r30, 0x89	; 137
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	44 f4       	brge	.+16     	; 0x329c <main+0x426>
		__ticks = 1;
    328c:	fe 01       	movw	r30, r28
    328e:	eb 58       	subi	r30, 0x8B	; 139
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	80 83       	st	Z, r24
    329a:	64 c0       	rjmp	.+200    	; 0x3364 <main+0x4ee>
	else if (__tmp > 65535)
    329c:	fe 01       	movw	r30, r28
    329e:	e9 58       	subi	r30, 0x89	; 137
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	0c f0       	brlt	.+2      	; 0x32bc <main+0x446>
    32ba:	43 c0       	rjmp	.+134    	; 0x3342 <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32bc:	fe 01       	movw	r30, r28
    32be:	e5 58       	subi	r30, 0x85	; 133
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	60 81       	ld	r22, Z
    32c4:	71 81       	ldd	r23, Z+1	; 0x01
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e2       	ldi	r20, 0x20	; 32
    32d0:	51 e4       	ldi	r21, 0x41	; 65
    32d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	8e 01       	movw	r16, r28
    32dc:	0b 58       	subi	r16, 0x8B	; 139
    32de:	1f 4f       	sbci	r17, 0xFF	; 255
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	f8 01       	movw	r30, r16
    32ee:	91 83       	std	Z+1, r25	; 0x01
    32f0:	80 83       	st	Z, r24
    32f2:	1f c0       	rjmp	.+62     	; 0x3332 <main+0x4bc>
    32f4:	fe 01       	movw	r30, r28
    32f6:	ed 58       	subi	r30, 0x8D	; 141
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	89 e1       	ldi	r24, 0x19	; 25
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	fe 01       	movw	r30, r28
    3304:	ed 58       	subi	r30, 0x8D	; 141
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	80 81       	ld	r24, Z
    330a:	91 81       	ldd	r25, Z+1	; 0x01
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <main+0x496>
    3310:	fe 01       	movw	r30, r28
    3312:	ed 58       	subi	r30, 0x8D	; 141
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331a:	de 01       	movw	r26, r28
    331c:	ab 58       	subi	r26, 0x8B	; 139
    331e:	bf 4f       	sbci	r27, 0xFF	; 255
    3320:	fe 01       	movw	r30, r28
    3322:	eb 58       	subi	r30, 0x8B	; 139
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	80 81       	ld	r24, Z
    3328:	91 81       	ldd	r25, Z+1	; 0x01
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	11 96       	adiw	r26, 0x01	; 1
    332e:	9c 93       	st	X, r25
    3330:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3332:	fe 01       	movw	r30, r28
    3334:	eb 58       	subi	r30, 0x8B	; 139
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	d1 f6       	brne	.-76     	; 0x32f4 <main+0x47e>
    3340:	27 c0       	rjmp	.+78     	; 0x3390 <main+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3342:	8e 01       	movw	r16, r28
    3344:	0b 58       	subi	r16, 0x8B	; 139
    3346:	1f 4f       	sbci	r17, 0xFF	; 255
    3348:	fe 01       	movw	r30, r28
    334a:	e9 58       	subi	r30, 0x89	; 137
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	60 81       	ld	r22, Z
    3350:	71 81       	ldd	r23, Z+1	; 0x01
    3352:	82 81       	ldd	r24, Z+2	; 0x02
    3354:	93 81       	ldd	r25, Z+3	; 0x03
    3356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	f8 01       	movw	r30, r16
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
    3364:	de 01       	movw	r26, r28
    3366:	af 58       	subi	r26, 0x8F	; 143
    3368:	bf 4f       	sbci	r27, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	eb 58       	subi	r30, 0x8B	; 139
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	8d 93       	st	X+, r24
    3376:	9c 93       	st	X, r25
    3378:	fe 01       	movw	r30, r28
    337a:	ef 58       	subi	r30, 0x8F	; 143
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	f1 f7       	brne	.-4      	; 0x3382 <main+0x50c>
    3386:	fe 01       	movw	r30, r28
    3388:	ef 58       	subi	r30, 0x8F	; 143
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	64 e0       	ldi	r22, 0x04	; 4
    3394:	40 e0       	ldi	r20, 0x00	; 0
    3396:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    339a:	82 e0       	ldi	r24, 0x02	; 2
    339c:	64 e0       	ldi	r22, 0x04	; 4
    339e:	41 e0       	ldi	r20, 0x01	; 1
    33a0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    33a4:	31 ce       	rjmp	.-926    	; 0x3008 <main+0x192>
													break;
												}
												else if (Local_u8Key=='4')
    33a6:	fe 01       	movw	r30, r28
    33a8:	e2 57       	subi	r30, 0x72	; 114
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	80 81       	ld	r24, Z
    33ae:	84 33       	cpi	r24, 0x34	; 52
    33b0:	09 f0       	breq	.+2      	; 0x33b4 <main+0x53e>
    33b2:	2a ce       	rjmp	.-940    	; 0x3008 <main+0x192>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    33b4:	82 e0       	ldi	r24, 0x02	; 2
    33b6:	64 e0       	ldi	r22, 0x04	; 4
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	65 e0       	ldi	r22, 0x05	; 5
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    33c8:	fe 01       	movw	r30, r28
    33ca:	e3 59       	subi	r30, 0x93	; 147
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	aa ef       	ldi	r26, 0xFA	; 250
    33d4:	b4 e4       	ldi	r27, 0x44	; 68
    33d6:	80 83       	st	Z, r24
    33d8:	91 83       	std	Z+1, r25	; 0x01
    33da:	a2 83       	std	Z+2, r26	; 0x02
    33dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33de:	8e 01       	movw	r16, r28
    33e0:	07 59       	subi	r16, 0x97	; 151
    33e2:	1f 4f       	sbci	r17, 0xFF	; 255
    33e4:	fe 01       	movw	r30, r28
    33e6:	e3 59       	subi	r30, 0x93	; 147
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	60 81       	ld	r22, Z
    33ec:	71 81       	ldd	r23, Z+1	; 0x01
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	4a e7       	ldi	r20, 0x7A	; 122
    33f8:	53 e4       	ldi	r21, 0x43	; 67
    33fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	f8 01       	movw	r30, r16
    3404:	80 83       	st	Z, r24
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	a2 83       	std	Z+2, r26	; 0x02
    340a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    340c:	fe 01       	movw	r30, r28
    340e:	e7 59       	subi	r30, 0x97	; 151
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	60 81       	ld	r22, Z
    3414:	71 81       	ldd	r23, Z+1	; 0x01
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	93 81       	ldd	r25, Z+3	; 0x03
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e8       	ldi	r20, 0x80	; 128
    3420:	5f e3       	ldi	r21, 0x3F	; 63
    3422:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3426:	88 23       	and	r24, r24
    3428:	44 f4       	brge	.+16     	; 0x343a <main+0x5c4>
		__ticks = 1;
    342a:	fe 01       	movw	r30, r28
    342c:	e9 59       	subi	r30, 0x99	; 153
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
    3438:	64 c0       	rjmp	.+200    	; 0x3502 <main+0x68c>
	else if (__tmp > 65535)
    343a:	fe 01       	movw	r30, r28
    343c:	e7 59       	subi	r30, 0x97	; 151
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	60 81       	ld	r22, Z
    3442:	71 81       	ldd	r23, Z+1	; 0x01
    3444:	82 81       	ldd	r24, Z+2	; 0x02
    3446:	93 81       	ldd	r25, Z+3	; 0x03
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	3f ef       	ldi	r19, 0xFF	; 255
    344c:	4f e7       	ldi	r20, 0x7F	; 127
    344e:	57 e4       	ldi	r21, 0x47	; 71
    3450:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3454:	18 16       	cp	r1, r24
    3456:	0c f0       	brlt	.+2      	; 0x345a <main+0x5e4>
    3458:	43 c0       	rjmp	.+134    	; 0x34e0 <main+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345a:	fe 01       	movw	r30, r28
    345c:	e3 59       	subi	r30, 0x93	; 147
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	93 81       	ldd	r25, Z+3	; 0x03
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	8e 01       	movw	r16, r28
    347a:	09 59       	subi	r16, 0x99	; 153
    347c:	1f 4f       	sbci	r17, 0xFF	; 255
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	f8 01       	movw	r30, r16
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
    3490:	1f c0       	rjmp	.+62     	; 0x34d0 <main+0x65a>
    3492:	fe 01       	movw	r30, r28
    3494:	eb 59       	subi	r30, 0x9B	; 155
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	89 e1       	ldi	r24, 0x19	; 25
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    34a0:	fe 01       	movw	r30, r28
    34a2:	eb 59       	subi	r30, 0x9B	; 155
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	80 81       	ld	r24, Z
    34a8:	91 81       	ldd	r25, Z+1	; 0x01
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <main+0x634>
    34ae:	fe 01       	movw	r30, r28
    34b0:	eb 59       	subi	r30, 0x9B	; 155
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	de 01       	movw	r26, r28
    34ba:	a9 59       	subi	r26, 0x99	; 153
    34bc:	bf 4f       	sbci	r27, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	e9 59       	subi	r30, 0x99	; 153
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	11 96       	adiw	r26, 0x01	; 1
    34cc:	9c 93       	st	X, r25
    34ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d0:	fe 01       	movw	r30, r28
    34d2:	e9 59       	subi	r30, 0x99	; 153
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	91 81       	ldd	r25, Z+1	; 0x01
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	d1 f6       	brne	.-76     	; 0x3492 <main+0x61c>
    34de:	27 c0       	rjmp	.+78     	; 0x352e <main+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e0:	8e 01       	movw	r16, r28
    34e2:	09 59       	subi	r16, 0x99	; 153
    34e4:	1f 4f       	sbci	r17, 0xFF	; 255
    34e6:	fe 01       	movw	r30, r28
    34e8:	e7 59       	subi	r30, 0x97	; 151
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	f8 01       	movw	r30, r16
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	80 83       	st	Z, r24
    3502:	de 01       	movw	r26, r28
    3504:	ad 59       	subi	r26, 0x9D	; 157
    3506:	bf 4f       	sbci	r27, 0xFF	; 255
    3508:	fe 01       	movw	r30, r28
    350a:	e9 59       	subi	r30, 0x99	; 153
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	80 81       	ld	r24, Z
    3510:	91 81       	ldd	r25, Z+1	; 0x01
    3512:	8d 93       	st	X+, r24
    3514:	9c 93       	st	X, r25
    3516:	fe 01       	movw	r30, r28
    3518:	ed 59       	subi	r30, 0x9D	; 157
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 81       	ld	r24, Z
    351e:	91 81       	ldd	r25, Z+1	; 0x01
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <main+0x6aa>
    3524:	fe 01       	movw	r30, r28
    3526:	ed 59       	subi	r30, 0x9D	; 157
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    352e:	82 e0       	ldi	r24, 0x02	; 2
    3530:	65 e0       	ldi	r22, 0x05	; 5
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3538:	fe 01       	movw	r30, r28
    353a:	e1 5a       	subi	r30, 0xA1	; 161
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	a8 e4       	ldi	r26, 0x48	; 72
    3544:	b3 e4       	ldi	r27, 0x43	; 67
    3546:	80 83       	st	Z, r24
    3548:	91 83       	std	Z+1, r25	; 0x01
    354a:	a2 83       	std	Z+2, r26	; 0x02
    354c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    354e:	8e 01       	movw	r16, r28
    3550:	05 5a       	subi	r16, 0xA5	; 165
    3552:	1f 4f       	sbci	r17, 0xFF	; 255
    3554:	fe 01       	movw	r30, r28
    3556:	e1 5a       	subi	r30, 0xA1	; 161
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	60 81       	ld	r22, Z
    355c:	71 81       	ldd	r23, Z+1	; 0x01
    355e:	82 81       	ldd	r24, Z+2	; 0x02
    3560:	93 81       	ldd	r25, Z+3	; 0x03
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	4a e7       	ldi	r20, 0x7A	; 122
    3568:	53 e4       	ldi	r21, 0x43	; 67
    356a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	f8 01       	movw	r30, r16
    3574:	80 83       	st	Z, r24
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	a2 83       	std	Z+2, r26	; 0x02
    357a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    357c:	fe 01       	movw	r30, r28
    357e:	e5 5a       	subi	r30, 0xA5	; 165
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e8       	ldi	r20, 0x80	; 128
    3590:	5f e3       	ldi	r21, 0x3F	; 63
    3592:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3596:	88 23       	and	r24, r24
    3598:	44 f4       	brge	.+16     	; 0x35aa <main+0x734>
		__ticks = 1;
    359a:	fe 01       	movw	r30, r28
    359c:	e7 5a       	subi	r30, 0xA7	; 167
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24
    35a8:	64 c0       	rjmp	.+200    	; 0x3672 <main+0x7fc>
	else if (__tmp > 65535)
    35aa:	fe 01       	movw	r30, r28
    35ac:	e5 5a       	subi	r30, 0xA5	; 165
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	60 81       	ld	r22, Z
    35b2:	71 81       	ldd	r23, Z+1	; 0x01
    35b4:	82 81       	ldd	r24, Z+2	; 0x02
    35b6:	93 81       	ldd	r25, Z+3	; 0x03
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	3f ef       	ldi	r19, 0xFF	; 255
    35bc:	4f e7       	ldi	r20, 0x7F	; 127
    35be:	57 e4       	ldi	r21, 0x47	; 71
    35c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    35c4:	18 16       	cp	r1, r24
    35c6:	0c f0       	brlt	.+2      	; 0x35ca <main+0x754>
    35c8:	43 c0       	rjmp	.+134    	; 0x3650 <main+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ca:	fe 01       	movw	r30, r28
    35cc:	e1 5a       	subi	r30, 0xA1	; 161
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e2       	ldi	r20, 0x20	; 32
    35de:	51 e4       	ldi	r21, 0x41	; 65
    35e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	8e 01       	movw	r16, r28
    35ea:	07 5a       	subi	r16, 0xA7	; 167
    35ec:	1f 4f       	sbci	r17, 0xFF	; 255
    35ee:	bc 01       	movw	r22, r24
    35f0:	cd 01       	movw	r24, r26
    35f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	f8 01       	movw	r30, r16
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	80 83       	st	Z, r24
    3600:	1f c0       	rjmp	.+62     	; 0x3640 <main+0x7ca>
    3602:	fe 01       	movw	r30, r28
    3604:	e9 5a       	subi	r30, 0xA9	; 169
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	89 e1       	ldi	r24, 0x19	; 25
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	80 83       	st	Z, r24
    3610:	fe 01       	movw	r30, r28
    3612:	e9 5a       	subi	r30, 0xA9	; 169
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	80 81       	ld	r24, Z
    3618:	91 81       	ldd	r25, Z+1	; 0x01
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	f1 f7       	brne	.-4      	; 0x361a <main+0x7a4>
    361e:	fe 01       	movw	r30, r28
    3620:	e9 5a       	subi	r30, 0xA9	; 169
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3628:	de 01       	movw	r26, r28
    362a:	a7 5a       	subi	r26, 0xA7	; 167
    362c:	bf 4f       	sbci	r27, 0xFF	; 255
    362e:	fe 01       	movw	r30, r28
    3630:	e7 5a       	subi	r30, 0xA7	; 167
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 81       	ld	r24, Z
    3636:	91 81       	ldd	r25, Z+1	; 0x01
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	11 96       	adiw	r26, 0x01	; 1
    363c:	9c 93       	st	X, r25
    363e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3640:	fe 01       	movw	r30, r28
    3642:	e7 5a       	subi	r30, 0xA7	; 167
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	80 81       	ld	r24, Z
    3648:	91 81       	ldd	r25, Z+1	; 0x01
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	d1 f6       	brne	.-76     	; 0x3602 <main+0x78c>
    364e:	27 c0       	rjmp	.+78     	; 0x369e <main+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3650:	8e 01       	movw	r16, r28
    3652:	07 5a       	subi	r16, 0xA7	; 167
    3654:	1f 4f       	sbci	r17, 0xFF	; 255
    3656:	fe 01       	movw	r30, r28
    3658:	e5 5a       	subi	r30, 0xA5	; 165
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	f8 01       	movw	r30, r16
    366e:	91 83       	std	Z+1, r25	; 0x01
    3670:	80 83       	st	Z, r24
    3672:	de 01       	movw	r26, r28
    3674:	ab 5a       	subi	r26, 0xAB	; 171
    3676:	bf 4f       	sbci	r27, 0xFF	; 255
    3678:	fe 01       	movw	r30, r28
    367a:	e7 5a       	subi	r30, 0xA7	; 167
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	8d 93       	st	X+, r24
    3684:	9c 93       	st	X, r25
    3686:	fe 01       	movw	r30, r28
    3688:	eb 5a       	subi	r30, 0xAB	; 171
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	91 81       	ldd	r25, Z+1	; 0x01
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <main+0x81a>
    3694:	fe 01       	movw	r30, r28
    3696:	eb 5a       	subi	r30, 0xAB	; 171
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	91 83       	std	Z+1, r25	; 0x01
    369c:	80 83       	st	Z, r24
													_delay_ms(200);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	64 e0       	ldi	r22, 0x04	; 4
    36a2:	40 e0       	ldi	r20, 0x00	; 0
    36a4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    36a8:	82 e0       	ldi	r24, 0x02	; 2
    36aa:	65 e0       	ldi	r22, 0x05	; 5
    36ac:	41 e0       	ldi	r20, 0x01	; 1
    36ae:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    36b2:	fe 01       	movw	r30, r28
    36b4:	ef 5a       	subi	r30, 0xAF	; 175
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	aa ef       	ldi	r26, 0xFA	; 250
    36be:	b4 e4       	ldi	r27, 0x44	; 68
    36c0:	80 83       	st	Z, r24
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	a2 83       	std	Z+2, r26	; 0x02
    36c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c8:	8e 01       	movw	r16, r28
    36ca:	03 5b       	subi	r16, 0xB3	; 179
    36cc:	1f 4f       	sbci	r17, 0xFF	; 255
    36ce:	fe 01       	movw	r30, r28
    36d0:	ef 5a       	subi	r30, 0xAF	; 175
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	60 81       	ld	r22, Z
    36d6:	71 81       	ldd	r23, Z+1	; 0x01
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	93 81       	ldd	r25, Z+3	; 0x03
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	4a e7       	ldi	r20, 0x7A	; 122
    36e2:	53 e4       	ldi	r21, 0x43	; 67
    36e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	f8 01       	movw	r30, r16
    36ee:	80 83       	st	Z, r24
    36f0:	91 83       	std	Z+1, r25	; 0x01
    36f2:	a2 83       	std	Z+2, r26	; 0x02
    36f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36f6:	fe 01       	movw	r30, r28
    36f8:	e3 5b       	subi	r30, 0xB3	; 179
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	60 81       	ld	r22, Z
    36fe:	71 81       	ldd	r23, Z+1	; 0x01
    3700:	82 81       	ldd	r24, Z+2	; 0x02
    3702:	93 81       	ldd	r25, Z+3	; 0x03
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	44 f4       	brge	.+16     	; 0x3724 <main+0x8ae>
		__ticks = 1;
    3714:	fe 01       	movw	r30, r28
    3716:	e5 5b       	subi	r30, 0xB5	; 181
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	64 c0       	rjmp	.+200    	; 0x37ec <main+0x976>
	else if (__tmp > 65535)
    3724:	fe 01       	movw	r30, r28
    3726:	e3 5b       	subi	r30, 0xB3	; 179
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	0c f0       	brlt	.+2      	; 0x3744 <main+0x8ce>
    3742:	43 c0       	rjmp	.+134    	; 0x37ca <main+0x954>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3744:	fe 01       	movw	r30, r28
    3746:	ef 5a       	subi	r30, 0xAF	; 175
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	8e 01       	movw	r16, r28
    3764:	05 5b       	subi	r16, 0xB5	; 181
    3766:	1f 4f       	sbci	r17, 0xFF	; 255
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	f8 01       	movw	r30, r16
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
    377a:	1f c0       	rjmp	.+62     	; 0x37ba <main+0x944>
    377c:	fe 01       	movw	r30, r28
    377e:	e7 5b       	subi	r30, 0xB7	; 183
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	89 e1       	ldi	r24, 0x19	; 25
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	80 83       	st	Z, r24
    378a:	fe 01       	movw	r30, r28
    378c:	e7 5b       	subi	r30, 0xB7	; 183
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <main+0x91e>
    3798:	fe 01       	movw	r30, r28
    379a:	e7 5b       	subi	r30, 0xB7	; 183
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	de 01       	movw	r26, r28
    37a4:	a5 5b       	subi	r26, 0xB5	; 181
    37a6:	bf 4f       	sbci	r27, 0xFF	; 255
    37a8:	fe 01       	movw	r30, r28
    37aa:	e5 5b       	subi	r30, 0xB5	; 181
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	11 96       	adiw	r26, 0x01	; 1
    37b6:	9c 93       	st	X, r25
    37b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ba:	fe 01       	movw	r30, r28
    37bc:	e5 5b       	subi	r30, 0xB5	; 181
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	d1 f6       	brne	.-76     	; 0x377c <main+0x906>
    37c8:	27 c0       	rjmp	.+78     	; 0x3818 <main+0x9a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ca:	8e 01       	movw	r16, r28
    37cc:	05 5b       	subi	r16, 0xB5	; 181
    37ce:	1f 4f       	sbci	r17, 0xFF	; 255
    37d0:	fe 01       	movw	r30, r28
    37d2:	e3 5b       	subi	r30, 0xB3	; 179
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	f8 01       	movw	r30, r16
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
    37ec:	de 01       	movw	r26, r28
    37ee:	a9 5b       	subi	r26, 0xB9	; 185
    37f0:	bf 4f       	sbci	r27, 0xFF	; 255
    37f2:	fe 01       	movw	r30, r28
    37f4:	e5 5b       	subi	r30, 0xB5	; 181
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	8d 93       	st	X+, r24
    37fe:	9c 93       	st	X, r25
    3800:	fe 01       	movw	r30, r28
    3802:	e9 5b       	subi	r30, 0xB9	; 185
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <main+0x994>
    380e:	fe 01       	movw	r30, r28
    3810:	e9 5b       	subi	r30, 0xB9	; 185
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	80 83       	st	Z, r24
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    3818:	82 e0       	ldi	r24, 0x02	; 2
    381a:	63 e0       	ldi	r22, 0x03	; 3
    381c:	41 e0       	ldi	r20, 0x01	; 1
    381e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    3822:	82 e0       	ldi	r24, 0x02	; 2
    3824:	65 e0       	ldi	r22, 0x05	; 5
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    382c:	ed cb       	rjmp	.-2086   	; 0x3008 <main+0x192>

											}
										
										break;}
									}
									else if(Local_u8Key=='2'){
    382e:	fe 01       	movw	r30, r28
    3830:	e2 57       	subi	r30, 0x72	; 114
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	80 81       	ld	r24, Z
    3836:	82 33       	cpi	r24, 0x32	; 50
    3838:	09 f0       	breq	.+2      	; 0x383c <main+0x9c6>
    383a:	e6 cb       	rjmp	.-2100   	; 0x3008 <main+0x192>
										LCD_voideInit();
    383c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>
							            LCD_PrintString("1-90 2-180 3-270");
    3840:	8f e8       	ldi	r24, 0x8F	; 143
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
							            LCD_voidSendCmnd(0xC0);
    3848:	80 ec       	ldi	r24, 0xC0	; 192
    384a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendCmnd>
							            LCD_PrintString("4-360");
    384e:	80 ea       	ldi	r24, 0xA0	; 160
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
										while(1){
											KPD_u8GetKeyState(&Local_u8Key);
    3856:	ce 01       	movw	r24, r28
    3858:	82 57       	subi	r24, 0x72	; 114
    385a:	9f 4f       	sbci	r25, 0xFF	; 255
    385c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <KPD_u8GetKeyState>
											if(Local_u8Key!= KPD_u8_KEY_NOT_PRESSED){
    3860:	fe 01       	movw	r30, r28
    3862:	e2 57       	subi	r30, 0x72	; 114
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	80 81       	ld	r24, Z
    3868:	8f 3f       	cpi	r24, 0xFF	; 255
    386a:	09 f4       	brne	.+2      	; 0x386e <main+0x9f8>
    386c:	cd cb       	rjmp	.-2150   	; 0x3008 <main+0x192>
												if(Local_u8Key=='1'){
    386e:	fe 01       	movw	r30, r28
    3870:	e2 57       	subi	r30, 0x72	; 114
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	81 33       	cpi	r24, 0x31	; 49
    3878:	09 f0       	breq	.+2      	; 0x387c <main+0xa06>
    387a:	90 c0       	rjmp	.+288    	; 0x399c <main+0xb26>
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    387c:	82 e0       	ldi	r24, 0x02	; 2
    387e:	66 e0       	ldi	r22, 0x06	; 6
    3880:	41 e0       	ldi	r20, 0x01	; 1
    3882:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3886:	fe 01       	movw	r30, r28
    3888:	ed 5b       	subi	r30, 0xBD	; 189
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	a8 e4       	ldi	r26, 0x48	; 72
    3892:	b3 e4       	ldi	r27, 0x43	; 67
    3894:	80 83       	st	Z, r24
    3896:	91 83       	std	Z+1, r25	; 0x01
    3898:	a2 83       	std	Z+2, r26	; 0x02
    389a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389c:	8e 01       	movw	r16, r28
    389e:	01 5c       	subi	r16, 0xC1	; 193
    38a0:	1f 4f       	sbci	r17, 0xFF	; 255
    38a2:	fe 01       	movw	r30, r28
    38a4:	ed 5b       	subi	r30, 0xBD	; 189
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	60 81       	ld	r22, Z
    38aa:	71 81       	ldd	r23, Z+1	; 0x01
    38ac:	82 81       	ldd	r24, Z+2	; 0x02
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	4a e7       	ldi	r20, 0x7A	; 122
    38b6:	53 e4       	ldi	r21, 0x43	; 67
    38b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	f8 01       	movw	r30, r16
    38c2:	80 83       	st	Z, r24
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	a2 83       	std	Z+2, r26	; 0x02
    38c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38ca:	fe 01       	movw	r30, r28
    38cc:	ff 96       	adiw	r30, 0x3f	; 63
    38ce:	60 81       	ld	r22, Z
    38d0:	71 81       	ldd	r23, Z+1	; 0x01
    38d2:	82 81       	ldd	r24, Z+2	; 0x02
    38d4:	93 81       	ldd	r25, Z+3	; 0x03
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	40 e8       	ldi	r20, 0x80	; 128
    38dc:	5f e3       	ldi	r21, 0x3F	; 63
    38de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    38e2:	88 23       	and	r24, r24
    38e4:	2c f4       	brge	.+10     	; 0x38f0 <main+0xa7a>
		__ticks = 1;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	9e af       	std	Y+62, r25	; 0x3e
    38ec:	8d af       	std	Y+61, r24	; 0x3d
    38ee:	46 c0       	rjmp	.+140    	; 0x397c <main+0xb06>
	else if (__tmp > 65535)
    38f0:	fe 01       	movw	r30, r28
    38f2:	ff 96       	adiw	r30, 0x3f	; 63
    38f4:	60 81       	ld	r22, Z
    38f6:	71 81       	ldd	r23, Z+1	; 0x01
    38f8:	82 81       	ldd	r24, Z+2	; 0x02
    38fa:	93 81       	ldd	r25, Z+3	; 0x03
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	3f ef       	ldi	r19, 0xFF	; 255
    3900:	4f e7       	ldi	r20, 0x7F	; 127
    3902:	57 e4       	ldi	r21, 0x47	; 71
    3904:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3908:	18 16       	cp	r1, r24
    390a:	64 f5       	brge	.+88     	; 0x3964 <main+0xaee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390c:	fe 01       	movw	r30, r28
    390e:	ed 5b       	subi	r30, 0xBD	; 189
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	60 81       	ld	r22, Z
    3914:	71 81       	ldd	r23, Z+1	; 0x01
    3916:	82 81       	ldd	r24, Z+2	; 0x02
    3918:	93 81       	ldd	r25, Z+3	; 0x03
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e2       	ldi	r20, 0x20	; 32
    3920:	51 e4       	ldi	r21, 0x41	; 65
    3922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9e af       	std	Y+62, r25	; 0x3e
    3938:	8d af       	std	Y+61, r24	; 0x3d
    393a:	0f c0       	rjmp	.+30     	; 0x395a <main+0xae4>
    393c:	89 e1       	ldi	r24, 0x19	; 25
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	9c af       	std	Y+60, r25	; 0x3c
    3942:	8b af       	std	Y+59, r24	; 0x3b
    3944:	8b ad       	ldd	r24, Y+59	; 0x3b
    3946:	9c ad       	ldd	r25, Y+60	; 0x3c
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	f1 f7       	brne	.-4      	; 0x3948 <main+0xad2>
    394c:	9c af       	std	Y+60, r25	; 0x3c
    394e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3950:	8d ad       	ldd	r24, Y+61	; 0x3d
    3952:	9e ad       	ldd	r25, Y+62	; 0x3e
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	9e af       	std	Y+62, r25	; 0x3e
    3958:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395a:	8d ad       	ldd	r24, Y+61	; 0x3d
    395c:	9e ad       	ldd	r25, Y+62	; 0x3e
    395e:	00 97       	sbiw	r24, 0x00	; 0
    3960:	69 f7       	brne	.-38     	; 0x393c <main+0xac6>
    3962:	16 c0       	rjmp	.+44     	; 0x3990 <main+0xb1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3964:	fe 01       	movw	r30, r28
    3966:	ff 96       	adiw	r30, 0x3f	; 63
    3968:	60 81       	ld	r22, Z
    396a:	71 81       	ldd	r23, Z+1	; 0x01
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9e af       	std	Y+62, r25	; 0x3e
    397a:	8d af       	std	Y+61, r24	; 0x3d
    397c:	8d ad       	ldd	r24, Y+61	; 0x3d
    397e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3980:	9a af       	std	Y+58, r25	; 0x3a
    3982:	89 af       	std	Y+57, r24	; 0x39
    3984:	89 ad       	ldd	r24, Y+57	; 0x39
    3986:	9a ad       	ldd	r25, Y+58	; 0x3a
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <main+0xb12>
    398c:	9a af       	std	Y+58, r25	; 0x3a
    398e:	89 af       	std	Y+57, r24	; 0x39
												_delay_ms(200);
												DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3990:	82 e0       	ldi	r24, 0x02	; 2
    3992:	65 e0       	ldi	r22, 0x05	; 5
    3994:	41 e0       	ldi	r20, 0x01	; 1
    3996:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    399a:	36 cb       	rjmp	.-2452   	; 0x3008 <main+0x192>
												break;
												}
												else if (Local_u8Key=='2')
    399c:	fe 01       	movw	r30, r28
    399e:	e2 57       	subi	r30, 0x72	; 114
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 81       	ld	r24, Z
    39a4:	82 33       	cpi	r24, 0x32	; 50
    39a6:	59 f4       	brne	.+22     	; 0x39be <main+0xb48>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    39a8:	82 e0       	ldi	r24, 0x02	; 2
    39aa:	65 e0       	ldi	r22, 0x05	; 5
    39ac:	41 e0       	ldi	r20, 0x01	; 1
    39ae:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    39b2:	82 e0       	ldi	r24, 0x02	; 2
    39b4:	64 e0       	ldi	r22, 0x04	; 4
    39b6:	41 e0       	ldi	r20, 0x01	; 1
    39b8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    39bc:	25 cb       	rjmp	.-2486   	; 0x3008 <main+0x192>
													break;
												}
												else if (Local_u8Key=='3')
    39be:	fe 01       	movw	r30, r28
    39c0:	e2 57       	subi	r30, 0x72	; 114
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 81       	ld	r24, Z
    39c6:	83 33       	cpi	r24, 0x33	; 51
    39c8:	09 f0       	breq	.+2      	; 0x39cc <main+0xb56>
    39ca:	87 c0       	rjmp	.+270    	; 0x3ada <main+0xc64>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    39cc:	82 e0       	ldi	r24, 0x02	; 2
    39ce:	65 e0       	ldi	r22, 0x05	; 5
    39d0:	41 e0       	ldi	r20, 0x01	; 1
    39d2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	64 e0       	ldi	r22, 0x04	; 4
    39da:	41 e0       	ldi	r20, 0x01	; 1
    39dc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	aa ef       	ldi	r26, 0xFA	; 250
    39e6:	b4 e4       	ldi	r27, 0x44	; 68
    39e8:	8d ab       	std	Y+53, r24	; 0x35
    39ea:	9e ab       	std	Y+54, r25	; 0x36
    39ec:	af ab       	std	Y+55, r26	; 0x37
    39ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f0:	6d a9       	ldd	r22, Y+53	; 0x35
    39f2:	7e a9       	ldd	r23, Y+54	; 0x36
    39f4:	8f a9       	ldd	r24, Y+55	; 0x37
    39f6:	98 ad       	ldd	r25, Y+56	; 0x38
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	4a e7       	ldi	r20, 0x7A	; 122
    39fe:	53 e4       	ldi	r21, 0x43	; 67
    3a00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	89 ab       	std	Y+49, r24	; 0x31
    3a0a:	9a ab       	std	Y+50, r25	; 0x32
    3a0c:	ab ab       	std	Y+51, r26	; 0x33
    3a0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a10:	69 a9       	ldd	r22, Y+49	; 0x31
    3a12:	7a a9       	ldd	r23, Y+50	; 0x32
    3a14:	8b a9       	ldd	r24, Y+51	; 0x33
    3a16:	9c a9       	ldd	r25, Y+52	; 0x34
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e8       	ldi	r20, 0x80	; 128
    3a1e:	5f e3       	ldi	r21, 0x3F	; 63
    3a20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a24:	88 23       	and	r24, r24
    3a26:	2c f4       	brge	.+10     	; 0x3a32 <main+0xbbc>
		__ticks = 1;
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	98 ab       	std	Y+48, r25	; 0x30
    3a2e:	8f a7       	std	Y+47, r24	; 0x2f
    3a30:	3f c0       	rjmp	.+126    	; 0x3ab0 <main+0xc3a>
	else if (__tmp > 65535)
    3a32:	69 a9       	ldd	r22, Y+49	; 0x31
    3a34:	7a a9       	ldd	r23, Y+50	; 0x32
    3a36:	8b a9       	ldd	r24, Y+51	; 0x33
    3a38:	9c a9       	ldd	r25, Y+52	; 0x34
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	3f ef       	ldi	r19, 0xFF	; 255
    3a3e:	4f e7       	ldi	r20, 0x7F	; 127
    3a40:	57 e4       	ldi	r21, 0x47	; 71
    3a42:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a46:	18 16       	cp	r1, r24
    3a48:	4c f5       	brge	.+82     	; 0x3a9c <main+0xc26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4a:	6d a9       	ldd	r22, Y+53	; 0x35
    3a4c:	7e a9       	ldd	r23, Y+54	; 0x36
    3a4e:	8f a9       	ldd	r24, Y+55	; 0x37
    3a50:	98 ad       	ldd	r25, Y+56	; 0x38
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e2       	ldi	r20, 0x20	; 32
    3a58:	51 e4       	ldi	r21, 0x41	; 65
    3a5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	98 ab       	std	Y+48, r25	; 0x30
    3a70:	8f a7       	std	Y+47, r24	; 0x2f
    3a72:	0f c0       	rjmp	.+30     	; 0x3a92 <main+0xc1c>
    3a74:	89 e1       	ldi	r24, 0x19	; 25
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9e a7       	std	Y+46, r25	; 0x2e
    3a7a:	8d a7       	std	Y+45, r24	; 0x2d
    3a7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <main+0xc0a>
    3a84:	9e a7       	std	Y+46, r25	; 0x2e
    3a86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	98 ab       	std	Y+48, r25	; 0x30
    3a90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a94:	98 a9       	ldd	r25, Y+48	; 0x30
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	69 f7       	brne	.-38     	; 0x3a74 <main+0xbfe>
    3a9a:	14 c0       	rjmp	.+40     	; 0x3ac4 <main+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    3aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    3aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	98 ab       	std	Y+48, r25	; 0x30
    3aae:	8f a7       	std	Y+47, r24	; 0x2f
    3ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab4:	9c a7       	std	Y+44, r25	; 0x2c
    3ab6:	8b a7       	std	Y+43, r24	; 0x2b
    3ab8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aba:	9c a5       	ldd	r25, Y+44	; 0x2c
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	f1 f7       	brne	.-4      	; 0x3abc <main+0xc46>
    3ac0:	9c a7       	std	Y+44, r25	; 0x2c
    3ac2:	8b a7       	std	Y+43, r24	; 0x2b
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	65 e0       	ldi	r22, 0x05	; 5
    3ac8:	40 e0       	ldi	r20, 0x00	; 0
    3aca:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    3ace:	82 e0       	ldi	r24, 0x02	; 2
    3ad0:	63 e0       	ldi	r22, 0x03	; 3
    3ad2:	41 e0       	ldi	r20, 0x01	; 1
    3ad4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3ad8:	97 ca       	rjmp	.-2770   	; 0x3008 <main+0x192>
													break;
												}
												else if (Local_u8Key=='4')
    3ada:	fe 01       	movw	r30, r28
    3adc:	e2 57       	subi	r30, 0x72	; 114
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	80 81       	ld	r24, Z
    3ae2:	84 33       	cpi	r24, 0x34	; 52
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <main+0xc72>
    3ae6:	90 ca       	rjmp	.-2784   	; 0x3008 <main+0x192>
												{
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	65 e0       	ldi	r22, 0x05	; 5
    3aec:	41 e0       	ldi	r20, 0x01	; 1
    3aee:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	66 e0       	ldi	r22, 0x06	; 6
    3af6:	41 e0       	ldi	r20, 0x01	; 1
    3af8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	aa ef       	ldi	r26, 0xFA	; 250
    3b02:	b4 e4       	ldi	r27, 0x44	; 68
    3b04:	8f a3       	std	Y+39, r24	; 0x27
    3b06:	98 a7       	std	Y+40, r25	; 0x28
    3b08:	a9 a7       	std	Y+41, r26	; 0x29
    3b0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0c:	6f a1       	ldd	r22, Y+39	; 0x27
    3b0e:	78 a5       	ldd	r23, Y+40	; 0x28
    3b10:	89 a5       	ldd	r24, Y+41	; 0x29
    3b12:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	4a e7       	ldi	r20, 0x7A	; 122
    3b1a:	53 e4       	ldi	r21, 0x43	; 67
    3b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8b a3       	std	Y+35, r24	; 0x23
    3b26:	9c a3       	std	Y+36, r25	; 0x24
    3b28:	ad a3       	std	Y+37, r26	; 0x25
    3b2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b2c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b2e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b30:	8d a1       	ldd	r24, Y+37	; 0x25
    3b32:	9e a1       	ldd	r25, Y+38	; 0x26
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <main+0xcd8>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9a a3       	std	Y+34, r25	; 0x22
    3b4a:	89 a3       	std	Y+33, r24	; 0x21
    3b4c:	3f c0       	rjmp	.+126    	; 0x3bcc <main+0xd56>
	else if (__tmp > 65535)
    3b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b50:	7c a1       	ldd	r23, Y+36	; 0x24
    3b52:	8d a1       	ldd	r24, Y+37	; 0x25
    3b54:	9e a1       	ldd	r25, Y+38	; 0x26
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	4c f5       	brge	.+82     	; 0x3bb8 <main+0xd42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b66:	6f a1       	ldd	r22, Y+39	; 0x27
    3b68:	78 a5       	ldd	r23, Y+40	; 0x28
    3b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	bc 01       	movw	r22, r24
    3b80:	cd 01       	movw	r24, r26
    3b82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9a a3       	std	Y+34, r25	; 0x22
    3b8c:	89 a3       	std	Y+33, r24	; 0x21
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <main+0xd38>
    3b90:	89 e1       	ldi	r24, 0x19	; 25
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	98 a3       	std	Y+32, r25	; 0x20
    3b96:	8f 8f       	std	Y+31, r24	; 0x1f
    3b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b9a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <main+0xd26>
    3ba0:	98 a3       	std	Y+32, r25	; 0x20
    3ba2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	9a a3       	std	Y+34, r25	; 0x22
    3bac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	89 a1       	ldd	r24, Y+33	; 0x21
    3bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <main+0xd1a>
    3bb6:	14 c0       	rjmp	.+40     	; 0x3be0 <main+0xd6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    3bba:	7c a1       	ldd	r23, Y+36	; 0x24
    3bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    3bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    3bc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9a a3       	std	Y+34, r25	; 0x22
    3bca:	89 a3       	std	Y+33, r24	; 0x21
    3bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    3bce:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    3bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    3bd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <main+0xd62>
    3bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    3bde:	8d 8f       	std	Y+29, r24	; 0x1d
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    3be0:	82 e0       	ldi	r24, 0x02	; 2
    3be2:	64 e0       	ldi	r22, 0x04	; 4
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	a8 e4       	ldi	r26, 0x48	; 72
    3bf0:	b3 e4       	ldi	r27, 0x43	; 67
    3bf2:	89 8f       	std	Y+25, r24	; 0x19
    3bf4:	9a 8f       	std	Y+26, r25	; 0x1a
    3bf6:	ab 8f       	std	Y+27, r26	; 0x1b
    3bf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    3bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	4a e7       	ldi	r20, 0x7A	; 122
    3c08:	53 e4       	ldi	r21, 0x43	; 67
    3c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	8d 8b       	std	Y+21, r24	; 0x15
    3c14:	9e 8b       	std	Y+22, r25	; 0x16
    3c16:	af 8b       	std	Y+23, r26	; 0x17
    3c18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c20:	98 8d       	ldd	r25, Y+24	; 0x18
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e8       	ldi	r20, 0x80	; 128
    3c28:	5f e3       	ldi	r21, 0x3F	; 63
    3c2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c2e:	88 23       	and	r24, r24
    3c30:	2c f4       	brge	.+10     	; 0x3c3c <main+0xdc6>
		__ticks = 1;
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	9c 8b       	std	Y+20, r25	; 0x14
    3c38:	8b 8b       	std	Y+19, r24	; 0x13
    3c3a:	3f c0       	rjmp	.+126    	; 0x3cba <main+0xe44>
	else if (__tmp > 65535)
    3c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c40:	8f 89       	ldd	r24, Y+23	; 0x17
    3c42:	98 8d       	ldd	r25, Y+24	; 0x18
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	3f ef       	ldi	r19, 0xFF	; 255
    3c48:	4f e7       	ldi	r20, 0x7F	; 127
    3c4a:	57 e4       	ldi	r21, 0x47	; 71
    3c4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c50:	18 16       	cp	r1, r24
    3c52:	4c f5       	brge	.+82     	; 0x3ca6 <main+0xe30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c54:	69 8d       	ldd	r22, Y+25	; 0x19
    3c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e2       	ldi	r20, 0x20	; 32
    3c62:	51 e4       	ldi	r21, 0x41	; 65
    3c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	bc 01       	movw	r22, r24
    3c6e:	cd 01       	movw	r24, r26
    3c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	0f c0       	rjmp	.+30     	; 0x3c9c <main+0xe26>
    3c7e:	89 e1       	ldi	r24, 0x19	; 25
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	9a 8b       	std	Y+18, r25	; 0x12
    3c84:	89 8b       	std	Y+17, r24	; 0x11
    3c86:	89 89       	ldd	r24, Y+17	; 0x11
    3c88:	9a 89       	ldd	r25, Y+18	; 0x12
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <main+0xe14>
    3c8e:	9a 8b       	std	Y+18, r25	; 0x12
    3c90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c92:	8b 89       	ldd	r24, Y+19	; 0x13
    3c94:	9c 89       	ldd	r25, Y+20	; 0x14
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	9c 8b       	std	Y+20, r25	; 0x14
    3c9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	69 f7       	brne	.-38     	; 0x3c7e <main+0xe08>
    3ca4:	14 c0       	rjmp	.+40     	; 0x3cce <main+0xe58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    3caa:	8f 89       	ldd	r24, Y+23	; 0x17
    3cac:	98 8d       	ldd	r25, Y+24	; 0x18
    3cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	9c 8b       	std	Y+20, r25	; 0x14
    3cb8:	8b 8b       	std	Y+19, r24	; 0x13
    3cba:	8b 89       	ldd	r24, Y+19	; 0x13
    3cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cbe:	98 8b       	std	Y+16, r25	; 0x10
    3cc0:	8f 87       	std	Y+15, r24	; 0x0f
    3cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc4:	98 89       	ldd	r25, Y+16	; 0x10
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	f1 f7       	brne	.-4      	; 0x3cc6 <main+0xe50>
    3cca:	98 8b       	std	Y+16, r25	; 0x10
    3ccc:	8f 87       	std	Y+15, r24	; 0x0f
													_delay_ms(200);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_LOW);
    3cce:	82 e0       	ldi	r24, 0x02	; 2
    3cd0:	65 e0       	ldi	r22, 0x05	; 5
    3cd2:	40 e0       	ldi	r20, 0x00	; 0
    3cd4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	63 e0       	ldi	r22, 0x03	; 3
    3cdc:	41 e0       	ldi	r20, 0x01	; 1
    3cde:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	aa ef       	ldi	r26, 0xFA	; 250
    3ce8:	b4 e4       	ldi	r27, 0x44	; 68
    3cea:	8b 87       	std	Y+11, r24	; 0x0b
    3cec:	9c 87       	std	Y+12, r25	; 0x0c
    3cee:	ad 87       	std	Y+13, r26	; 0x0d
    3cf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	4a e7       	ldi	r20, 0x7A	; 122
    3d00:	53 e4       	ldi	r21, 0x43	; 67
    3d02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	8f 83       	std	Y+7, r24	; 0x07
    3d0c:	98 87       	std	Y+8, r25	; 0x08
    3d0e:	a9 87       	std	Y+9, r26	; 0x09
    3d10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d12:	6f 81       	ldd	r22, Y+7	; 0x07
    3d14:	78 85       	ldd	r23, Y+8	; 0x08
    3d16:	89 85       	ldd	r24, Y+9	; 0x09
    3d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e8       	ldi	r20, 0x80	; 128
    3d20:	5f e3       	ldi	r21, 0x3F	; 63
    3d22:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3d26:	88 23       	and	r24, r24
    3d28:	2c f4       	brge	.+10     	; 0x3d34 <main+0xebe>
		__ticks = 1;
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	9e 83       	std	Y+6, r25	; 0x06
    3d30:	8d 83       	std	Y+5, r24	; 0x05
    3d32:	3f c0       	rjmp	.+126    	; 0x3db2 <main+0xf3c>
	else if (__tmp > 65535)
    3d34:	6f 81       	ldd	r22, Y+7	; 0x07
    3d36:	78 85       	ldd	r23, Y+8	; 0x08
    3d38:	89 85       	ldd	r24, Y+9	; 0x09
    3d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	3f ef       	ldi	r19, 0xFF	; 255
    3d40:	4f e7       	ldi	r20, 0x7F	; 127
    3d42:	57 e4       	ldi	r21, 0x47	; 71
    3d44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3d48:	18 16       	cp	r1, r24
    3d4a:	4c f5       	brge	.+82     	; 0x3d9e <main+0xf28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e2       	ldi	r20, 0x20	; 32
    3d5a:	51 e4       	ldi	r21, 0x41	; 65
    3d5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	9e 83       	std	Y+6, r25	; 0x06
    3d72:	8d 83       	std	Y+5, r24	; 0x05
    3d74:	0f c0       	rjmp	.+30     	; 0x3d94 <main+0xf1e>
    3d76:	89 e1       	ldi	r24, 0x19	; 25
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9c 83       	std	Y+4, r25	; 0x04
    3d7c:	8b 83       	std	Y+3, r24	; 0x03
    3d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d80:	9c 81       	ldd	r25, Y+4	; 0x04
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <main+0xf0c>
    3d86:	9c 83       	std	Y+4, r25	; 0x04
    3d88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	9e 83       	std	Y+6, r25	; 0x06
    3d92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	9e 81       	ldd	r25, Y+6	; 0x06
    3d98:	00 97       	sbiw	r24, 0x00	; 0
    3d9a:	69 f7       	brne	.-38     	; 0x3d76 <main+0xf00>
    3d9c:	14 c0       	rjmp	.+40     	; 0x3dc6 <main+0xf50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3da0:	78 85       	ldd	r23, Y+8	; 0x08
    3da2:	89 85       	ldd	r24, Y+9	; 0x09
    3da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	9e 83       	std	Y+6, r25	; 0x06
    3db0:	8d 83       	std	Y+5, r24	; 0x05
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	9e 81       	ldd	r25, Y+6	; 0x06
    3db6:	9a 83       	std	Y+2, r25	; 0x02
    3db8:	89 83       	std	Y+1, r24	; 0x01
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <main+0xf48>
    3dc2:	9a 83       	std	Y+2, r25	; 0x02
    3dc4:	89 83       	std	Y+1, r24	; 0x01
													_delay_ms(2000);
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN6,DIO_u8_HIGH);
    3dc6:	82 e0       	ldi	r24, 0x02	; 2
    3dc8:	66 e0       	ldi	r22, 0x06	; 6
    3dca:	41 e0       	ldi	r20, 0x01	; 1
    3dcc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
													DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    3dd0:	82 e0       	ldi	r24, 0x02	; 2
    3dd2:	64 e0       	ldi	r22, 0x04	; 4
    3dd4:	40 e0       	ldi	r20, 0x00	; 0
    3dd6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_voidSetPinValue>
    3dda:	16 c9       	rjmp	.-3540   	; 0x3008 <main+0x192>

					 }

	}
			  }else{
				LCD_voideInit();
    3ddc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_voideInit>
				  LCD_PrintString("incorrect");
    3de0:	86 ea       	ldi	r24, 0xA6	; 166
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_PrintString>
			  }

}


	return 0;}
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	ce 56       	subi	r28, 0x6E	; 110
    3dee:	df 4f       	sbci	r29, 0xFF	; 255
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	cf 91       	pop	r28
    3dfc:	df 91       	pop	r29
    3dfe:	1f 91       	pop	r17
    3e00:	0f 91       	pop	r16
    3e02:	08 95       	ret

00003e04 <__udivmodsi4>:
    3e04:	a1 e2       	ldi	r26, 0x21	; 33
    3e06:	1a 2e       	mov	r1, r26
    3e08:	aa 1b       	sub	r26, r26
    3e0a:	bb 1b       	sub	r27, r27
    3e0c:	fd 01       	movw	r30, r26
    3e0e:	0d c0       	rjmp	.+26     	; 0x3e2a <__udivmodsi4_ep>

00003e10 <__udivmodsi4_loop>:
    3e10:	aa 1f       	adc	r26, r26
    3e12:	bb 1f       	adc	r27, r27
    3e14:	ee 1f       	adc	r30, r30
    3e16:	ff 1f       	adc	r31, r31
    3e18:	a2 17       	cp	r26, r18
    3e1a:	b3 07       	cpc	r27, r19
    3e1c:	e4 07       	cpc	r30, r20
    3e1e:	f5 07       	cpc	r31, r21
    3e20:	20 f0       	brcs	.+8      	; 0x3e2a <__udivmodsi4_ep>
    3e22:	a2 1b       	sub	r26, r18
    3e24:	b3 0b       	sbc	r27, r19
    3e26:	e4 0b       	sbc	r30, r20
    3e28:	f5 0b       	sbc	r31, r21

00003e2a <__udivmodsi4_ep>:
    3e2a:	66 1f       	adc	r22, r22
    3e2c:	77 1f       	adc	r23, r23
    3e2e:	88 1f       	adc	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	1a 94       	dec	r1
    3e34:	69 f7       	brne	.-38     	; 0x3e10 <__udivmodsi4_loop>
    3e36:	60 95       	com	r22
    3e38:	70 95       	com	r23
    3e3a:	80 95       	com	r24
    3e3c:	90 95       	com	r25
    3e3e:	9b 01       	movw	r18, r22
    3e40:	ac 01       	movw	r20, r24
    3e42:	bd 01       	movw	r22, r26
    3e44:	cf 01       	movw	r24, r30
    3e46:	08 95       	ret

00003e48 <__prologue_saves__>:
    3e48:	2f 92       	push	r2
    3e4a:	3f 92       	push	r3
    3e4c:	4f 92       	push	r4
    3e4e:	5f 92       	push	r5
    3e50:	6f 92       	push	r6
    3e52:	7f 92       	push	r7
    3e54:	8f 92       	push	r8
    3e56:	9f 92       	push	r9
    3e58:	af 92       	push	r10
    3e5a:	bf 92       	push	r11
    3e5c:	cf 92       	push	r12
    3e5e:	df 92       	push	r13
    3e60:	ef 92       	push	r14
    3e62:	ff 92       	push	r15
    3e64:	0f 93       	push	r16
    3e66:	1f 93       	push	r17
    3e68:	cf 93       	push	r28
    3e6a:	df 93       	push	r29
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	ca 1b       	sub	r28, r26
    3e72:	db 0b       	sbc	r29, r27
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	f8 94       	cli
    3e78:	de bf       	out	0x3e, r29	; 62
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	cd bf       	out	0x3d, r28	; 61
    3e7e:	09 94       	ijmp

00003e80 <__epilogue_restores__>:
    3e80:	2a 88       	ldd	r2, Y+18	; 0x12
    3e82:	39 88       	ldd	r3, Y+17	; 0x11
    3e84:	48 88       	ldd	r4, Y+16	; 0x10
    3e86:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e88:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e90:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e92:	b9 84       	ldd	r11, Y+9	; 0x09
    3e94:	c8 84       	ldd	r12, Y+8	; 0x08
    3e96:	df 80       	ldd	r13, Y+7	; 0x07
    3e98:	ee 80       	ldd	r14, Y+6	; 0x06
    3e9a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e9c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e9e:	1b 81       	ldd	r17, Y+3	; 0x03
    3ea0:	aa 81       	ldd	r26, Y+2	; 0x02
    3ea2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ea4:	ce 0f       	add	r28, r30
    3ea6:	d1 1d       	adc	r29, r1
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	ed 01       	movw	r28, r26
    3eb4:	08 95       	ret

00003eb6 <_exit>:
    3eb6:	f8 94       	cli

00003eb8 <__stop_program>:
    3eb8:	ff cf       	rjmp	.-2      	; 0x3eb8 <__stop_program>
